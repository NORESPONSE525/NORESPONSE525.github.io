{
    "version": "https://jsonfeed.org/version/1",
    "title": "NoResponse's Blog • All posts by \"计算机科学\" category",
    "description": "成分复杂的CSer from ZJU",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/09/18/computer-science/OS/ch1/",
            "url": "http://example.com/2025/09/18/computer-science/OS/ch1/",
            "title": "ch1",
            "date_published": "2025-09-17T16:00:00.000Z",
            "content_html": "<h1 id=\"ch1\"><a class=\"markdownIt-Anchor\" href=\"#ch1\">#</a> Ch1</h1>\n",
            "tags": [
                "操作系统"
            ]
        },
        {
            "id": "http://example.com/2025/09/15/computer-science/DS/ch1/",
            "url": "http://example.com/2025/09/15/computer-science/DS/ch1/",
            "title": "ch1",
            "date_published": "2025-09-14T16:00:00.000Z",
            "content_html": "<h1 id=\"ch1-绪论\"><a class=\"markdownIt-Anchor\" href=\"#ch1-绪论\">#</a> Ch1 绪论</h1>\n<p>数据<br>\n数据元素是数据的基本单位<br>\n数据对象<br>\n数据类型：原子类型、结构类型、抽象数据类型<br>\n数据结构：三要素包括逻辑结构、存储结构和数据的运算</p>\n<ul>\n<li>逻辑结构：集合、线性结构、树形结构、图状或网状</li>\n<li>存储结构：顺序存储、链式存储、索引存储、散列存储</li>\n<li>数据的运算：定义针对逻辑结构，实现针对存储结构</li>\n</ul>\n<p>算法的特性：又穷行、确定性、可行性、输入、输出<br>\n好的算法还应该考虑：正确性、可读性、健壮性、高效率和低存储量需求</p>\n<p>复杂度：时间复杂度、空间复杂度</p>\n",
            "tags": [
                "数据结构"
            ]
        },
        {
            "id": "http://example.com/2025/09/15/computer-science/DS/ch2/",
            "url": "http://example.com/2025/09/15/computer-science/DS/ch2/",
            "title": "ch1",
            "date_published": "2025-09-14T16:00:00.000Z",
            "content_html": "<h1 id=\"ch2-线性表\"><a class=\"markdownIt-Anchor\" href=\"#ch2-线性表\">#</a> Ch2 线性表</h1>\n<p>存储结构：顺序表（数组），链表</p>\n",
            "tags": [
                "线性表"
            ]
        },
        {
            "id": "http://example.com/2025/08/15/computer-science/computer-organization/ch7/",
            "url": "http://example.com/2025/08/15/computer-science/computer-organization/ch7/",
            "title": "Ch7",
            "date_published": "2025-08-14T16:00:00.000Z",
            "content_html": "<h1 id=\"ch7-输入输出系统\"><a class=\"markdownIt-Anchor\" href=\"#ch7-输入输出系统\">#</a> Ch7 输入 / 输出系统</h1>\n<h2 id=\"io接口\"><a class=\"markdownIt-Anchor\" href=\"#io接口\">#</a> I/O 接口</h2>\n<p>inerrface，主机与外设之间的交接界面</p>\n<h3 id=\"功能\"><a class=\"markdownIt-Anchor\" href=\"#功能\">#</a> 功能</h3>\n<ol>\n<li>进行地址译码和设备选择</li>\n<li>实现主机和外设的通信联络控制<br>\n解决时序、工作速度不同的问题</li>\n<li>实现数据缓冲</li>\n<li>信号格式的转换<br>\n电平转换、并 / 串或串 / 并转换、模 / 数或数 / 模转换</li>\n<li>传送控制命令和状态信息<br>\n CPU 通过接口中的命令寄存器发出启动命令给外设，外设就绪是传回 Ready 状态信息通过接口中的状态寄存器反馈给 CPU</li>\n</ol>\n<h3 id=\"基本结构\"><a class=\"markdownIt-Anchor\" href=\"#基本结构\">#</a> 基本结构</h3>\n<p><img data-src=\"f1.jpg\" alt><br>\n主机侧通过 I/O 总线与内存、CPU 相连。数据缓冲器用来暂存与 CPU 或内存之间传送的数据信息。状态寄存器用来记录接口和设备的状态信息，控制寄存器用来保存 CPU 对外设的控制信息<br>\n状态寄存器和控制寄存器在传送方向是相反的，访问时间上是错开的，所以可以合二为一<br>\n数据线传送读 / 写数据、状态信息、控制信息、中断类型号<br>\n地址线传送访问 I/O 接口中的寄存器的地址<br>\n控制线传送读写控制信号、中断请求、响应信号、仲裁信号、握手信号<br>\n I/O 控制逻辑需要对控制寄存器的命令字进行译码，还有收集外设状态到状态寄存器<br>\n<img data-src=\"f2.jpg\" alt></p>\n<blockquote>\n<p>对上面两个寄存器的访问操作通过 I/O 指令来完成，只能在操作系统内核的底层 I/O 软件中使用，是一种特权指令<br>\n<img data-src=\"f3.jpg\" alt></p>\n</blockquote>\n<h3 id=\"接口类型\"><a class=\"markdownIt-Anchor\" href=\"#接口类型\">#</a> 接口类型</h3>\n<ol>\n<li>按（外设和接口一侧的）数据传送方式：并行接口、串行接口</li>\n<li>按主机访问 I/O 设备的控制方式：程序查询接口、中断接口、DMA 接口</li>\n<li>按功能选择的灵活性：可编程接口、不可编程接口</li>\n</ol>\n<h3 id=\"io端口及其编址\"><a class=\"markdownIt-Anchor\" href=\"#io端口及其编址\">#</a> I/O 端口及其编址</h3>\n<p>I/O 端口是指 I/O 接口电路中<strong>可被 CPU 直接访问的寄存器</strong>，主要有<mark>数据端口、状态端口和控制端口</mark>。<br>\nCPU 能对数据端口中的数据进行读 / 写操作，但对状态端口中外设的状态只能读，对控制端口只能写<br>\n每个端口对应一个端口地址，编址方式有与存储器独立编址和统一编址两种</p>\n<ol>\n<li>独立编址<br>\n也称 I/O 映射方式，I/O 端口的地址空间与主存地址空间是两个独立的地址空间<br>\n需要设置专门的 I/O 指令来表明访问的是 I/O 地址空间，I/O 指令的地址码给出 I/O 端口号</li>\n</ol>\n<blockquote>\n<p>x86 架构中的 IN 和 OUT 指令<br>\n IN AL, 0x64    从 I/O 端口 0x64 读取一个字节的数据，存入寄存器 AL<br>\n 优点：I/O 端口数比主存单元数少得多，秩序少量地址线，使得 I/O 端口译码简单，寻址速度更快。使用专门的 I/O 指令，是程序更加清晰<br>\n缺点：I/O 指令少，只提供简单的传输操作，灵活性差。CPU 需要提供存储器读 / 写、I/O 设备读写两组控制信号，增大了控制的复杂性</p>\n</blockquote>\n<ol start=\"2\">\n<li>统一编址<br>\n也称存储器映射方式 (Memory-Mapped I/O)，无需设置专门的 I/O 指令，用统一的访存指令就可以访问 I/O 端口</li>\n</ol>\n<blockquote>\n<p>riscv 就是用 Memory-Mapped I/O<br>\n 优点：不需要专门的 I/O 指令，CPU 访问 I/O 更灵活方便，端口有较大的编址空间。I/O 访问的保护机制可由虚拟存储管理系统来实现，无需专门设置（内核态才能访问）<br>\n缺点：端口地址占用了部分主存地址空间。译码电路复杂</p>\n</blockquote>\n<h2 id=\"io方式\"><a class=\"markdownIt-Anchor\" href=\"#io方式\">#</a> I/O 方式</h2>\n<p>程序查询、程序中断、DMA<br>\n<img data-src=\"f5.jpg\" alt></p>\n<h3 id=\"程序查询方式polling\"><a class=\"markdownIt-Anchor\" href=\"#程序查询方式polling\">#</a> 程序查询方式 (Polling)</h3>\n<p>轮询法，程序执行到某个 I/O 操作指令时，由操作系统或设备驱动程序发起<br>\n<img data-src=\"f4.jpg\" alt><br>\n程序查询方式分为两类：</p>\n<ol>\n<li>独占查询<br>\n一旦设备启动，CPU 就一直持续查询接口状态，CPU 话费 100% 时间用于 I/O 操作，外设和 CPU 完全串行（忙等待）</li>\n<li>定时查询<br>\n CPU 周期性地查询接口状态，每次总是等到条件满足才进行一个数据的传送，传送完成后返回到用户程序。<br>\n比如设备每 10ms 产生一个数据，可以设置 5ms 查询一次，这样既能及时读取数据，又不至于过度查询。<mark>定时查询的时间间隔与设备的数据传输速率有关。</mark></li>\n</ol>\n<h3 id=\"程序中断方式\"><a class=\"markdownIt-Anchor\" href=\"#程序中断方式\">#</a> 程序中断方式</h3>\n<p><img data-src=\"f6.jpg\" alt><br>\n工作流程：</p>\n<ol>\n<li>中断请求<br>\n中断源向 CPU 发送中断请求信号。中断系统对每个中断源设置中断请求标记触发器<br>\n可屏蔽中断：通过 <code>INTR</code>  线发出的，优先级低，关中断下不被响应<br>\n不可屏蔽中断：通过 <code>NMI</code>  线发出的，优先级最高</li>\n<li>中断响应<br>\n响应中断的条件。<br>\n中断判优：多个中断源同时提出请求时通过中断判优逻辑响应一个中断源。<br>\n一般来说：不可屏蔽中断 &gt; 可屏蔽中断；在 I/O 传送类终端中，高速设备 &gt; 低速设备，输入设备 &gt; 输出设备，实时设备 &gt; 普通设备<br>\n CPU 响应中断的条件：</li>\n</ol>\n<ul>\n<li>中断源有中断请求</li>\n<li>允许中断及开中断</li>\n<li>一条指令执行完毕（除非是指令执行异常）</li>\n</ul>\n<ol start=\"3\">\n<li>中断处理</li>\n</ol>\n<ul>\n<li>中断隐指令：\n<ul>\n<li>关中断（防止在中断处理程序执行期间被其他（同级或低优先级）中断再次打断）</li>\n<li>保护现场（把 PC, PSW 等压入内核栈）</li>\n<li>引出中断服务程序：硬件向量法和软件查询法</li>\n</ul>\n</li>\n</ul>\n<p>中断向量：硬件提供向量号，中断控制器将该中断对应的向量号放到数据总线上，CPU 读取该向量号，CPU 使用该向量号作为索引，查找中断向量表（IVT）获取 ISR 的入口地址</p>\n<p>处理流程：</p>\n<ul>\n<li>关中断</li>\n<li>保存断点</li>\n<li>中断服务程序寻址</li>\n<li>保存现场和屏蔽字</li>\n<li>开中断（允许更高级中断请求得到响应）</li>\n<li>执行 ISR</li>\n<li>关中断</li>\n<li>恢复现场和屏蔽字</li>\n<li>开中断，中断返回<br>\n 1-3 由硬件自动完成，4-9 由 ISR 完成</li>\n</ul>\n<blockquote>\n<p>为什么要先关再开？<br>\n确保这个保护现场的操作不会被其他中断打断</p>\n</blockquote>\n<h4 id=\"多重中断和中断屏蔽技术\"><a class=\"markdownIt-Anchor\" href=\"#多重中断和中断屏蔽技术\">#</a> 多重中断和中断屏蔽技术</h4>\n<p>通过中断屏蔽字寄存器来实现，每个中断源都有一个屏蔽触发器，<mark>1 表示屏蔽该中断源的请求</mark>，0 表示可以正常申请<br>\n<mark>屏蔽字中‘1’越多，优先级越高。每个屏蔽字中至少有一个 <code>1</code>  (至少要能屏蔽自身的中断)</mark><br>\n 方法：要能屏蔽自身所以主对角线全为 1，同时优先级比自身低的中断要屏蔽屏蔽字全填 1，其他的填 0</p>\n<h3 id=\"dma方式\"><a class=\"markdownIt-Anchor\" href=\"#dma方式\">#</a> DMA 方式</h3>\n<p>DMA 方式是一种完全由硬件进行组信息传送的控制方式<br>\n<img data-src=\"f7.jpg\" alt><br>\n<img data-src=\"f8.jpg\" alt><br>\n<img data-src=\"f9.jpg\" alt></p>\n<p>当 I/O 设备和 CPU 同时访问主存时，可能发生冲突，DMA 与 CPU 通常采用以下 3 种方式使用驻村：<br>\n<img data-src=\"f10.jpg\" alt><br>\n周期挪用：<br>\n一次传一组数据</p>\n<ul>\n<li>CPU 不访存时：如果 CPU 当前并不需要访问主存，那么 DMA 控制器可以直接使用总线进行数据传输，此时不会对 CPU 的工作造成任何影响。</li>\n<li>CPU 正在访存时：如果 CPU 正在进行主存访问，DMA 控制器会等待 CPU 的当前访问周期结束，然后立即 “借用” 接下来的一个或几个总线周期来进行自己的数据传输。这种情况下，CPU 的访问会被短暂延迟，但通常这种延迟非常短，以至于 CPU 几乎感觉不到，因此可以认为 CPU 的正常工作没有受到显著影响。</li>\n<li>CPU 与 DMA 同时请求访存时：在这种情况下，I/O 设备的访存请求通常具有更高的优先级，这意味着即使 CPU 也在请求访问主存，DMA 控制器也会被优先考虑，从而保证 I/O 设备的数据传输不受阻。</li>\n</ul>\n<ol>\n<li>停止 CPU 访存<br>\n优点：控制简单，适用于数据传输速率很高的 I/O 设备实现成组数据的传送<br>\n缺点：DMA 访问主存时，CPU 基本上不工作</li>\n<li>周期挪用<br>\n优点：既实现了 I/O 传送，又较好地发挥了主存与 CPU 的效率<br>\n缺点：每挪用一个主存周期，DMA 接口都要申请、建立和归还总线周期</li>\n<li>交替访存<br>\n优点：不需要总线控制权的申请、建立和归还过程，传送效率高<br>\n缺点：相应的硬件逻辑变得更复杂</li>\n</ol>\n<h4 id=\"dma的传送过程\"><a class=\"markdownIt-Anchor\" href=\"#dma的传送过程\">#</a> DMA 的传送过程</h4>\n<p><img data-src=\"f9.jpg\" alt></p>\n<ul>\n<li>预处理：由 CPU 初始化 DMA 控制其中的寄存器、设置传送方式、测试并启动设备</li>\n<li>数据传送：DMA 以数据块为基本传送单位。数据传送完全由 DMA 控制</li>\n<li>后处理：DMA 控制器向 CPU 发送中断请求，CPU 处理中断做 DMA 结束处理（包括校验）</li>\n</ul>\n<p>DMA 方式和中断方式的区别：</p>\n<ul>\n<li>中断需要 save context，DMA 不需要，除了预处理和后处理其他时候不占用 CPU（我觉得 DMA 方式的预处理和后处理的中断也是需要 save context 的，只是因为 DMA 方式中断次数极少，整个数据块只中断一次，所以不需要保存那么多次，所以比较快）</li>\n<li>对中断请求的相应只能发生在每条指令执行结束时，但对 DMA 请求的相应可以发生在任意一个机器周期结束时 (IF, ID, EX…  DMA 请求的是总线控制权，不是 CPU 的执行权。它不关心 CPU 正在执行哪条指令，只关心总线是否空闲。只要当前总线周期结束，DMA 就可以插空使用)</li>\n<li>中断传送过程需要 CPU 的干预，DMA 传送不需要，数据传输速率高</li>\n</ul>\n<p>优先级：</p>\n<ul>\n<li>DMA 请求的优先级高于中断请求</li>\n<li>中断方式具有处理异常事件的能力，DMA 方式局限于大批数据的传送</li>\n<li>中断方式靠程序传送，DMA 方式靠硬件传送</li>\n</ul>\n",
            "tags": [
                "I/O"
            ]
        },
        {
            "id": "http://example.com/2025/08/10/computer-science/computer-organization/ch5/",
            "url": "http://example.com/2025/08/10/computer-science/computer-organization/ch5/",
            "title": "Ch5",
            "date_published": "2025-08-09T16:00:00.000Z",
            "content_html": "<h1 id=\"ch5-中央处理器\"><a class=\"markdownIt-Anchor\" href=\"#ch5-中央处理器\">#</a> Ch5 中央处理器</h1>\n<h2 id=\"cpu的功能和基本结构\"><a class=\"markdownIt-Anchor\" href=\"#cpu的功能和基本结构\">#</a> CPU 的功能和基本结构</h2>\n<h3 id=\"功能\"><a class=\"markdownIt-Anchor\" href=\"#功能\">#</a> 功能</h3>\n<p>CPU 由运算器和控制器组成，具体功能包括：</p>\n<ul>\n<li>指令控制</li>\n<li>操作控制</li>\n<li>时间控制</li>\n<li>数据加工</li>\n<li>中断处理</li>\n</ul>\n<h3 id=\"基本结构\"><a class=\"markdownIt-Anchor\" href=\"#基本结构\">#</a> 基本结构</h3>\n<ol>\n<li>运算器：ALU, 暂存器，ACC, GPRs, PSW, 移位寄存器， 计数器…</li>\n<li>控制器：PC, IR, ID, 时序电路，未操作信号发生器…</li>\n</ol>\n<h3 id=\"cpu的寄存器\"><a class=\"markdownIt-Anchor\" href=\"#cpu的寄存器\">#</a> CPU 的寄存器</h3>\n<p>按汇编程序是否可访问分为用户可见寄存器 (GPRs, PSW, PC) 和用户不可见寄存器 (存储器地址寄存器，存储器数据寄存器，IR, 暂存寄存器，累加寄存器，移位寄存器)<br>\n 各寄存器的作用：</p>\n<ul>\n<li>在运算器中：\n<ul>\n<li>GPRs</li>\n<li>ACC: 通用寄存器，用于暂时存放 ALU 运算的结果</li>\n<li>SR（移位寄存器）：存放操作数且可以移位</li>\n<li>暂存寄存器：暂存从数据总线或通用寄存器送来的操作数，对应用程序员透明</li>\n<li>PSW：保留各种状态信息</li>\n</ul>\n</li>\n<li>在控制器中：\n<ul>\n<li>PC: 存放当前指令的地址</li>\n<li>IR: 存放当前指令</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"指令执行过程\"><a class=\"markdownIt-Anchor\" href=\"#指令执行过程\">#</a> 指令执行过程</h2>\n<h3 id=\"指令周期\"><a class=\"markdownIt-Anchor\" href=\"#指令周期\">#</a> 指令周期</h3>\n<p>= 取值周期 + 执行周期<br>\n间址周期在取址和执行之间<br>\n如果 CPU 在每条指令结束前都要发中断查询信号 （轮询法），后面要加上中断周期</p>\n<h3 id=\"指令周期的数据流\"><a class=\"markdownIt-Anchor\" href=\"#指令周期的数据流\">#</a> 指令周期的数据流</h3>\n<ol>\n<li>取址周期</li>\n</ol>\n<ul>\n<li>PC-&gt;MAR-&gt; 地址总线 -&gt; 存储器</li>\n<li>CU 发出读命令 -&gt; 控制总线 -&gt; 主存</li>\n<li>主存 -&gt; 数据总线 -&gt;IR</li>\n<li>CU 发出控制信号 -&gt;PC=PC+1</li>\n</ul>\n<ol start=\"2\">\n<li>间址周期<br>\n取指结束后，控制单元 CU 会检查 IR 中是否有间接地址（操作数有效地址的地址）。若有，CPU 执行如下操作：</li>\n</ol>\n<ul>\n<li>IR (或 MDR) 的间址 -&gt;MAR-&gt; 地址总线 -&gt; 主存</li>\n<li>CU 发出读命令 -&gt; 控制总线 -&gt; 主存</li>\n<li>主存 -&gt; 数据总线 -&gt;MDR（取出有效地址存入 MDR）</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>执行周期</p>\n</li>\n<li>\n<p>中断周期<br>\n假设程序断点存入堆栈中，push 操作先修改 SP 再存入（x86 采用满递减栈）</p>\n</li>\n</ol>\n<ul>\n<li>CU 控制将 SP 减 1，SP-&gt;MAR-&gt; 地址总线 -&gt;zhucun1</li>\n<li>CU 发出写命令 -&gt; 控制总线 -&gt; 主存</li>\n<li>PC-&gt;MDR-&gt; 数据总线 -&gt; 主存（把中断时的 PC 存入栈中）</li>\n<li>CU 将中断服务程序入口地址存入 PC</li>\n</ul>\n<h3 id=\"指令执行方案\"><a class=\"markdownIt-Anchor\" href=\"#指令执行方案\">#</a> 指令执行方案</h3>\n<ol>\n<li>单周期处理器<br>\n CPI = 1，指令执行周期取决于执行时间最长的指令的执行时间</li>\n<li>多周期处理器<br>\n CPI &gt; 1,</li>\n<li>流水线处理器<br>\n理想状态下 CPI = 1，流水线并行</li>\n</ol>\n<h2 id=\"数据通路\"><a class=\"markdownIt-Anchor\" href=\"#数据通路\">#</a> 数据通路</h2>\n<h3 id=\"功能-2\"><a class=\"markdownIt-Anchor\" href=\"#功能-2\">#</a> 功能</h3>\n<p>。</p>\n<h3 id=\"组成\"><a class=\"markdownIt-Anchor\" href=\"#组成\">#</a> 组成</h3>\n<ol>\n<li>组合逻辑<br>\n译码器，MUX，三态门…</li>\n<li>时序逻辑<br>\n包含存储信号的记忆单元</li>\n</ol>\n<h3 id=\"基本结构-2\"><a class=\"markdownIt-Anchor\" href=\"#基本结构-2\">#</a> 基本结构</h3>\n<p>2 种：</p>\n<ul>\n<li>CPU 内部总线（单总线、多总线）</li>\n<li>专用数据通路</li>\n</ul>\n<ol>\n<li>CPU 内部单总线方式<br>\n ALU 和寄存器连接到一条总线上，性能低<br>\n单总线的 ALU 要配合暂存器使用，比如从内存取出来的数据要放在暂存器中，再从暂存器中取数据给 ALU<br>\n<img data-src=\"f1.jpg\" alt><br>\n 了解每条指令的 datapath</li>\n<li>CPU 内部多总线方式<br>\n允许同时在多个总线上传送不同的数据，提高效率</li>\n<li>专用数据通路方式<br>\n看图说话，没什么好说的</li>\n</ol>\n<h3 id=\"数据通路的操作举例\"><a class=\"markdownIt-Anchor\" href=\"#数据通路的操作举例\">#</a> 数据通路的操作举例</h3>\n<p>会画图就会</p>\n<h2 id=\"控制器的功能和工作原理\"><a class=\"markdownIt-Anchor\" href=\"#控制器的功能和工作原理\">#</a> 控制器的功能和工作原理</h2>\n<h3 id=\"结构和功能\"><a class=\"markdownIt-Anchor\" href=\"#结构和功能\">#</a> 结构和功能</h3>\n<ol>\n<li>取指令，指出下一条指令的位置</li>\n<li>译码或测试，产生控制信号</li>\n<li>控制 CPU，主存，I/O 的数据流动方向<br>\n分为硬布线控制器和微程序控制器</li>\n</ol>\n<h3 id=\"硬布线控制器\"><a class=\"markdownIt-Anchor\" href=\"#硬布线控制器\">#</a> 硬布线控制器</h3>\n<p>组合逻辑控制器<br>\n CU 的输入信号来自 (1) 指令译码器 (2) 时钟脉冲 (3) 执行单元的反馈信息<br>\n比如这种：<br>\n<img data-src=\"f2.jpg\" alt></p>\n<h3 id=\"微程序控制器\"><a class=\"markdownIt-Anchor\" href=\"#微程序控制器\">#</a> 微程序控制器</h3>\n<p>采用存储逻辑实现，将未操作信号代码化，使没调机器指令转化成一段微程序并存入专门的控制存储器中<br>\n晚点回来学</p>\n<h2 id=\"异常和中断机制\"><a class=\"markdownIt-Anchor\" href=\"#异常和中断机制\">#</a> 异常和中断机制</h2>\n<h3 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h3>\n<p>内部产生的意外事件叫异常，是同步的；外部产生的事件叫中断，是异步的</p>\n<h3 id=\"分类\"><a class=\"markdownIt-Anchor\" href=\"#分类\">#</a> 分类</h3>\n<ul>\n<li>\n<p>异常：CPU 内部执行指令引起的异常事件，比如整除 0，溢出，单步跟踪，非法指令，栈溢出，地址越界，缺页等</p>\n<ul>\n<li>\n<ol>\n<li>Fault 故障<br>\n引起故障的指令启动后、执行结束前检测到的异常事件（所以处理完之后要重新执行该指令或者无法恢复的终止进程）</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>Trap 自陷<br>\n人为设定的特殊中断机制，最常见的是 sys call，还有断点、单步，还有一些条件自陷指令（MIPS 的 teq, teqi, tne, tnei）等<br>\n<mark>以上两种都属于软件中断</mark></li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>Abort 终止<br>\n执行过程中发生了硬件故障，比如控制器出错、存储器校验错、总线错误等<br>\n<mark> Abort 和外中断属于硬件中断</mark></li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>中断：CPU 外部比如 I/O 引起的中断，分为可屏蔽中断和不可屏蔽中断</p>\n<ul>\n<li>可屏蔽中断：可屏蔽中断请求线 INTR 向 CPU 发出中断请求，CPU 可以设置相应的 bit 屏蔽</li>\n<li>不可屏蔽中断：通过专门的不可屏蔽中断请求线 NMI 向 CPU 发出的中断请求，通常是非常紧急的硬件故障<br>\n<mark>所有的异常和终端都是由硬件检测发现的</mark><br>\n根据识别中断服务程序地址的方式，可以分为向量中断和非向量中断；<br>\n根据中断处理过程是否允许被打断分为单重中断和多重中断</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"异常和中断的响应过程\"><a class=\"markdownIt-Anchor\" href=\"#异常和中断的响应过程\">#</a> 异常和中断的响应过程</h3>\n<ol>\n<li>关中断<br>\n保存断点和程序状态期间，把 IF 置 0 不允许响应中断</li>\n<li>保存断点和程序状态<br>\n将返回地址和被中断时的 PSW 送到栈或特定寄存器中（通常是栈，才能支持嵌套中断），处理完之后恢复</li>\n<li>识别异常和中断并转到相应的处理程序<br>\n异常大多采用软件识别，中断可以采用软件识别或硬件识别<br>\n软件识别：CPU 设置异常状态寄存器，操作系统使用查询程序按优先级顺序查询异常状态寄存器以检测类型并处理<br>\n硬件识别：向量中断。每个异常或中断被指定一个中断类型号，发生之后查询中断向量表，找到处理程序的入口地址（中断向量），并跳转到处理程序</li>\n</ol>\n<h2 id=\"指令流水线\"><a class=\"markdownIt-Anchor\" href=\"#指令流水线\">#</a> 指令流水线</h2>\n<ul>\n<li>Performance via parallelism</li>\n<li>Performance via pipelining</li>\n<li>Performance via prediction<br>\n 时间并行：流水线<br>\n空间并行：超标量</li>\n</ul>\n<h3 id=\"基本实现\"><a class=\"markdownIt-Anchor\" href=\"#基本实现\">#</a> 基本实现</h3>\n<p>单周期 CPU 以执行最慢的指令周期作为时钟周期。不能缩短单挑指令的执行时间，但可以提高整个程序的执行速度<br>\n每个流水段后面都要加一个流水段寄存器锁存数据，保证本段的执行结果能在下个周期给下一流水段使用。</p>\n<h3 id=\"hazard\"><a class=\"markdownIt-Anchor\" href=\"#hazard\">#</a> Hazard</h3>\n<ul>\n<li>结构冒险、数据冒险、控制冒险</li>\n</ul>\n<ol>\n<li>structural hazard<br>\n 在流水线执行期间，两条及以上指令同一时间对同一个硬件资源发起使用的请求（Memory conflicts, Register File conflicts, Other units conflicts）<br>\n解决方法：(1) stall (2) 增加更多的硬件支持单元（比如 Double Bump，前半周期写后半周期读）</li>\n<li>data hazard<br>\nRAW, WAR, WAW<br>\n 统考不考乱序执行所以只需要考虑 RAW 写后读<br>\n解决方法：(1) stall (2) NOP (3) forwarding</li>\n</ol>\n<ul>\n<li>stall<br>\n 硬件解决方法，流水线阻塞，使数据相关的后续指令延迟执行，也称为插入气泡（bubble）</li>\n<li>NOP<br>\n 软件解决方法，编译时插入空操作（NOP）比如 <code>addi x0,x0,0</code> ，使数据相关的后续指令延迟执行</li>\n<li>forwarding<br>\n 旁路转发，将数据通路生成的中间数据直接往前传递到 ALU 的输入端，参与下一条指令的运算<br>\n必须同时满足两个条件：</li>\n<li>指令确实会写入寄存器（通过检查 RegWrite 信号）。</li>\n<li>目标寄存器编号不是 x0（零寄存器不会变）<br>\n才需要 forwarding</li>\n</ul>\n<blockquote>\n<p>ALU-&gt;ALU<br>\n 数据可以从  <code>EX/MEM</code>  或  <code>MEM/WB</code>  阶段转发到当前在 EX 阶段的 ALU 输入<br>\n MEM-&gt;ALU<br>\nload 指令的数据只有在 <code>MEM/WB</code>  阶段才能被转发到当前在 EX 阶段的 ALU 输入，所以如果 load 下一条指令要用到 load 指令的数据，则需要先 stall 一周期再 forwarding</p>\n</blockquote>\n<ol start=\"3\">\n<li>control hazard<br>\n 解决方法：</li>\n</ol>\n<ul>\n<li>插入 3 条 <code>NOP</code>  直到分支指令的 <code>WB</code>  阶段才进行下一条指令的 <code>IF</code></li>\n<li>分支预测<br>\n<img data-src=\"f5.jpg\" alt></li>\n</ul>\n<h3 id=\"流水线的性能指标\"><a class=\"markdownIt-Anchor\" href=\"#流水线的性能指标\">#</a> 流水线的性能指标</h3>\n<ol>\n<li>吞吐率<br>\n单位时间内流水线所完成的任务数量</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mi>P</mi><mo>=</mo><mfrac><mi>n</mi><msub><mi>T</mi><mi>k</mi></msub></mfrac></mrow><annotation encoding=\"application/x-tex\">TP = \\frac{n}{T_k}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.9435600000000002em;vertical-align:-0.8360000000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.3139999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p k+n-1>k 是流水线的段数，n 是任务数，Tk 是处理 n 个任务所用的总时间。理想状态下一条 k 段流水线能在 <code>k+n-1</code>  个时钟周期完成 <code>n</code>  个任务，吞吐率为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>n</mi><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo>+</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">Δ</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{n}{(k + n - 1) \\Delta t}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.215392em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.695392em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span><span class=\"mord mtight\">Δ</span><span class=\"mord mathnormal mtight\">t</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><br>\n 2. 流水线的加速比<br>\n完成同一批任务，不适用流水线和使用流水线所用的时间之比<br>\n理想状态下流水线加速比为\\frac{k n}</p>\n<h3 id=\"高级流水线技术\"><a class=\"markdownIt-Anchor\" href=\"#高级流水线技术\">#</a> 高级流水线技术</h3>\n<ol>\n<li>超标量流水线<br>\n动态多发射技术，支持乱序执行</li>\n</ol>\n<ul>\n<li>Scoreboard<br>\n<img data-src=\"f3.jpg\" alt></li>\n<li>Tomasulo<br>\n<img data-src=\"f4.jpg\" alt></li>\n</ul>\n<ol start=\"2\">\n<li>超长指令字技术<br>\n静态多发射技术，将多条能并行操作的指令组合成一个超长指令字，需要多个处理不见</li>\n<li>超流水线技术<br>\n流水线功能段划分的越多，时钟周期越短，指令吞吐率越高。<br>\n超流水线技术通过提高流水线主频来提高性能，但是流水段越多中间寄存器的开销就越大</li>\n</ol>\n<blockquote>\n<p>超流水线或者理想状态下流水线技术 CPI=1；多发射流水线的 CPI 可以小于 1</p>\n</blockquote>\n<h2 id=\"多处理器\"><a class=\"markdownIt-Anchor\" href=\"#多处理器\">#</a> 多处理器</h2>\n<h3 id=\"sisd-simd-mimd\"><a class=\"markdownIt-Anchor\" href=\"#sisd-simd-mimd\">#</a> SISD SIMD MIMD</h3>\n<ol>\n<li>SISD: single instruction single data<br>\n 传统串行处理器</li>\n<li>SIMD: single instruction multiple data<br>\n 数据级并行技术 (DLP)，一条指令可以同时对多个数据元素执行相同的操作，用到向量寄存器<br>\n在处理 for 循环数组时最有效（比如两个数组相加）；在使用 case/seitch 时效率最低</li>\n<li>MISD: multiple instruction single data<br>\n 实际上不存在</li>\n<li>MIMD: multiple instruction multiple data<br>\nTLP<br>\n 分为多计算机系统和多处理器系统。<br>\n多计算机系统由多个独立的计算机节点组成，每个节点通常包含自己的存储器、CPU，具有独立的主存地址空间，通过消息传递进行数据传送，也称 <code>消息传递MIMD</code> <br>\n 多处理器系统是共享存储多处理器 <code>SMP</code>  系统的简称，共享单一地址空间，也称共享存储 MIMD<br>\n 向量处理器是 SIMD 的变体，实现了直接操作一维数组指令集</li>\n</ol>\n<h3 id=\"硬件多线程\"><a class=\"markdownIt-Anchor\" href=\"#硬件多线程\">#</a> 硬件多线程</h3>\n<ol>\n<li>细粒度多线程 Fine-grained multithreading<br>\n 多个线程交叉执行指令，线程之间的指令不相关，可以乱序并行执行，需要频繁进行上下文切换，不需要重载流水线。牺牲单个线程执行的性能，来换取整个进程吞吐量的提升</li>\n<li>粗粒度多线程 Coarse-grained multithreading<br>\n 连续几个时钟周期都执行同一线程的指令序列，尽在当前线程出现较大开销的阻塞才切换（比如 L2 miss, L2 miss）相比细粒度多线程，上下文切换的频率较低，切换时需要重载流水线</li>\n<li>同时多线程 SMT<br>\nILP+TLP，指令级并行的同时实现线程级并行，在同一个时钟周期发射多个不同线程中的多条指令执行<br>\n Intal 的 Hyper-threading 就是 SMT<br>\n<img data-src=\"f6.jpg\" alt></li>\n</ol>\n<h3 id=\"多核处理器\"><a class=\"markdownIt-Anchor\" href=\"#多核处理器\">#</a> 多核处理器</h3>\n<p>一个 CPU 有多个 core，也称片上多处理器<br>\n每个核既可以有自己的 Cache，又可以共享同一个 Cache，所有核共享主存储器<br>\n多核处理器必须采用多线程（或多进程）才能发挥性能</p>\n<h3 id=\"共享内存多处理器-smp\"><a class=\"markdownIt-Anchor\" href=\"#共享内存多处理器-smp\">#</a> 共享内存多处理器 SMP</h3>\n<p>处理器通过存储器中的共享变量互相通信，所有存储器都能通过存取指令访问存储器的任何位置，有两种：<br>\n<img data-src=\"f7.jpg\" alt></p>\n<ul>\n<li>UMA 统一存储访问多处理器<br>\n UMA 中所有处理器对所有内存模块的访问延迟是相同的，由于访问延迟一致，数据放在哪个内存模块上对性能影响不大。随着系统规模扩大，所有处理器都通过同一个前端总线访问内存，导致互连网络成为瓶颈，延迟增加，带宽受限<br>\n<img data-src=\"f8.jpg\" alt></li>\n<li>NUMA 非统一存储访问多处理器<br>\n内存有本地内存和远程内存，访问本地内存快。CPU 可以通过 QPI 总线访问远程内存<br>\n<img data-src=\"f9.jpg\" alt></li>\n<li>需要解决 Cache coherence 问题：Snooping (MSI, MESI, MOESI…), Directory<br>\n 基本思想都是对共享变量加锁，保证互斥访问\n<ul>\n<li>Snooping:<br>\n<img data-src=\"f10.jpg\" alt><br>\n<img data-src=\"f11.jpg\" alt></li>\n<li>Directory:<br>\n<img data-src=\"f12.jpg\" alt></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "CPU"
            ]
        },
        {
            "id": "http://example.com/2025/08/10/computer-science/computer-organization/ch6/",
            "url": "http://example.com/2025/08/10/computer-science/computer-organization/ch6/",
            "title": "Ch6",
            "date_published": "2025-08-09T16:00:00.000Z",
            "content_html": "<h1 id=\"ch6-总线\"><a class=\"markdownIt-Anchor\" href=\"#ch6-总线\">#</a> Ch6 总线</h1>\n<h2 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\">#</a> 概述</h2>\n<h3 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h3>\n<p>总线是一组能为多个部件分时和共享的公共信息传送线路。<mark>分时</mark>和<mark>共享</mark>是总线的两个特点</p>\n<ul>\n<li>分时：同一时刻只允许有一个部件向总线发送信息</li>\n<li>共享：总线上可以挂接多个部件<br>\n总线设备：按对总线有无控制权分</li>\n<li>主设备：发出总线请求且获得总线控制权的设备</li>\n<li>从设备：被主设备访问的设备，只能响应从这设备发来的各种总线命令<br>\n特性：机械特性（尺寸、形状）、电气特性（传输方向、有效的电平范围）、功能特性（没跟传输线的功能）、时间特性（信号和时序的关系）</li>\n</ul>\n<h3 id=\"分类\"><a class=\"markdownIt-Anchor\" href=\"#分类\">#</a> 分类</h3>\n<ol>\n<li>按功能</li>\n</ol>\n<ul>\n<li>片内总线（CPU 内部的，连接各寄存器以及寄存器和 ALU）</li>\n<li>系统总线（连接 CPU、主存、I/O）。按传输内容又分为数据总线（数据、指令、终端类型号，双向传输）、地址总线（主存单元或 IO 端口地址，单向传输）、控制总线（clk, rst, 总线请求 / 允许，中断请求 / 回答，r/w…）</li>\n<li>I/O 总线（将低速的 IO 和告诉总线分离，常见的有 USB/PCI）</li>\n<li>通信总线（外部总线，计算机系统之间或计算机系统与其他系统）</li>\n</ul>\n<ol start=\"2\">\n<li>按时序控制方式</li>\n</ol>\n<ul>\n<li>同步总线</li>\n<li>异步总线</li>\n</ul>\n<ol start=\"3\">\n<li>按数据传输方式</li>\n</ol>\n<ul>\n<li>串行总线（一条双向或两条单向，数据按 bit 串行顺序传输，适合长距离通信）</li>\n<li>并行总线（有多条双向，容易出现干扰 / 延迟，适合近距离通信）</li>\n</ul>\n<h3 id=\"系统总线的结构\"><a class=\"markdownIt-Anchor\" href=\"#系统总线的结构\">#</a> 系统总线的结构</h3>\n<ol>\n<li>单总线结构<br>\n CPU，主存，IO，都挂在一组（地址、数据、控制）总线上，允许 IO 之间、IO 与主存直接交换信息<br>\n结构简单、成本低、易于接入新的设备<br>\n贷款低、负载中、不支持并发传送<br>\n<img data-src=\"f13.jpg\" alt></li>\n<li>双总线结构<br>\n一条主存总线，一条 I/O 总线<br>\n主存总线支持突发传送，突发传送（Burst Transfer）是一种数据传输方式，它允许在一次地址发送后，连续传输多个数据块，而不需要为每个数据块单独发送地址和控制信号<br>\n将低速的 I/O 设备分离开来，实现了存储器总线和 I/O 总线的分离<br>\n需要增加通道等硬件设备<br>\n<img data-src=\"f14.jpg\" alt></li>\n<li>三总线结构<br>\n主存总线、I/O 总线、直接内存访问 (DMA) 总线<br>\n DMA 允许外部设备（如硬盘、网卡、显卡）直接与主存进行数据交换，无需 CPU 的直接参与和干预，把 CPU 从繁琐、低效的数据搬运工作中解放出来，让它可以去做更复杂的计算任务<br>\n优点是提高了 I/O 设备的性能，使其更快地响应命令，提高系统吞吐量；缺点是任意时刻只能使用一种总线，系统工作效率较低（意思是一个设备不能同时使用多个总线，比如主存总线和 DMA 总线不能同时对主存进行存取）<br>\n<img data-src=\"f15.jpg\" alt></li>\n</ol>\n<h3 id=\"常见的总线标准\"><a class=\"markdownIt-Anchor\" href=\"#常见的总线标准\">#</a> 常见的总线标准</h3>\n<p>略</p>\n<h3 id=\"总线的性能指标\"><a class=\"markdownIt-Anchor\" href=\"#总线的性能指标\">#</a> 总线的性能指标</h3>\n<ul>\n<li>总线时钟周期</li>\n<li>总线时钟频率</li>\n<li>总线传输周期：申请、寻址、传输、结束</li>\n<li>总线工作频率：1 / 总线（传输）周期</li>\n<li>总线宽度：通常指数据总线的根数</li>\n<li>总线带宽：最大数据传输速率，B/s，带宽 = 总线工作频率 *（总线宽度 / 8）</li>\n<li>总线复用：一种信号现在不同的时间传输不同的信息，比如地址 / 数据线复用（地址通过数据线传送）</li>\n<li>信号线数：地址总线、数据总线、控制总线数量的总和<br>\n最主要的性能指标：<mark>总线宽度、总线工作频率、总线带宽</mark><br>\n带宽 = 总线工作频率 * 总线宽度 bits/s</li>\n</ul>\n<h2 id=\"总线事务和定时\"><a class=\"markdownIt-Anchor\" href=\"#总线事务和定时\">#</a> 总线事务和定时</h2>\n<h3 id=\"总线事务\"><a class=\"markdownIt-Anchor\" href=\"#总线事务\">#</a> 总线事务</h3>\n<p>从请求总线到完成总线使用的操作序列称为<strong>总线事务</strong>，典型的总线事务包括请求操作、仲裁操作、地址传输、数据传输和总线释放</p>\n<ol>\n<li>请求阶段：主设备（CPU 或 DMA）发出总线传输请求，获得总线控制权</li>\n<li>仲裁阶段：总选仲裁机构决定将下一个传输周期的总线使用权授予某个申请者</li>\n<li>寻址阶段：传输地址和命令，启动从模块</li>\n<li>传输阶段：主模块和从模块进行数据交换，单向或双向</li>\n<li>释放阶段：主模块有关信息从系统总线上撤除，让出总线使用权、</li>\n</ol>\n<p>数据传送方式：突发方式和非突发方式<br>\n突发传送：寻址阶段发送的是连续数据单元的首地址，传输阶段传送多个连续单元的数据，每个时钟周期可以传送一个字长的信息（如果总线宽度等于一个字长），一组数据全部传送完毕后再释放总线<br>\n非突发传送：每个传送周期内都先传送地址，再传送数据，每次只能传输一个字长的数据</p>\n<h3 id=\"总线定时\"><a class=\"markdownIt-Anchor\" href=\"#总线定时\">#</a> 总线定时</h3>\n<p>同步、异步、半同步、分离式</p>\n<ol>\n<li>同步定时方式<br>\n适用于总线较短且部件存取时间比较接近的系统。每个部件或设备发送或接收信息都在固定的总线传送周期中，一个总线的传送周期结束，下一个总线传送周期开始<br>\n优点：传送速度快，具有较高的传输速率；总线控制逻辑简单。<br>\n缺点：主从设备属于强制性同步；不能及时进行数据通信的有效性检验，可靠性较差</li>\n<li>异步定时方式<br>\n依靠传送双方相互制约的 “握手” 信号来实现定时控制。主设备发出请求，从设备接收到请求后发出回答。<br>\n优点：总线周期长度可变，能保证两个工作速度相差很大的部件或设备之间可靠地进行信息交换，自动适应时间的配合。<br>\n缺点：比同步控制方式稍复杂一些，速度比同步定时方式慢</li>\n</ol>\n<ul>\n<li>根据 “请求” 和 “回答” 的撤销是否互锁分为\n<ul>\n<li>不互锁方式：发出请求不必等回答，一段时间后自动撤销请求信号。收到请求信号后发出回答信号，一段时间后自动撤销回答信号。（速度最快 可靠性最差）</li>\n<li>半互锁方式：发出请求后等待收到回答信号才撤销请求信号。收到请求信号后发出回答信号，一段时间后自动撤销回答信号。</li>\n<li>全互锁方式：发出请求后等待收到回答信号才撤销请求信号，收到请求信号后发出回答，必须获知请求信号撤销之后才撤销回答信号（最可靠 速度最慢）</li>\n</ul>\n</li>\n</ul>\n<p>异步串行通信的方式一步串行通信的第一位是开始位，表示字符传送的开始。铜芯线上没有数据传送时处于逻辑 &quot;1&quot; 状态，发出逻辑 &quot;0&quot; 为开始位在从最低位开始传输信号。发送完字符之后可以发送几奇偶校验（若有），之后发送停止位。</p>\n<ol start=\"3\">\n<li>\n<p>半同步定时方式<br>\n<img data-src=\"f1.jpg\" alt><br>\n保留时钟信号的同时增设 Wait 响应信号线，Wait=1 的时候才取数据<br>\n优点：控制方式比异步简单<br>\n缺点：时钟频率不能太高</p>\n</li>\n<li>\n<p>分离式定时方式<br>\n将总线事务分解为请求和应答两个子过程。第一个子过程中，主设备发送命令、地址到总线上，发完立即释放总线（第一个字过程很短）。第二个另外以个设备接受命令并发送数据到总线。两个子过程都只有单向信息流，每个设备都变为主设备。<br>\n<img data-src=\"f2.jpg\" alt><br>\n<img data-src=\"f3.jpg\" alt><br>\n在空闲阶段释放总线使总线可接受其他设备的请求<br>\n控制复杂，开销大</p>\n</li>\n</ol>\n",
            "tags": [
                "总线"
            ]
        },
        {
            "id": "http://example.com/2025/08/01/computer-science/computer-organization/ch4/",
            "url": "http://example.com/2025/08/01/computer-science/computer-organization/ch4/",
            "title": "Ch4",
            "date_published": "2025-07-31T16:00:00.000Z",
            "content_html": "<h1 id=\"ch4-指令系统\"><a class=\"markdownIt-Anchor\" href=\"#ch4-指令系统\">#</a> Ch4 指令系统</h1>\n<h2 id=\"指令系统\"><a class=\"markdownIt-Anchor\" href=\"#指令系统\">#</a> 指令系统</h2>\n<h3 id=\"isa王道叫它指令集体系结构\"><a class=\"markdownIt-Anchor\" href=\"#isa王道叫它指令集体系结构\">#</a> ISA（王道叫它指令集体系结构）</h3>\n<p>指令系统 vs ISA</p>\n<p>ISA 完整地定义了软件和硬件之间的接口，规定了：</p>\n<ul>\n<li>指令格式（指令寻址方式，操作类型，操作数）</li>\n<li>操作数的类型、寻址方式、大端小端存放（大端：高位放在低地址；小端：低位放在低地址）</li>\n<li>程序可访问的寄存器编号、个数和位数，存储空间大小和编址方式</li>\n<li>指令执行过程的控制方式（PC, condition code, …）</li>\n</ul>\n<h3 id=\"指令的基本格式\"><a class=\"markdownIt-Anchor\" href=\"#指令的基本格式\">#</a> 指令的基本格式</h3>\n<p>操作码 + 地址码<br>\n主存一般是按字节编址，所以指令字长通常为字节的整数倍</p>\n<ol>\n<li>\n<p>零地址指令<br>\n NOP, HLT<br>\n 不需要操作数。<br>\n零地址的运算类指令仅用在堆栈计算机中（操作数直接从栈顶弹出）</p>\n</li>\n<li>\n<p>一地址指令<br>\n OP, A1<br>\nOP(A1) -&gt; A1<br>\n 加 1，减 1，取反，求补，移位等<br>\n可能有一个操作数或者两个操作数</p>\n</li>\n</ol>\n<blockquote>\n<p>隐含约定目的地址的双操作数指令，地址码指明一个操作数，另一个操作数来自隐含寻址</p>\n</blockquote>\n<ol start=\"3\">\n<li>\n<p>二地址指令<br>\n OP, A1, A2<br>\n(A1)OP(A2) -&gt; A1</p>\n</li>\n<li>\n<p>三地址指令<br>\n OP, A1, A2, A3<br>\n(A1)OP(A2) -&gt; A3</p>\n</li>\n<li>\n<p>四地址指令<br>\n OP, A1, A2, A3, A4<br>\n (A1) OP (A2) -&gt; A3, A4 = 下一条将要执行指令的地址</p>\n</li>\n</ol>\n<h3 id=\"定长操作码指令格式\"><a class=\"markdownIt-Anchor\" href=\"#定长操作码指令格式\">#</a> 定长操作码指令格式</h3>\n<p>n 位 opcode 最多能表示 2^n 条指令<br>\n指令字长：单字长 (PC = PC + 1)、双字长 (PC = PC + 2)…</p>\n<h3 id=\"扩展操作码指令格式\"><a class=\"markdownIt-Anchor\" href=\"#扩展操作码指令格式\">#</a> 扩展操作码指令格式</h3>\n<p>才去可变长度操作码，分散地放在指令字的不同位置上<br>\n要求：</p>\n<ol>\n<li>不允许短码是长码的前缀</li>\n<li>各指令的操作码不能重复<br>\n<img data-src=\"f1.jpg\" alt><br>\n RISC-V 指令集</li>\n</ol>\n<h3 id=\"指令的操作类型\"><a class=\"markdownIt-Anchor\" href=\"#指令的操作类型\">#</a> 指令的操作类型</h3>\n<ol>\n<li>数据传送</li>\n</ol>\n<ul>\n<li>MOV: 寄存器到寄存器</li>\n<li>LOAD: 从内存读到寄存器</li>\n<li>STORE: 从寄存器写入内存</li>\n<li>PUSH</li>\n<li>POP</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>算术和逻辑运算<br>\n ADD, SUB, MUL, DIV, MOD, AND, OR, XOR, NOT, XOR, INC (加一), DEC (减一)</p>\n</li>\n<li>\n<p>移位<br>\n算术移位，逻辑移位，循环移位</p>\n</li>\n<li>\n<p>转移<br>\n JMP, BRANCH, CALL, RET, TRAP（中断隐指令是硬件实现的，只有 TRAP 是软指令）</p>\n</li>\n<li>\n<p>I/O 操作</p>\n</li>\n</ol>\n<h2 id=\"指令的寻址方式\"><a class=\"markdownIt-Anchor\" href=\"#指令的寻址方式\">#</a> 指令的寻址方式</h2>\n<h3 id=\"指令寻址与数据寻址\"><a class=\"markdownIt-Anchor\" href=\"#指令寻址与数据寻址\">#</a> 指令寻址与数据寻址</h3>\n<ol>\n<li>指令寻址</li>\n</ol>\n<ul>\n<li>顺序： PC = PC + 1</li>\n<li>跳转： 绝对转移 (PC = 跳转地址) , 相对转移 (PC = PC + offset)</li>\n</ul>\n<ol start=\"2\">\n<li>数据寻址<br>\n格式：操作码 寻址特征 形式地址 A</li>\n</ol>\n<ul>\n<li>立即寻址 (addi, …)</li>\n<li>直接寻址（A 直接表示地址）</li>\n<li>寄存器寻址 (add, …)</li>\n<li>寄存器间接寻址 (lw r1 offset (r2), …)</li>\n</ul>\n<h3 id=\"常见的数据寻址方式\"><a class=\"markdownIt-Anchor\" href=\"#常见的数据寻址方式\">#</a> 常见的数据寻址方式</h3>\n<ol>\n<li>隐含寻址<br>\n比如单地址的第二个操作数由 ACC 提供: Intel 8080 的 <code>ADD A</code>  指令会将寄存器 A 的内容与指定的操作数（放在 ACC 内）相加，并将结果存储回累加器中<br>\n优点是缩短指令字长；缺点是需要增加存储操作数或隐含地址的硬件</li>\n<li>立即（数）寻址<br>\n比如 riscv 的 <code>addi x5, x6, #1</code> <br>\n 优点是不用访存速度快，缺点是立即数位数有限</li>\n<li>直接寻址<br>\n <code>OP #A</code> <br>\n 比如 lc3 的 <code>LD R1, LABEL1</code>  翻译成汇编是 <code>LD R1, x3100</code>  表示 <code>R1 &lt;- MEM[x3100]</code> <br>\n 形式地址 A 就是操作数的真实地址 EA<br>\n 优点是简单，缺点是寻址范围受 A 的位数限制</li>\n<li>间接寻址<br>\n EA = (A)<br>\n 指令中给出的地址是包含实际地址的内存位置或寄存器<br>\n比如 lc3 的 <code>LDI R1, LABEL1</code>  翻译成汇编是 <code>LDI R1, x3100</code>  表示 <code>R1 &lt;- MEM[MEM[x3100]]</code></li>\n<li>寄存器寻址<br>\n EA = (Ri)<br>\n <code>ADD R1, R2, R3</code></li>\n<li>寄存器间接寻址<br>\n EA = (Ri)<br>\n 比如 <code>LW R1, offset(R2)</code></li>\n<li>相对寻址<br>\n相对 PC 寻址<br>\n EA = (PC) + A<br>\n 比如 branch</li>\n<li>基址寻址<br>\n EA = (BR) + A<br>\n 面向操作系统，优点是扩大寻址范围，有利于躲到程序设计；缺点是偏移量 (A) 的位数较短</li>\n<li>变址寻址<br>\n EA = (IX) + A<br>\n 比如用来访问数组</li>\n</ol>\n<blockquote>\n<p>偏址寻址：相对寻址、基址寻址、变址寻址</p>\n</blockquote>\n<ol start=\"10\">\n<li>堆栈寻址有一个堆栈指针 SP，堆栈分为硬堆栈，软堆栈。寄存器堆栈是硬堆栈，内存是软堆栈。采用无操作数指令<br>\n<img data-src=\"f2.jpg\" alt></li>\n</ol>\n<h2 id=\"程序的机器级代码表示\"><a class=\"markdownIt-Anchor\" href=\"#程序的机器级代码表示\">#</a> 程序的机器级代码表示</h2>\n<p>x86 汇编</p>\n<h3 id=\"常用汇编指令介绍\"><a class=\"markdownIt-Anchor\" href=\"#常用汇编指令介绍\">#</a> 常用汇编指令介绍</h3>\n<ol>\n<li>相关寄存器<br>\n x86 架构有 8 个 32 位的通用寄存器：EAX、EBX、ECX、EDX、ESI、EDI、EBP、ESP<br>\n<img data-src=\"f3.jpg\" alt><br>\n<img data-src=\"f4.jpg\" alt><br>\n<img data-src=\"f5.jpg\" alt></li>\n<li>汇编指令格式<br>\n x86 汇编指令格式有两种：AT&amp;T 格式和 Intel 格式</li>\n</ol>\n<ul>\n<li>AT&amp;T 只能小写，Intel 大小写都行</li>\n<li>AT&amp;T 第一个操作数是源操作数，第二个是目的操作数；Intel 第一个操作数是目的操作数，第二个是源操作数</li>\n<li>AT&amp;T 寄存器前缀 %，立即数前缀 $；Intel 格式寄存器和立即数不需要加前缀</li>\n<li>内存寻址：AT&amp;T 格式为 (addr)，Intel 格式为 [addr]</li>\n<li>处理复杂寻址方式时，AT&amp;T 格式为 disp (base, index, scale)，表示偏移量，基址寄存器，变址寄存器，比例因子，表示的操作数为 M [R [base]+R [index]*scale + disp];</li>\n<li>指定数据长度时，AT&amp;T 用 b, w, l; Intel 用 byte ptr, word ptr, dword ptr (一个 word 是 16 位，一个 dword 是 32 位)<br>\n<img data-src=\"f6.jpg\" alt><br>\n<img data-src=\"f7.jpg\" alt></li>\n</ul>\n<ol start=\"3\">\n<li>常用指令</li>\n</ol>\n<ul>\n<li><reg>表示任意寄存器，后面跟数字指定其位数</reg></li>\n<li><mem>内存地址</mem></li>\n<li><con>后面跟数字表示几位常数<br>\n常见的指令：</con></li>\n<li>数据传送指令\n<ul>\n<li>mov\n<ul>\n<li>mov <reg>, <reg></reg></reg></li>\n<li>mov <reg>, <mem></mem></reg></li>\n<li>mov <mem>, <reg></reg></mem></li>\n<li>mov <reg>, <con></con></reg></li>\n<li>mov <mem>, <con></con></mem></li>\n</ul>\n</li>\n<li>push (ESP 指向栈顶空的位置，push 之前 ESP = ESP - 4)<mark> 栈中元素固定为 32 位</mark>\n<ul>\n<li>push &lt;reg32</li>\n<li>push <mem></mem></li>\n<li>push <con32></con32></li>\n</ul>\n</li>\n<li>pop (pop 之后 ESP = ESP + 4)\n<ul>\n<li>pop <reg32></reg32></li>\n<li>pop <mem></mem></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>算术和逻辑运算\n<ul>\n<li>add/sub (把两个操作数相加 / 减，结果放回目的操作数)\n<ul>\n<li>add eax, 10    # eax = eax + 10</li>\n<li>add byte ptr [var], 10    # 10 与 var 指向的内存地址的一字节值相加，结果放回 var 指向的内存中</li>\n</ul>\n</li>\n<li>inc/dec (把操作数自加 1 / 自减 1)\n<ul>\n<li>dec eax    # eax = eax - 1</li>\n<li>inc dword ptr [var]    # var 指向的 32 位值自加 1，结果放回 var 指向的 32 位内存中</li>\n</ul>\n</li>\n<li>imul (有符号数整数乘法，mul 是无符号数乘法) 目的操作数必须是寄存器，溢出时 <code>OF = 1</code>\n<ul>\n<li>imul <reg32>, <reg32></reg32></reg32></li>\n<li>imul <reg32>, <mem></mem></reg32></li>\n<li>imul <reg32>, <reg32>, <con></con></reg32></reg32></li>\n<li>imul <reg32>, <mem>, <con></con></mem></reg32></li>\n</ul>\n</li>\n<li>idiv (有符号数整数除法，<mark>只有一个操作数为除数，被除数有 64 位放在  <code>edx:eax</code>  中，操作结果商放到 <code>eax</code> ，余数放到 <code>edx</code> </mark>)\n<ul>\n<li>idiv <reg32></reg32></li>\n<li>idiv <mem></mem></li>\n</ul>\n</li>\n<li>and/or/xor\n<ul>\n<li>and/or/xor <reg>, <reg></reg></reg></li>\n<li>and/or/xor <reg>, <mem></mem></reg></li>\n<li>and/or/xor <mem>, <reg></reg></mem></li>\n<li>and/or/xor <reg>, <con></con></reg></li>\n<li>and/or/xor <mem>, <con></con></mem></li>\n</ul>\n</li>\n<li>not (按位取反)\n<ul>\n<li>not <reg></reg></li>\n<li>not <mem></mem></li>\n</ul>\n</li>\n<li>neg (取负)\n<ul>\n<li>neg <reg></reg></li>\n<li>neg <mem></mem></li>\n</ul>\n</li>\n<li>shl/shr (逻辑左移 / 右移)\n<ul>\n<li>shl <reg>, <con8></con8></reg></li>\n<li>shl <mem>, <con8></con8></mem></li>\n<li>shr <reg>, <reg8></reg8></reg></li>\n<li>shr <mem>, <reg8></reg8></mem></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>控制流\n<ul>\n<li>jmp\n<ul>\n<li>jmp <label></label></li>\n</ul>\n</li>\n<li>jcondition\n<ul>\n<li>je <label></label></li>\n<li>jz <label></label></li>\n<li>jne <label></label></li>\n<li>jg <label></label></li>\n<li>jge <label></label></li>\n<li>jl <label></label></li>\n<li>jle <label></label></li>\n</ul>\n</li>\n<li>cmp/test (cmp 相当于相减，test 相当于按位与，不保存操作结果仅设置条件码用于跳转指令)\n<ul>\n<li>cmp/test <reg>, <reg></reg></reg></li>\n<li>cmp/test <reg>, <mem></mem></reg></li>\n<li>cmp/test <mem>, <reg></reg></mem></li>\n<li>cmp/test <reg>, <con></con></reg></li>\n</ul>\n</li>\n<li>call/ret (call 将返回地址入栈然后跳转，ret 弹出返回地址并跳转)\n<ul>\n<li>call <label></label></li>\n<li>ret</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"选择语句的机器级表示\"><a class=\"markdownIt-Anchor\" href=\"#选择语句的机器级表示\">#</a> 选择语句的机器级表示</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(test_exp)</span><br><span class=\"line\">    then_stmt</span><br><span class=\"line\">else</span><br><span class=\"line\">    else_stmt</span><br></pre></td></tr></table></figure>\n<p>翻译成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(!t)</span><br><span class=\"line\">    goto false;</span><br><span class=\"line\">then_stmt;   </span><br><span class=\"line\">goto done;</span><br><span class=\"line\">false:  else_stmt;</span><br><span class=\"line\">done:</span><br></pre></td></tr></table></figure>\n<h3 id=\"循环语句的机器级表示\"><a class=\"markdownIt-Anchor\" href=\"#循环语句的机器级表示\">#</a> 循环语句的机器级表示</h3>\n<ol>\n<li>do-while</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do</span><br><span class=\"line\">  body_stmt</span><br><span class=\"line\">  while(test_exp);</span><br></pre></td></tr></table></figure>\n<p>翻译成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loop:   body_stmt;</span><br><span class=\"line\">  t = test_exp;</span><br><span class=\"line\">  if(t)</span><br><span class=\"line\">    goto loop;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>while</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(test_exp)</span><br><span class=\"line\">  body_stmt;</span><br></pre></td></tr></table></figure>\n<p>翻译成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t = test_exp;</span><br><span class=\"line\">if(!t)</span><br><span class=\"line\">  goto done;</span><br><span class=\"line\">loop:</span><br><span class=\"line\">  body_stmt;</span><br><span class=\"line\">  t = test_exp;</span><br><span class=\"line\">  if(t)</span><br><span class=\"line\">    goto loop;</span><br><span class=\"line\">done:</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>for</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(init_exp; test_exp; update_exp)</span><br><span class=\"line\">  body_stmt;</span><br></pre></td></tr></table></figure>\n<p>翻译成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init_exp;</span><br><span class=\"line\">t = test_exp;</span><br><span class=\"line\">if(!t)</span><br><span class=\"line\">  goto done;</span><br><span class=\"line\">loop:</span><br><span class=\"line\">  body_stmt;</span><br><span class=\"line\">  update_exp;</span><br><span class=\"line\">  t = test_exp;</span><br><span class=\"line\">  if(t)</span><br><span class=\"line\">    goto loop;</span><br><span class=\"line\">done:</span><br></pre></td></tr></table></figure>\n<h3 id=\"过程调用的机器级表示\"><a class=\"markdownIt-Anchor\" href=\"#过程调用的机器级表示\">#</a> 过程调用的机器级表示</h3>\n<ol>\n<li>caller 将实参放到 callee 能访问的地方（寄存器放不下放栈里）</li>\n<li>caller 保存返回地址（通过 call 指令实现）</li>\n<li>callee 保存 caller 通用寄存器的内容，并为自己的非静态局部变量分配空间</li>\n<li>执行 callee</li>\n<li>恢复 caller 的寄存器内容，将返回值放到 caller 能访问的地方（寄存器、栈），释放局部变量</li>\n<li>callee 取出返回地址，恢复 PC（ret 实现）</li>\n</ol>\n<blockquote>\n<p>EAX, ECX, EDX 是 caller saved register<br>\n 通常用于传递参数、存储临时变量或返回值，所以 call 的时候内容可能会变，要先保存再调用。比如返回值一般保存在 EAX<br>\nEBX, ESI, EDI 是 callee saved register<br>\n 这些寄存器的值在函数调用后应保持不变，所以由 callee 保存，ret 的时候要恢复</p>\n</blockquote>\n<p>每个过程有自己的栈帧， <code>EBP</code>  保存栈帧的基址， <code>ESP</code>  指向栈顶位置， <code>EBP</code>  的值不变，当前栈帧的范围在 <code>EBP</code>  和 <code>ESP</code>  之间（详见编译原理 <code>activated record</code> ）<br>\n<img data-src=\"f8.jpg\" alt><br>\n前三行的意思是新开一个栈帧，分配了 24 字节的栈帧空间。 <code>push epb</code>  实际上就是把 static link 压栈。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub3Jlc3BvbnNlNTI1LmdpdGh1Yi5pby8yMDI1LzA2LzE1L2NvbXB1dGVyLXNjaWVuY2UvY29tcGlsZS1wcmluY2lwbGVzL2NoNi8jJUU1JTg3JUJEJUU2JTk1JUIwJUU4JUIwJTgzJUU3JTk0JUE4JUU2JUI1JTgxJUU3JUE4JThC\">详见编译原理笔记</span><br>\n执行 <code>call</code>  之后， <code>call</code>  会先将返回地址压栈，然后跳转到 <code>add</code>  的起始地址，为 <code>add</code>  创建栈帧。 <code>add</code>  的返回值存放在 <code>EAX</code>  中。<br>\n执行 <code>ret</code>  之前需要释放当前栈帧，恢复 caller 的栈帧。因此 <code>leave</code>  相当于 <code>mov esp, ebp</code>   <code>pop ebp</code></p>\n<h2 id=\"cisc和risc的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#cisc和risc的基本概念\">#</a> CISC 和 RISC 的基本概念</h2>\n<p>复杂指令系统计算机 (CISC)：比如 x86<br>\n 精简指令系统计算机 (RISC)：ARM, MIPS…</p>\n<h3 id=\"cisc\"><a class=\"markdownIt-Anchor\" href=\"#cisc\">#</a> CISC</h3>\n<ul>\n<li>指令系统复杂庞大，指令数目多</li>\n<li>指令长度不固定，格式多，寻址方式多</li>\n<li>可以访存的指令不受限制（比如 x86 的 add 可以直接把 reg 和 mem 相加，但是 riscv 的只能 reg 和 reg 或者 reg 和 imm）</li>\n<li>各种指令使用频度相差很大</li>\n<li>各种指令执行时间相差很大，大多指令需要多个时钟周期</li>\n<li>控制器大多采用微程序控制，无法采用硬连线控制</li>\n<li>难以用优化编译生成高效的目标代码程序</li>\n</ul>\n<h3 id=\"risc\"><a class=\"markdownIt-Anchor\" href=\"#risc\">#</a> RISC</h3>\n<ul>\n<li>选取使用频率最高的一些简单指令，复杂指令的功能由简单指令的组合来实现</li>\n<li>指令长度固定，指令格式种类少，寻址方式种类少</li>\n<li>只有 LOAD/STORE 访存，其余指令的操作只能访问寄存器 /imm</li>\n<li>CPU 中通用寄存器数量相当多</li>\n<li>采用流水线技术，大部分指令在一个时钟周期内完成</li>\n<li>硬布线控制为主，不用或少用微程序控制</li>\n<li>重视编译优化<br>\n CISC 兼容性好，大多 RISC 不能和老机器兼容，但具有更强的实用性。CISC 可以提供更多的功能</li>\n</ul>\n<h3 id=\"cisc和risc的比较\"><a class=\"markdownIt-Anchor\" href=\"#cisc和risc的比较\">#</a> CISC 和 RISC 的比较</h3>\n<p>和 CISC 相比，RISC 的优点：</p>\n<ul>\n<li>RISC 更能充分利用 VLSI（超大规模集成电路）芯片的面积（减少了控制逻辑）</li>\n<li>RISC 更能提高运算速度</li>\n<li>RISC 便于设计，可以降低成本，提高可靠性</li>\n<li>有利于编译优化<br>\n<img data-src=\"f9.jpg\" alt></li>\n</ul>\n",
            "tags": [
                "指令系统"
            ]
        },
        {
            "id": "http://example.com/2025/07/01/computer-science/computer-organization/ch3/",
            "url": "http://example.com/2025/07/01/computer-science/computer-organization/ch3/",
            "title": "Ch3",
            "date_published": "2025-06-30T16:00:00.000Z",
            "content_html": "<h1 id=\"ch3-存储系统\"><a class=\"markdownIt-Anchor\" href=\"#ch3-存储系统\">#</a> Ch3 存储系统</h1>\n<h2 id=\"存储器概述\"><a class=\"markdownIt-Anchor\" href=\"#存储器概述\">#</a> 存储器概述</h2>\n<h3 id=\"存储器的分类\"><a class=\"markdownIt-Anchor\" href=\"#存储器的分类\">#</a> 存储器的分类</h3>\n<ol>\n<li>按层次分</li>\n</ol>\n<ul>\n<li>主存（小、快、成本高）</li>\n<li>辅存（大、慢、成本低）</li>\n<li>Cache</li>\n</ul>\n<ol start=\"2\">\n<li>按存储介质分</li>\n</ol>\n<ul>\n<li>磁表面存储器（磁盘、磁带）</li>\n<li>磁芯存储器</li>\n<li>半导体存储器（MOS 型、双极型）</li>\n<li>光存储器（光盘）</li>\n</ul>\n<ol start=\"3\">\n<li>按存储方式分</li>\n</ol>\n<ul>\n<li>RAM （随机存储器）: 随机读取存储单元，存取时间与存储单元的物理位置无关。读写方便，主要用作主存和 cache，分静态 RAM 和动态 RAM。</li>\n<li>ROM （只读存储器）：只能读不能写，非易失性，随机读取。广义的 ROM 也可以通过电擦除进行写入 (EEPROM)</li>\n<li>SAM （顺序存储器）：按顺序存储，存取时间与存储单元的物理位置有关</li>\n<li>DAM （直接存储器）：先选取信息所在区域，然后顺序存取。结合了 RAM 和 SAM 的特性（磁盘）</li>\n<li>Associated memory: 不根据地址而是根据存储内容来进行存取的存储器，可以实现快速地查找快表。既可以按照<mark>地址</mark>寻址也可以按照<mark>内容</mark>寻址（通常是某些字段）</li>\n<li>串行访问存储器：SAM 和 DAM 都是，所以读写时间和物理位置有关</li>\n</ul>\n<ol start=\"4\">\n<li>按信息的可保存性分类</li>\n</ol>\n<ul>\n<li>易失性存储器：断电后丢失数据，如 RAM</li>\n<li>非易失性存储器：断电后数据还在，如 ROM，磁盘光盘</li>\n<li>破坏性读出：读出数据后数据被破坏</li>\n<li>非破坏性读出：读出数据后数据不改变</li>\n</ul>\n<h3 id=\"存储器的性能指标\"><a class=\"markdownIt-Anchor\" href=\"#存储器的性能指标\">#</a> 存储器的性能指标</h3>\n<p>三个主要性能指标：存储容量、单位成本、存储速度</p>\n<ol>\n<li>容量 = 存储字数 * 字长</li>\n<li>单位成本 = 总成本 / 总容量</li>\n<li>存储速度：<br>\n存取时间<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>a</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>: 启动一次存储器操作到完成该操作所经历的时间，分为读出时间和写入事件<br>\n存取周期<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>: 进行连续读 / 写操作所允许的最短时间间隔<br>\n主存带宽<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>B</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">B_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>: b/s, B/s, word/s</li>\n</ol>\n<blockquote>\n<p>存取时间仅为完成一次操作的时间，而存取周期不仅包含操作时间，还包括操作后线路的恢复时间</p>\n</blockquote>\n<h3 id=\"多级层次的存储系统\"><a class=\"markdownIt-Anchor\" href=\"#多级层次的存储系统\">#</a> 多级层次的存储系统</h3>\n<p><img data-src=\"f1.jpg\" alt><br>\n从上到下价格越来越低，速度越来越慢，容量越来越大，CPU 访问频度越来越低<br>\n<img data-src=\"f2.jpg\" alt><br>\n存储时间与存储周期的关系</p>\n<ul>\n<li>透明（transparent）指的是某种机制或技术的存在对使用者来说是不可见或无感知的<br>\n主存 - Cache 之间的数据调用由硬件自动完成，对所有程序员均是透明的<br>\n主存 - 辅存的数据调用由硬件和操作系统共同完成，对应用程序员是透明的</li>\n</ul>\n<h2 id=\"主存储器\"><a class=\"markdownIt-Anchor\" href=\"#主存储器\">#</a> 主存储器</h2>\n<p>存储元件：MOS 管</p>\n<h3 id=\"sram-dram\"><a class=\"markdownIt-Anchor\" href=\"#sram-dram\">#</a> SRAM &amp; DRAM</h3>\n<p>RAM: SRAM 静态随机存储器和 DRAM 动态随机存储器<br>\n<mark>主存主要是 DRAM，Cache 主要是 SRAM</mark>，都易失</p>\n<p>DRAM 芯片：使用栅极电容存储信息，只要一个晶体管，读写<mark>更慢</mark>，是<mark>破坏性读出</mark>，需要重写，<mark>成本低，集成度高，功耗低</mark></p>\n<p>SRAM 芯片：使用双稳态触发器存储信息（六晶体管 MOS，RS, JK, D）。读写<mark>更快</mark>，是非破坏性读出，<mark>成本高，集成度低，功耗大</mark><br>\n<img data-src=\"f4.jpg\" alt><br>\n栅极电容需要一直刷新给电容充电，触发器不需要刷新，只要不断电状态不会改变</p>\n<h4 id=\"dram的刷新\"><a class=\"markdownIt-Anchor\" href=\"#dram的刷新\">#</a> DRAM 的刷新</h4>\n<ol>\n<li>多久需要刷新一次？ 刷新周期：一般为 2ms</li>\n<li>每次刷新多少存储单元？以行为单位，每次刷新一行存储单元<br>\n —— 为什么要用行列地址？减少选通线的数量</li>\n<li>在什么时刻刷新？<br>\n有硬件支持，读出一行的信息后重新写入，占用 1 个读 / 写周期<br>\n假设 DRAM 内部结构排列成 128×128 的形式，读 / 写周期 0.5us<br>\n2ms 共 2ms/0.5us = 4000 个周期<br>\n三种刷新方式：<br>\n<img data-src=\"f5.jpg\" alt><br>\n刷新以行为单位，再生（重写）只需要恢复被读出来的存储单元<br>\n刷新由存储器独立完成，不需要 CPU 控制</li>\n</ol>\n<h5 id=\"dram的地址引脚复用技术\"><a class=\"markdownIt-Anchor\" href=\"#dram的地址引脚复用技术\">#</a> DRAM 的地址引脚复用技术</h5>\n<p><img data-src=\"f6.jpg\" alt><br>\n行列地址分成两次送，节省了一半的地址线<br>\n行列数优化原则：尽量使行、列数相同，且行数较少（因为按行刷新）<br>\n目前常用 SDRAM（同步 DRAM），数据交换同步于 CPU 的时钟信号，使得 CPU 不需要等待</p>\n<h3 id=\"rom\"><a class=\"markdownIt-Anchor\" href=\"#rom\">#</a> ROM</h3>\n<p>结构简单、非易失性<br>\n类型：</p>\n<ol>\n<li>MROM 掩模式 ROM<br>\n 在芯片生产过程中写入，无法改变，可靠性高，急程度高，价格便宜，灵活性差</li>\n<li>PROM 一次可编程 ROM<br>\n 可以用专门的设备写入一次，一旦写入无法改变</li>\n<li>EPROM 可擦除可编程 ROM<br>\n 可以写入并多次改写，但是编程次数有限且时间长</li>\n<li>Flash<br>\n 兼有 RAM 和 ROM 的优点，可以不加电长期保存信息，又能在线快速擦除和重写，价格便宜，急程度高，电可擦除重写且速度快<br>\n SSD 固态硬盘基于 Flash，由控制单元和 Flash 组成，长期保存、快速擦除和重写，对比传统硬盘读写速度快。低功耗。但是价格高</li>\n</ol>\n<h3 id=\"主存储器的基本组成\"><a class=\"markdownIt-Anchor\" href=\"#主存储器的基本组成\">#</a> 主存储器的基本组成</h3>\n<p>核心部件：一个个存储 0 或 1 的存储单元构成的存储矩阵<br>\n访问主存时，CPU 把地址送到 MAR，MAR 通过地址总线把地址送到主存中的地址寄存器，地址译码器进行译码，选中相应的内存单元，然后通过控制电路决定读 / 写操作：</p>\n<ul>\n<li>读操作：将选中的内存单元的内容通过数据总线送到 MDR 中</li>\n<li>写操作：将 MDR 中的内容通过数据总线送到选中的内存单元中<br>\n MDR 的位数和数据总线位数相同，通常等于存储字长；MAR 的位数和地址总线位数相同</li>\n</ul>\n<h3 id=\"多模块存储器\"><a class=\"markdownIt-Anchor\" href=\"#多模块存储器\">#</a> 多模块存储器</h3>\n<p>DRAM 芯片的恢复时间比较长，有可能是存取时间的几倍（SRAM 的恢复时间较短）。CPU 的读写速度比主存快很多，主存恢复时间太长<br>\n —— 利用多个完全相同的存储模块并行工作来提高吞吐率：单体多字存储器，多体低位交叉存储器</p>\n<ul>\n<li>双端口 RAM（408 不考，了解即可）<br>\n<img data-src=\"f7.jpg\" alt></li>\n</ul>\n<ol>\n<li>\n<p>单体多字存储器<br>\n一般一个存储单元只存储一个 word，但是单体多字存储器一个存储单元存储多个 word，然后读的时候一次性读取这多个字。好处是快，缺点是只有指令和数据连续存放时才能提高存取速度，否则造成不必要的读取。</p>\n</li>\n<li>\n<p><mark>多体并行存储器（重点）</mark><br>\n分为高位交叉编址和低位交叉编址两种<br>\n<img data-src=\"f8.jpg\" alt><br>\n高位交叉编址每一块存储体的高位是一样的，实际上还是顺序存储。因此访问连续内存实际上访问的还是同一块存储体，并不能通过并行加快访问速度<br>\n低位交叉编址的每一块存储体低位相同，因此可以在恢复时间并行存取下一块内存的数据<br>\n存取周期为 <code>T</code> , 存取时间为 <code>r</code> , T = r + 恢复时间<br>\n对于 n 个存储器并行访问的存储器：<br>\n采用高位交叉编址的时间为 <code>n*T</code> <br>\n 低位交叉编址为 <code>T + (n-1)*r</code></p>\n</li>\n</ol>\n<p><img data-src=\"f9.png\" alt></p>\n<ul>\n<li>轮流启动：每个 bank 的存储位数等于数据总线的位数，此时采用轮流启动\n<ul>\n<li>对于低位交叉编址，要保证 <code>m&gt;=T/r</code> ，以保证流水线不间断</li>\n<li>理想情况下，m 个 bank 的交叉存储器每隔 <code>T/m</code>  个周期可以读 / 写一个数据，若相邻 m 次访问的当存地址出现在同一个模块内，则会发生访存冲突，此时需要延迟发生冲突的访问请求。</li>\n</ul>\n</li>\n<li>同时启动：如果 m 个 bank 的总位数加起来刚好等于数据总线的位数，则 m 个同时存 / 取</li>\n</ul>\n<h2 id=\"主存储器与cpu的连接\"><a class=\"markdownIt-Anchor\" href=\"#主存储器与cpu的连接\">#</a> 主存储器与 CPU 的连接</h2>\n<h3 id=\"连接原理\"><a class=\"markdownIt-Anchor\" href=\"#连接原理\">#</a> 连接原理</h3>\n<p>通过总线连接（控制、地址、数据）<br>\n传输速率 = 总线宽度 / 传输时间<br>\n地址总线的位数决定了可寻址的最大内存空间<br>\n控制总线指出总线周期的类型和本次输入输出完成的时刻<br>\n将多个芯片集成在内存条上，由多个内存条和主板上的 ROM 芯片组成计算机所需的主存空间，通过总线与 CPU 连接</p>\n<h3 id=\"主存容量的扩展\"><a class=\"markdownIt-Anchor\" href=\"#主存容量的扩展\">#</a> 主存容量的扩展</h3>\n<p>数据总线宽度 &gt; 存储字长 —— 位扩展<br>\n地址总线宽度 &gt; 存储字数量所需的宽度<br>\n<img data-src=\"f10.jpg\" alt></p>\n<ol>\n<li>\n<p>位扩展法：增加存储字长<br>\n由于数据总线宽度大于存储字长，存在浪费情况，必须进行位扩展使数据位数与数据总线位数相等<br>\n如图：<br>\n<img data-src=\"f11.jpg\" alt></p>\n</li>\n<li>\n<p>字扩展法<br>\n地址总线存在浪费情况，对存储字的数量进行扩展<br>\n用多出来的地址线提供 CS 片选信号，决定输出的是哪个芯片的数据</p>\n</li>\n</ol>\n<ul>\n<li>线选法：n 条多余的地址线，对应 n 个选片信号，地址空间不连续造成地址空间浪费（只能有一个 1 有效），电路简单<br>\n<img data-src=\"f13.jpg\" alt></li>\n<li>译码器选法：n 条多余的线对应<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> 个选片信号，地址空间可以连续<br>\n<img data-src=\"f12.jpg\" alt></li>\n</ul>\n<ol start=\"3\">\n<li>字、位同时扩展<br>\n既增加存储字的数量，又增加存储字长<br>\n<img data-src=\"f14.jpg\" alt></li>\n</ol>\n<h3 id=\"存储芯片的地址分配和片选\"><a class=\"markdownIt-Anchor\" href=\"#存储芯片的地址分配和片选\">#</a> 存储芯片的地址分配和片选</h3>\n<p>见上方线选法译码器选法</p>\n<h3 id=\"存储器与cpu的连接\"><a class=\"markdownIt-Anchor\" href=\"#存储器与cpu的连接\">#</a> 存储器与 CPU 的连接</h3>\n<p>…<br>\n 片选信号还与 CPU 的方寸控制信号<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mrow><mi>M</mi><mi>R</mi><mi>E</mi><mi>Q</mi></mrow><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{MREQ}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">Q</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span></span></span> 有关（低电平有效），若 CPU 访问 IO 则此信号为高电平<br>\n MAR 位数要看主存地址空间大小，而不能看实际上用了多少位</p>\n<h2 id=\"外部存储器\"><a class=\"markdownIt-Anchor\" href=\"#外部存储器\">#</a> 外部存储器</h2>\n<p>磁盘存储器是以磁盘为存储介质的存储器，优点：容量大，价格低；记录介质可重复使用；可以长期保存；非破坏性读出。缺点：存取速度慢；机械结构复杂；对工作环境要求高</p>\n<h3 id=\"磁盘存储器\"><a class=\"markdownIt-Anchor\" href=\"#磁盘存储器\">#</a> 磁盘存储器</h3>\n<ol>\n<li>磁盘存储器</li>\n</ol>\n<ul>\n<li>\n<p>组成：磁盘驱动器，磁盘控制器，盘片<br>\n<img data-src=\"f15.jpg\" alt></p>\n</li>\n<li>\n<p>存储区域：<mark>扇区（也称块）是磁盘读写的最小单位</mark>，按块存取</p>\n<ul>\n<li>磁头数 (Heads)：一个记录面对应一个磁头</li>\n<li>柱面数 (Cylinders)：表示每面盘片上的磁道数，不同记录面的相同位置的磁道构成一个柱面</li>\n<li>扇区数 (Sectors)：每条磁道上有多少扇区</li>\n</ul>\n</li>\n<li>\n<p>Disk Cache</p>\n<ul>\n<li>在内存上的一片区域，用来缓冲被送到磁盘上的数据。优点：写磁盘时按簇进行，可以避免频繁地用小块数据写；中间结果数据写回之前可以被快速再次使用</li>\n</ul>\n</li>\n<li>\n<p>磁记录原理</p>\n<ul>\n<li>原理：当磁头和磁性记录介质有相对运动时，通过电磁转换完成读 / 写操作。</li>\n<li>编码方法：按某种方案（规律），把一连串的二进制信息变换成存储介质磁层中一个磁化翻转状态的序列，并使读 / 写控制电路容易、可靠地实现转换。</li>\n<li>磁记录方式：通常采用调频制（FM）和改进型调频制（MFM）的记录方式。</li>\n</ul>\n</li>\n<li>\n<p>性能指标</p>\n<ul>\n<li>\n<p>磁盘的容量：一个磁盘所能存储的字节总数称为磁盘容量。磁盘容量有非格式化容量和格式化容量之分。<br>\n非格式化容量是指磁记录表面可以利用的磁化单元总数，非格式化容量 = 记录面数 * 柱面数 * 每条磁道的磁化单元数<br>\n格式化容量是指按照某种特定的记录格式所能存储信息的总量，格式化容量 = 记录面数 * 柱面数 * 每道扇区数 * 每个扇区的容量<br>\n<mark>格式化容量 &lt; 非格式化容量</mark></p>\n</li>\n<li>\n<p>记录密度：记录密度是指盘片单位面积上记录的二进制的信息量，通常以 <code>道密度</code> 、 <code>位密度</code> 和 <code>面密度</code> 表示。道密度是<mark>沿磁盘半径方向单位长度上的磁道数</mark>；位密度是<mark>磁道单位长度上能记录的二进制代码位数</mark>；面密度是位密度和道密度的乘积。<br>\n<mark>磁盘所有磁道记录的信息量一定是相等的，并不是圆越大信息越多，故每个磁道的位密度都不同，越靠近圆心位密度越大</mark></p>\n</li>\n<li>\n<p>平均存取时间：<br>\n<mark>平均存取时间 = 寻道时间（磁头移动到目的磁道）+ 旋转延迟时间（磁头定位到所在扇区）+ 传输时间（传输数据所花费的时间）</mark><br>\n<mark>寻道时间通常取从最外道到最内道时间的一半，旋转延迟时间通常取旋转半周的时间</mark></p>\n</li>\n<li>\n<p>数据传输率：磁盘存储器在单位时间内向主机传送数据的字节数，称为数据传输率<br>\n假设磁盘转速为 r（转 / 秒），每条磁道容量为 N 个字节，则数据传输率为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>D</mi><mi>r</mi></msub><mo>=</mo><mi>r</mi><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">D_r=rN</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span></p>\n</li>\n</ul>\n</li>\n<li>\n<p>磁盘地址<br>\n<img data-src=\"f16.jpg\" alt></p>\n</li>\n<li>\n<p>磁盘的工作原理<br>\n硬盘的主要操作是寻址、读盘、写盘。每个操作都对应一个控制字，硬盘工作时，第一步是取控制字，第二步是执行控制字。<br>\n硬盘属于机械式部件，其读写操作是串行的，不可能在同一时刻既读又写，也不可能在同一时刻读两组数据或写两组数据。</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>RAID<br>\n 将多个独立的物理磁盘组成一个独立的逻辑磁盘，数据分割交叉存储，并行访问。</li>\n</ol>\n<ul>\n<li>RAID0：无冗余和无校验的磁盘阵列。</li>\n<li>RAID1：镜像磁盘阵列。每份数据存两遍，成本太高</li>\n<li>RAID2：采用纠错的海明码的磁盘阵列。<br>\n逻辑上连续的几个 bit 物理上分散存储在各个盘中 4bit 信息位 + 3bit 海明校验位 —— 可纠正 1bit 错误<br>\n每个码字有  <code>m</code>  个信息位和  <code>r</code>  个冗余位，$ (m+r+1)≤2^r$<br>\n 参考 xyx 学长的计网笔记：<br>\n<img data-src=\"f17.jpg\" alt></li>\n<li>RAID3：位交叉奇偶校验的磁盘阵列。前三个盘的奇偶校验位写在第四个盘上</li>\n<li>RAID4：块交叉奇偶校验的磁盘阵列。</li>\n<li>RAID5：无独立校验的奇偶校验磁盘阵列。在所有磁盘之间分条，并且每个数据块的奇偶校验块 § 写入到同一条带上<br>\n RAID1-RAID5 数据不会损坏</li>\n</ul>\n<h3 id=\"固态硬盘ssd\"><a class=\"markdownIt-Anchor\" href=\"#固态硬盘ssd\">#</a> 固态硬盘 (SSD)</h3>\n<ol>\n<li>特性<br>\n属于 Flash memory, EEPROM<br>\n 组成：闪存翻译层，存储介质<br>\n<img data-src=\"f18.jpg\" alt><br>\n<mark>数据以页为单位读写，以块为单位擦除</mark>只有整个块被擦除之后才能写这一页，若视图修改包含已有数据的页<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>P</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">P_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，则这个快中所有含有有用数据的页必须被复制到新的空白的块中，才能对<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>P</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">P_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 进行写操作<br>\n SSD 的优点：<mark>随机写很慢，随机读比机械磁盘块</mark>，没噪声，能耗低，抗震性好，安全性高</li>\n<li>Wear Leveling 磨损均衡<br>\n重复擦写块就会磨损坏，一般是几百次到几千次<br>\n (1) 动态磨损均衡：<mark>写入时</mark>优先选择擦除次数少的新闪存块，只在写入时触发，仅考虑可用空间（对于冷数据不包括在空间池中，减少了可以用的 block 数量）<br>\n(2) 静态磨损均衡：就算没有写入，SSD 也会监测并自动进行数据分配，让老的闪存快以读为主，让新的块腾出空间，以写为主：将数据从写入 / 擦除次数较低的 block 移动到其他 block 中，这样可以将低擦写次数的 block 释放出来，添加到可用可用空间池中，以便后续使用。仅覆盖单个闪存芯片单元</li>\n</ol>\n<h2 id=\"cache\"><a class=\"markdownIt-Anchor\" href=\"#cache\">#</a> Cache</h2>\n<p>解决 CPU 和主存速度不一致问题，由 SRAM 组成，通常集成在 CPU 中</p>\n<h3 id=\"程序访问的局部性原理\"><a class=\"markdownIt-Anchor\" href=\"#程序访问的局部性原理\">#</a> 程序访问的局部性原理</h3>\n<ul>\n<li>时间局部性：比如循环、数组（每次循环访问一次数组能体现时间局部性）</li>\n<li>空间局部性：最近的未来用到的信息很可能和正在使用的信息在存储空间上是临近的（顺序访问数组能体现空间局部性）<br>\nCache 利用局部性原理，将最近或频繁访问的数据复制到更快但容量较小的存储中，以便提高访问速度和系统性能。</li>\n</ul>\n<div class=\"note primary\">\n<p><strong>hit/miss 计算</strong><br>\n设<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>t</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为访问一次 Cache 所需时间，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>t</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为访问一次内存所需时间，则 Cache 和主存同时被访问总时间为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>=</mo><mi>H</mi><msub><mi>t</mi><mi>c</mi></msub><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>H</mi><mo stretchy=\"false\">)</mo><msub><mi>t</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">t = Ht_c + (1 - H)t_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><br>\n 若先访问 Cache 再访问主存则时间为：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>=</mo><msub><mi>t</mi><mi>c</mi></msub><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>H</mi><mo stretchy=\"false\">)</mo><msub><mi>t</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">t = t_c + (1 - H)t_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n</div>\n<h3 id=\"cache工作原理\"><a class=\"markdownIt-Anchor\" href=\"#cache工作原理\">#</a> Cache 工作原理</h3>\n<p>主存和 Cache 之间以 == 块 (Block)== 为单位进行数据交换</p>\n<h3 id=\"映射方式\"><a class=\"markdownIt-Anchor\" href=\"#映射方式\">#</a> 映射方式</h3>\n<ol>\n<li>直接映射 Directed mapped<br>\n<img data-src=\"f20.jpg\" alt><br>\n<img data-src=\"f27.jpg\" alt><br>\ncache 行号 = 主存块号 mod cache 行数<br>\n物理地址结构：<br>\n| tag | index（行号） | byte offset |<br>\n<img data-src=\"f19.jpg\" alt></li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mtext>的位数</mtext><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>c</mi><mi>a</mi><mi>c</mi><mi>h</mi><mi>e</mi><mtext>的</mtext><mi>b</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi><mtext>数</mtext><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">index的位数 = log_2(cache的block数) \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">位</span><span class=\"mord cjk_fallback\">数</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord cjk_fallback\">数</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>b</mi><mi>y</mi><mi>t</mi><mi>e</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi><mtext>的位数</mtext><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>c</mi><mi>a</mi><mi>c</mi><mi>h</mi><mi>e</mi><mtext>的</mtext><mi>b</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi><mtext>的字节数</mtext><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">byte\\ offset的位数 = log_2(cache的block的字节数) \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">位</span><span class=\"mord cjk_fallback\">数</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">节</span><span class=\"mord cjk_fallback\">数</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>t</mi><mi>a</mi><mi>g</mi><mtext>的位数</mtext><mo>=</mo><mn>32</mn><mo>−</mo><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mtext>的位数</mtext><mo>−</mo><mi>b</mi><mi>y</mi><mi>t</mi><mi>e</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi><mtext>的位数</mtext></mrow><annotation encoding=\"application/x-tex\">tag的位数 = 32 - index的位数 - byte\\ offset的位数 \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">位</span><span class=\"mord cjk_fallback\">数</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">位</span><span class=\"mord cjk_fallback\">数</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">位</span><span class=\"mord cjk_fallback\">数</span></span></span></span></span></p>\n<p>在 32 位系统中，一个 word 是 4B；64 位系统中，一个 word 是 8B<br>\nCache 的一行构成：<br>\n| valid bit | dirty bit | tag | data |</p>\n<details class=\"primary\"><summary>example</summary><div>\n<p><img data-src=\"f21.jpg\" alt><br>\n<img data-src=\"f22.jpg\" alt><br>\n<img data-src=\"f23.jpg\" alt><br>\n<img data-src=\"f24.jpg\" alt><br>\n<img data-src=\"f25.jpg\" alt><br>\n<img data-src=\"f26.jpg\" alt></p>\n</div></details>\n<ol start=\"2\">\n<li>\n<p>全相连 Full Associative<br>\nblock can go anywhere in cache<br>\n 主存地址：<br>\n| tag | byte offset |<br>\n 好处是能降低冲突率，每次需要和所有 block 比较是否 hit 开销大，不适合大容量 Cache</p>\n</li>\n<li>\n<p>组相连 Set Associative<br>\n<img data-src=\"f28.jpg\" alt><br>\n 物理地址构成：<br>\n| tag | set index | 块内偏移 |<br>\nset index 的位数表示有多少组，</p>\n</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>s</mi><mi>e</mi><mi>t</mi><mi>N</mi><mi>u</mi><mi>m</mi><mo>=</mo><mfrac><mrow><mi>C</mi><mi>a</mi><mi>c</mi><mi>h</mi><mi>e</mi><mtext>大小</mtext></mrow><mrow><mi>b</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo>∗</mo><mtext>路数</mtext></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">setNum =  \\frac{Cache大小}{blockSize * 路数} \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.05744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord cjk_fallback\">路</span><span class=\"mord cjk_fallback\">数</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">大</span><span class=\"mord cjk_fallback\">小</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<details class=\"primary\"><summary></summary><div>\n<p>一个四路相联 cache，CPU 字长为 4 字节，内存和 cache 都是以字节编址，cache 和内存交换单位为块，每个块大小为 512 字节，cache 能够容纳 1024 个块。如果物理内存为 32 位地址:<br>\nset 数 = 1024/4 = 256<br>\nindex 位数 = log2 (256) = 8<br>\nblockOffset 位数 = log2 (512) = 9<br>\ntag 位数 = 32 - 8 - 9 = 17</p>\n<ul>\n<li>物理地址构成：| tag 17 位 | set index 8 位 | block offset 9 位 |</li>\n<li>计算内存地址 FAB12389（16 进制）在 cache 中可能的位置块号:<br>\n1111 1010 1011 0001 0010 0011 1000 1001<br>\nset index 是 10010001 也就是 145，所以可能的 block 号是 145*4 = 580, 581, 582, 583</li>\n</ul>\n</div></details>\n<p><img data-src=\"f29.jpg\" alt><br>\n<mark>n 路组相连需要 n 个比较器，位数 = tag 位数</mark></p>\n<h3 id=\"替换算法\"><a class=\"markdownIt-Anchor\" href=\"#替换算法\">#</a> 替换算法</h3>\n<ol>\n<li>\n<p>Random Replacement<br>\n 随机找一块替换，实现简单，命中率低</p>\n</li>\n<li>\n<p>FIFO<br>\n 选择最早进入的 Cache 行的进行替换</p>\n</li>\n<li>\n<p>LRU<br>\n 选择近期用得最少的 Cache 行进行替换，对每个 Cache 行维护一个计数器表示访问的次数，每次替换掉数值最小的。<br>\n2-way Cache 要用 1 bit 来记录，4-way Cache 要用 2 bit 来记录</p>\n</li>\n</ol>\n<details class=\"primary\"><summary></summary><div>\n<p>4-way Cache，有五个块映射到 Cache 同一组，访问顺序是 {1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5}<br>\n<img data-src=\"f30.jpg\" alt></p>\n</div></details>\n<h3 id=\"cache一致性问题\"><a class=\"markdownIt-Anchor\" href=\"#cache一致性问题\">#</a> Cache 一致性问题</h3>\n<p>当 write hit 时：</p>\n<ol>\n<li>Write through 直写 / 全写法<br>\n Cache hit 的时候，CPU 不仅写入 Cache，而且写入主存<br>\n为了减少写入主存的时间小号，增加一个 write buffer，CPU 同时写入 Cache 和 write buffer，write buffer 采用 FIFO，当 write buffer 满时，将 write buffer 中的数据写入主存</li>\n<li>Write back 写回法<br>\n write hit 时，只把数据写入 Cache，只有此块被 replace 的时候才写入主存。减少了方寸次数，所以给 cache 行设置一个 dirty bit，CPU 写数据时将 dirty bit 置为 1 表示此块被修改过，repalce 时需要写入主存</li>\n</ol>\n<p>write miss 时：</p>\n<ol>\n<li>Write Allocate 写分配法<br>\n如果发生 write miss，会从内存中加载对应的数据块到 cache 中，然后进行写操作。和 write-back 搭配使用，把后续对该块的修改都缓存在 cache 中</li>\n<li>Not-Write-Allocate 非写分配法<br>\n只更新主存不把主存写入 Cache，适用于 write-through，因为即使写入 cache，也会马上写回内存，没必要占用 cache 空间。</li>\n</ol>\n<p><mark>write through 通常和 not-write-allocate 一起用，write back 通常和 write allocate 一起用</mark></p>\n<h4 id=\"使用分离的指令cache和数据cache\"><a class=\"markdownIt-Anchor\" href=\"#使用分离的指令cache和数据cache\">#</a> 使用分离的指令 Cache 和数据 Cache</h4>\n<details class=\"primary\"><summary></summary><div>\n<p><img data-src=\"f31.jpg\" alt><br>\n<img data-src=\"f32.jpg\" alt></p>\n</div></details>\n<h2 id=\"虚拟存储器\"><a class=\"markdownIt-Anchor\" href=\"#虚拟存储器\">#</a> 虚拟存储器</h2>\n<h3 id=\"基本概念\"><a class=\"markdownIt-Anchor\" href=\"#基本概念\">#</a> 基本概念</h3>\n<p>主存和辅存共同构成了虚拟存储器，对于应用程序员而言，虚拟存储器是透明的。（对 OS 开系统程序员不透明，他们必须管理 TLB）<br>\n虚拟存储器具有主存的速度和辅存的容量</p>\n<ul>\n<li>允许多个程序之间高效、安全地共享内存</li>\n<li>允许单个程序使用超过内存容量的内存</li>\n</ul>\n<details class=\"primary\"><summary></summary><div>\n<p>实地址 = 主存页号 + 页内字地址<br>\n虚地址 = 虚存页号 + 页内字地址<br>\n辅存地址 = 磁盘号 + 盘面号 + 磁道号 + 扇区号</p>\n</div></details>\n<p>虚拟存储器缺页访问辅存的代价很大，当程序访问某个 virtual page 时，如果该页当前不在主存中，就会发生 page fault，操作系统需要从辅存加载该页到主存，访问很慢所以访问代价大。因此采用 <code>full associative</code>  允许 virtual page 可以加载到主存的任何一个空闲物理页框中，提高命中率。<br>\n写操作中处理一致性问题时采用  <code>write back</code> 。主存中的页面状态维护一个 dirty 标志位。当操作系统需要将该页替换出主存时，会检查该页的脏页标志：如果 dirty，说明主存页面数据修改过，必须写回辅存；如果 dirty 为 0，说明主存数据和辅存一致，直接丢弃主存页面，无需写回</p>\n<h3 id=\"页式虚拟存储器\"><a class=\"markdownIt-Anchor\" href=\"#页式虚拟存储器\">#</a> 页式虚拟存储器</h3>\n<ul>\n<li>基本单位：页<br>\n主存和虚拟地址空间被划分为相同大小的页，主存中的成为物理页（实页、页框、frame），虚拟地址空间中的页称为虚拟页（虚页）<br>\n页表 (page table) 记录了程序的虚页调入贮存时被安排在主存中的位置<br>\n一般的 page 大小从 4KiB ~ 64KiB 不等</li>\n</ul>\n<ol>\n<li>页表 (page table)<br>\n 页表放在主存中。<br>\n<img data-src=\"f33.jpg\" alt><br>\n有效位（Valid Bit）：用于指示一个页面是否已经被加载到主存中。如果有效位被设置为 1，这意味着对应的页面已经在物理内存中，可以立即被访问。如果有效位为 0，则表示该页面当前不在内存中，可能需要从磁盘或其他存储设备中调入。当一个程序尝试访问一个页面时，操作系统会检查页表中的有效位，如果发现页面不在内存中，就会触发一个 page fault，然后将页面从磁盘加载到内存中。<br>\n引用位（Reference Bit）：引用位主要用于页面置换算法中，它记录了页面最近是否被访问过。每当一个页面被访问时，操作系统会将该页面的引用位置为 1。随着时间的推移，如果一个页面长时间没有被访问，它的引用位可能会被清零。当操作系统需要选择一个页面进行置换时，它可能会优先选择那些引用位为 0 的页面。</li>\n</ol>\n<p>转换过程：当一个程序尝试访问内存时，它会生成一个虚拟地址。虚拟地址包含两部分信息：页号（Page Number）和页内偏移（Offset）。用 VPN 作为索引查询 page table，检查 valid bit 是否为 1，从页表条目中获取 PPN，PPN 和 page offset 组合成物理地址。</p>\n<blockquote>\n<p>页式虚拟存储器的优点：页面长度固定，页表简单，调入方便<br>\n缺点：产生内碎片</p>\n</blockquote>\n<ol start=\"2\">\n<li>\n<p>地址转换<br>\n<img data-src=\"f34.png\" alt><br>\n每个进程都有一个页表基址寄存器，存放该进程的页表首地址。然后通过 VPN 作为索引在页表中查找对应的页表项。物理地址 = 物理页号 + 页内地址。</p>\n</li>\n<li>\n<p>TLB（快表）<br>\n为了减少访问主存的此书，TLB 相当于 page table 的 cache。<br>\nTLB 用 <code>SRAM</code>  实现，不在主存中，工作原理类似于 Cache，通常采用 full associative 或者 set associative。<br>\n<img data-src=\"f35.jpg\" alt><br>\n通过 VPN 查找 TLB 和 Cache 的查找一样，如果是全相连则直接比较 tag，如果是组相连则通过低位查找 set，然后用高位和 tag 比较。</p>\n</li>\n<li>\n<p>具有 TLB 和 Cache 的多级存储系统<br>\n<img data-src=\"f36.jpg\" alt><br>\n查找时，TLB 和 page table 可以同步进行，如果在 TLB 中找到了，page table 的查找就作废。</p>\n</li>\n</ol>\n<p><img data-src=\"f37.jpg\" alt></p>\n<h3 id=\"段式虚拟存储器\"><a class=\"markdownIt-Anchor\" href=\"#段式虚拟存储器\">#</a> 段式虚拟存储器</h3>\n<p><img data-src=\"f38.jpg\" alt><br>\n按程序的逻辑结构划分，段的长度因程序而异。虚拟地址分为段号和段内地址。虚地址和实地址的转换依靠段表。<br>\n段表每行记录某个段的<mark>段号、有效位、段长度、段起始地址</mark>。<br>\n段表本身也是段，一般驻留在主存中<br>\n<mark>分页对程序员是透明的，分段对程序员是不透明的</mark></p>\n<blockquote>\n<p>段式虚拟存储器的优点：具有逻辑独立性，易于编译、管理、修改和保护，便于多道程序的共享<br>\n缺点：产生外碎片</p>\n</blockquote>\n<h3 id=\"段页式虚拟存储器\"><a class=\"markdownIt-Anchor\" href=\"#段页式虚拟存储器\">#</a> 段页式虚拟存储器</h3>\n<p>把程序按逻辑结构分段，再在每段划分固定大小的页。因此段的长度必须是页长度的整数倍，段的起点必须是某一页的起点。<br>\n虚地址分为<mark>段号，段内页号，页内地址</mark></p>\n<ul>\n<li>访问流程：从段表基址寄存器（STBR） 中读取段表的起始地址，用段号（s）作为索引，在段表中查找第 s 个表项，从该表项中取出该段对应的页表起始地址（即页表基址），与段内页号合成得到页表地址（页表项地址 = PTBR + p × 页表项大小），读取第 p 个页表项得到物理页号（PPN），和页内地址合成得到物理地址</li>\n</ul>\n",
            "tags": [
                "存储系统"
            ]
        },
        {
            "id": "http://example.com/2025/07/01/computer-science/computer-organization/%E9%94%99%E9%A2%98%E9%9B%86%E5%90%88/",
            "url": "http://example.com/2025/07/01/computer-science/computer-organization/%E9%94%99%E9%A2%98%E9%9B%86%E5%90%88/",
            "title": "错题集合",
            "date_published": "2025-06-30T16:00:00.000Z",
            "content_html": "<h1 id=\"错题集合\"><a class=\"markdownIt-Anchor\" href=\"#错题集合\">#</a> 错题集合</h1>\n<h2 id=\"ch2\"><a class=\"markdownIt-Anchor\" href=\"#ch2\">#</a> Ch2</h2>\n<ol>\n<li>某计算机字长为 8 位，CPU 中有一个 8 位加法器，已知无符号数 x=69, y=38，若在该加法器中计算 x-y，则加法器的两个输入短信息和输入的低位进位信息分别为（）</li>\n</ol>\n<ul>\n<li>0100 0101, 1101 1001, 1</li>\n</ul>\n<blockquote>\n<p>无符号数减法，在加法器中输入 x 的原码，y 的取反和 1</p>\n</blockquote>\n<ol start=\"2\">\n<li>减法指令 “sub R1, R2, R3” 的功能为 “(R1) - (R2) -&gt; R3”, 该指令执行后将生成进位 / 借位标志 CF 和溢出标志 OF，若 (R1) = FFFF FFFFH, R2 = FFFF FFF0H, 则该减法指令执行后，CF 和 OF 分别为：</li>\n</ol>\n<ul>\n<li>CF = 0, OF = 0</li>\n</ul>\n<ol start=\"3\">\n<li>已知 x, y 为 int 类型，当 x = 100, y = 200 时，执行 &quot;x - y&quot; 指令得到的溢出标志 OF 和结尾标志 CF 分别为 0，1，那么当 x = 1-, y = -20 时，执行该指令得到的 OF 和 CF 分别为：</li>\n</ol>\n<ul>\n<li>OF = 0, CF = 1</li>\n</ul>\n<blockquote>\n<p>ALU 生成标志位时只负责计算，不管运算对象是有符号数还是无符号数。CF=1 表示当做无符号数运算时溢出，OF=1 表示当做有符号数运算时溢出。当做有符号数，10-(-20) 没问题，所以 OF=0；把它俩当做无符号数的时候，x = 10 = 0000 0000 0000 0000 0000 0000 0000 1010，y = -20 = 1111 1111 1111 1111 1111 1111 1110 1100，此时 x &lt; y，所以 CF=1。</p>\n</blockquote>\n<ol start=\"4\">\n<li>下列关于整数乘法运算的叙述中，错误的是：D</li>\n</ol>\n<ul>\n<li>A. 用阵列乘法器实现的乘运算可以在一个时钟周期内完成 -- 正确，因为是组合逻辑理论上可以在一个 clc 里完成</li>\n<li>B. 用 ALU 和移位器实现的乘运算无法在一个时钟周期内完成</li>\n<li>C. 变量与常数的乘运算可编译优化为若干移位及家 / 减运算指令</li>\n<li>D. 两个变量的乘运算无法编译转换为移位及加法等指令的循环实现</li>\n</ul>\n<h2 id=\"ch4\"><a class=\"markdownIt-Anchor\" href=\"#ch4\">#</a> Ch4</h2>\n<ol>\n<li>简化地址结构的方式是尽量采用： 隐含寻址</li>\n</ol>\n",
            "tags": [
                "错题"
            ]
        },
        {
            "id": "http://example.com/2025/06/18/computer-science/compile-principles/ch10/",
            "url": "http://example.com/2025/06/18/computer-science/compile-principles/ch10/",
            "title": "Liveness Analysis",
            "date_published": "2025-06-17T16:00:00.000Z",
            "content_html": "<h1 id=\"liveness-analysis-活跃变量分析\"><a class=\"markdownIt-Anchor\" href=\"#liveness-analysis-活跃变量分析\">#</a> Liveness Analysis 活跃变量分析</h1>\n<p>判断在程序执行的某个点上，一个变量的值是否可能在未来被使用，是寄存器分配、死代码消除的基础</p>\n<h2 id=\"compiler-optimizations\"><a class=\"markdownIt-Anchor\" href=\"#compiler-optimizations\">#</a> Compiler Optimizations</h2>\n<ul>\n<li>Local: 基于 basic blocks</li>\n<li>Intraprocedural (or “global’): 基本块的控制流转移</li>\n<li>Interprocedural (or “whole-program”): Operate on &gt; 1 procedure, up to whole program; Sometimes, at link time (LTO, link time optimization)</li>\n</ul>\n<p>两步：</p>\n<ul>\n<li>Analyze program to gather “facts”</li>\n<li>Apply transformation (e.g., optimizations)</li>\n</ul>\n<h2 id=\"dataflow-analysis\"><a class=\"markdownIt-Anchor\" href=\"#dataflow-analysis\">#</a> Dataflow Analysis</h2>\n<p>Control Flow Graph: A directed graph 数据流图<br>\n– Nodes represent statements<br>\n– Edges represent control flow</p>\n<p>CFG 的简化：基本块<br>\n<img data-src=\"f1.jpg\" alt></p>\n<h3 id=\"变量的活跃性\"><a class=\"markdownIt-Anchor\" href=\"#变量的活跃性\">#</a> 变量的活跃性：</h3>\n<p>变量 x 在语句 s 处（执行 s 之前）处于活动状态，当且仅当满足以下三个条件：</p>\n<ol>\n<li>存在一个使用 x 的语句 s’；</li>\n<li>存在从 s 到 s’的路径；</li>\n<li>这条路径上没有对 x 进行任何赋值操作</li>\n</ol>\n<p>通过分析 liveness，我们可以实现：</p>\n<ol>\n<li>Register Allocation</li>\n<li>Code Optimizations：Remove unused assignments</li>\n<li>IR Construction： Optimize the construction of SSA</li>\n<li>Security/Reliability: Detect the use of uninitialized variables</li>\n</ol>\n<h2 id=\"dataflow-equations-for-liveness-构建数据流方程\"><a class=\"markdownIt-Anchor\" href=\"#dataflow-equations-for-liveness-构建数据流方程\">#</a> Dataflow Equations for Liveness 构建数据流方程</h2>\n<p>A CFG node has</p>\n<ul>\n<li>out-edges: lead to successor nodes</li>\n<li>in-edges: come from predecessor nodes</li>\n<li>pred [n]: the predecessors of node n       前驱</li>\n<li>succ [n]: the successors of node n     后继</li>\n</ul>\n<p>几个定义：</p>\n<ul>\n<li>use [n]: 在节点 n 被读取或使用 (x = a + b 的 a 和 b, if (a &lt; b) 的 a 和 b, return c 的 c)</li>\n<li>def [n]: 在节点 n 被定义 (x = a + b 的 x)</li>\n<li>in [n]: 在节点 n 之前，所有活跃变量的集合</li>\n<li>out [n]: 在节点 n 之后，所有活跃变量的集合<br>\n三条活跃性规则：</li>\n</ul>\n<ol>\n<li>if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>i</mi><mi>n</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a \\in in[n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span></span></span> then for \\all m \\in pred[n] we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>o</mi><mi>u</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>m</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a \\in out[m]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">]</span></span></span></span></li>\n<li>if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>u</mi><mi>s</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a \\in use[n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>i</mi><mi>n</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a \\in in[n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span></span></span></li>\n<li>if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>o</mi><mi>u</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a \\in out[n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo mathvariant=\"normal\">∉</mo><mi>d</mi><mi>e</mi><mi>f</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a \\notin def[n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>i</mi><mi>n</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a \\in in[n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span></span></span></li>\n</ol>\n<p>得到以下两个数据流方程：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>o</mi><mi>u</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo><mo>=</mo><msub><mo>∪</mo><mrow><mi>s</mi><mo>∈</mo><mi>s</mi><mi>u</mi><mi>c</mi><mi>c</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow></msub><mi>i</mi><mi>n</mi><mo stretchy=\"false\">[</mo><mi>s</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">out[n] = \\cup_{s \\in succ[n]} in[s]\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord\"><span class=\"mbin\">∪</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">c</span><span class=\"mord mathnormal mtight\">c</span><span class=\"mopen mtight\">[</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">]</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">]</span></span></span></span></span></p>\n<p>一个节点在 n 的出口处活跃当且仅当在它后继的入口处是活跃的（活跃性的反向传播）</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>i</mi><mi>n</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>u</mi><mi>s</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo><mo>∪</mo><mo stretchy=\"false\">(</mo><mi>o</mi><mi>u</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>d</mi><mi>e</mi><mi>f</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">in[n] = use[n] \\cup (out[n] - def[n])\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<h2 id=\"求解数据流方程\"><a class=\"markdownIt-Anchor\" href=\"#求解数据流方程\">#</a> 求解数据流方程</h2>\n<p>有了上面的两个数据流方程，就可以求解数据流方程了<br>\n算法：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>pseudo</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for each n</span><br><span class=\"line\">    in[n] ←&#123;&#125;; out[n] ←&#123;&#125;</span><br><span class=\"line\">repeat</span><br><span class=\"line\">    for each n</span><br><span class=\"line\">        in′[n] ← in[n]; out′[n] ← out[n]</span><br><span class=\"line\">        in[n] ← use[n] ∪ (out[n] − def[n])</span><br><span class=\"line\">        out[n] ← ⋃( ∈()**[+] in[s]</span><br><span class=\"line\">until in′[n] = in[n] and out′[n] = out[n] for all n</span><br></pre></td></tr></table></figure>\n<ol>\n<li>将所有节点的  <code>in</code>  和  <code>out</code>  集合初始化为空集。</li>\n<li>写出 <code>use[n]</code>  和 <code>def[n]</code></li>\n<li>用数据流方程更新 <code>in</code>  和 <code>out</code>  集合</li>\n<li>直到 <code>in</code>  和 <code>out</code>  集合不再改变为止<br>\n例：<br>\n<img data-src=\"f2.jpg\" alt><br>\n对于这个 CFG<br>\n 每一次迭代如图：<br>\n<img data-src=\"f3.jpg\" alt></li>\n</ol>\n<h2 id=\"improvements\"><a class=\"markdownIt-Anchor\" href=\"#improvements\">#</a> Improvements</h2>\n<h3 id=\"use-basic-block\"><a class=\"markdownIt-Anchor\" href=\"#use-basic-block\">#</a> Use Basic Block</h3>\n<p>后面有点懒得看，先放着</p>\n<h2 id=\"集合的表示方法\"><a class=\"markdownIt-Anchor\" href=\"#集合的表示方法\">#</a> 集合的表示方法</h2>\n<p>对于 in, out, use, def 集合的表示和操作对性能有很大影响</p>\n<h3 id=\"bit-arrays\"><a class=\"markdownIt-Anchor\" href=\"#bit-arrays\">#</a> Bit Arrays</h3>\n<p>有点像 bit map，适用于稠密集合（1 比较多的，如果 0 太多就浪费了）</p>\n<h3 id=\"sorted-lists\"><a class=\"markdownIt-Anchor\" href=\"#sorted-lists\">#</a> Sorted Lists</h3>\n<p>适合稀疏集合（用一个链表存集合中的变量，Sorted by variable name/ID）</p>\n",
            "tags": [
                "Liveness Analysis"
            ]
        },
        {
            "id": "http://example.com/2025/06/18/computer-science/compile-principles/ch11/",
            "url": "http://example.com/2025/06/18/computer-science/compile-principles/ch11/",
            "title": "Register Allocation",
            "date_published": "2025-06-17T16:00:00.000Z",
            "content_html": "<h1 id=\"register-allocation\"><a class=\"markdownIt-Anchor\" href=\"#register-allocation\">#</a> Register Allocation</h1>\n<p>目标：</p>\n<ul>\n<li>Map temporaries to registers</li>\n<li>Preserve program semantics</li>\n<li>Optimize performance</li>\n</ul>\n<h2 id=\"图着色算法\"><a class=\"markdownIt-Anchor\" href=\"#图着色算法\">#</a> 图着色算法</h2>\n<p>冲突图是一个无向图，冲突图中，每个节点是一个变量（寄存器分配的候选对象）。<br>\n如果两个变量在同一时刻是活跃的（live），它们就有冲突边（interference edge），表示它们不能被分配到同一个寄存器<br>\n冲突信息可以用矩阵或者图来表示</p>\n<h3 id=\"冲突图构建\"><a class=\"markdownIt-Anchor\" href=\"#冲突图构建\">#</a> 冲突图构建</h3>\n<p>我们从一个中间代码的指令出发，根据 live-out（就是 out 集合）添加冲突边：</p>\n<ol>\n<li>非 move 指令（不是 a := b 这种）<br>\n比如 a := b1 + b2<br>\n 对于每个 bn 和 a 之间都添加冲突边<br>\n比如下面这个例子：<br>\n<img data-src=\"f1.jpg\" alt><br>\n可以看到有 ab ac 同时 live 了，所以为 a 和 b，a 和 c 添加冲突边</li>\n<li>move 指令<br>\n对于 move 指令，不添加冲突边：<br>\n比如对于第 2 条指令 d ← a，out [2] = {a, e}，那么只对 d 和 e 添加冲突边，对 d 和 a 不添加<br>\n但如果 move 之后又对 d 重新赋值了，那么还是要添加上 d 和 a 之间的冲突边</li>\n</ol>\n<h3 id=\"冲突图着色\"><a class=\"markdownIt-Anchor\" href=\"#冲突图着色\">#</a> 冲突图着色</h3>\n<p>Vertex Coloring: 给图中的顶点着色，使得图中没有边连接相同颜色的顶点<br>\n K-Coloring: 颜色数小于 K</p>\n<h4 id=\"kempe-简化\"><a class=\"markdownIt-Anchor\" href=\"#kempe-简化\">#</a> Kempe 简化</h4>\n<p>如果图中有一个节点 n 的度数 &lt;K（也就是它的冲突数少于寄存器数），那我们可以 “临时删掉” 这个节点，并递归给剩下的图上色。之后再把这个节点加回来，它一定可以找到一个合法颜色。</p>\n<p>如果图中所有节点的度数都 ≥ K，那就可能要进入溢出（spill）处理<br>\n算法步骤：</p>\n<ol>\n<li>build: 画冲突图</li>\n<li>simplify the nodes with insignificant degree: 选取 degree &lt; k 的节点，压栈</li>\n<li>select (or color) while rebuilding the graph: 出栈，分配颜色<br>\n A vertex such that its degree &lt; k is always k-colorable<br>\nRemove such vertices and push them to a stack until the graph becomes empty<br>\n 移除顶点的同时移除相关边</li>\n</ol>\n<h4 id=\"coalescing\"><a class=\"markdownIt-Anchor\" href=\"#coalescing\">#</a> Coalescing</h4>\n<p>遵循两种策略：</p>\n<ul>\n<li><strong>Briggs Criteria</strong>: 如果将节点  <code>a</code>  和  <code>b</code>  合并后得到的新节点  <code>ab</code> ，其相邻节点中 degree &gt;= K 的节点（significant-degree neighbors）的数量 小于 K，则可以合并</li>\n<li><strong>George Criteria</strong>: 如果对节点  <code>a</code>  和  <code>b</code> ，对于  <code>a</code>  的每一个邻居  <code>t</code> ， 满足二者其中之一，就能合并：\n<ul>\n<li><code>t</code>  本来就和  <code>b</code>  有冲突</li>\n<li><code>t</code>  的 degree &lt; K</li>\n</ul>\n</li>\n</ul>\n<p>整体流程：<br>\n<img data-src=\"f2.jpg\" alt></p>\n<ul>\n<li>为什么要 simplify non-move-related node: 保留 move-related 的后续可以合并</li>\n<li>freeze: 当我们遇到两个变量 a ← b 有 move 指令，但现在还不能安全合并，我们又不想立刻 spill，于是我们 “冻结” 这条 move 指令：不再试图合并 a 和 b，而是让其中一个变成非 move 相关（non-move-related），进入 Simplify 阶段继续处理</li>\n<li>spill 规则：优先移除不被经常使用、degree 大的节点\n<ul>\n<li>实际溢出的 priority 计算，对于节点 a：</li>\n</ul>\n</li>\n</ul>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>i</mi><mi>o</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><mi>u</mi><mi>s</mi><mi>e</mi><mo>+</mo><mi>d</mi><mi>e</mi><mi>f</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>s</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>l</mi><mi>o</mi><mi>o</mi><mi>p</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>l</mi><mi>o</mi><mi>o</mi><msub><mi>p</mi><mi>n</mi></msub><mi>u</mi><mi>m</mi><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>u</mi><mi>s</mi><mi>e</mi><mo>+</mo><mi>d</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>n</mi><mi>s</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>l</mi><mi>o</mi><mi>o</mi><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><mi>D</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">priority(t) = \\frac{(use + def outside loop) + loop_num * (use + def inside loop)}{D}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n",
            "tags": [
                "Register Allocation"
            ]
        },
        {
            "id": "http://example.com/2025/06/17/computer-science/compile-principles/ch9/",
            "url": "http://example.com/2025/06/17/computer-science/compile-principles/ch9/",
            "title": "指令选择",
            "date_published": "2025-06-16T16:00:00.000Z",
            "content_html": "<h1 id=\"指令选择\"><a class=\"markdownIt-Anchor\" href=\"#指令选择\">#</a> 指令选择</h1>\n<p>找出实现一个给定的 IR Tree 的恰当机器指令序列。Mapping IR into abstract assembly code</p>\n<ul>\n<li>Abstract assembly = assembly with infinite registers\n<ul>\n<li>Invent new temporaries for intermediate results</li>\n<li>Map to actual registers later<br>\nTree pattern, 也叫 tile<br>\n 本质上是 pattern matching, 我们使用 tree covering 来实现</li>\n</ul>\n</li>\n</ul>\n<p>我们 <code>Jouette</code>  体系将树模式映射为指令:</p>\n<ul>\n<li>寄存器中可以存储数据或地址，每条指令可以访问任意寄存器</li>\n<li>寄存器 r0 的值永远是 0</li>\n<li>每条指令的 latency 都是一周期（除了 MOVEM 的周期是 m）</li>\n<li>每个周期执行一条指令</li>\n</ul>\n<p><img data-src=\"f2.jpg\" alt><br>\n<img data-src=\"f1.jpg\" alt><br>\n将 IR 与后端的机器指令都转换为树结构。这样就把指令选择问题转换为机器指令树覆盖全 IR Tree 的问题。<br>\n一棵树可以有多种 tiling 方式</p>\n<h2 id=\"optimal-tiling-optimum-tiling\"><a class=\"markdownIt-Anchor\" href=\"#optimal-tiling-optimum-tiling\">#</a> Optimal Tiling &amp; Optimum Tiling</h2>\n<ul>\n<li>Optimum Tiling：使得 tiling 数最少，是<mark>全局最优</mark></li>\n<li>Optimal Tiling：No two adjacent tiles can be combined into a single tile of lower cost，是<mark>局部最优</mark><br>\n一个 optimum tiling 必定是 optimal tiling<br>\n<img data-src=\"f3.jpg\" alt></li>\n</ul>\n<h2 id=\"algorithms-for-instruction-selection\"><a class=\"markdownIt-Anchor\" href=\"#algorithms-for-instruction-selection\">#</a> Algorithms for Instruction Selection</h2>\n<h3 id=\"maximal-munch-find-an-optimal-tiling\"><a class=\"markdownIt-Anchor\" href=\"#maximal-munch-find-an-optimal-tiling\">#</a> Maximal Munch: Find an optimal tiling</h3>\n<p>最大匹配：贪心算法、自顶向下<br>\n方法：从 IR 树的根节点开始，用<mark>最大的</mark> tile 覆盖当前节点（包含最多节点的），然后在子树中重复此过程</p>\n<h3 id=\"dp\"><a class=\"markdownIt-Anchor\" href=\"#dp\">#</a> DP</h3>\n<p>动态规划：自底向上<br>\n方法：</p>\n<ol>\n<li>递归计算每个子树的最优平铺成本</li>\n<li>对于每个节点，考虑所有可能的匹配平铺</li>\n<li>对于每个匹配平铺，计算其成本如下：cost = tile_cost + sum（costs_of_children）</li>\n<li>选择成本最低的平铺</li>\n</ol>\n<ul>\n<li>对于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mi>O</mi><mi>N</mi><mi>S</mi><mi>T</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">CONST i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">i</span></span></span></span>，它的代价为 1 (ADD r1, r0, i)</li>\n<li>对于这棵树，有三种匹配方法<br>\n<img data-src=\"f4.jpg\" alt><br>\n<img data-src=\"f5.jpg\" alt><br>\n因为 2&lt;3，所以我们从 cost=2 的两个任选一个<br>\n接下来对于 MEM，用的都是 LOAD，代价都是 1，2&lt;3 所以选 cost=2 的</li>\n</ul>\n<figure class=\"highlight c\"><figcaption><span>指令发射</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"title function_\">Emission</span><span class=\"params\">(node n)</span>:</span><br><span class=\"line\">    For each leaf l_i of the tile selected at node n:</span><br><span class=\"line\">        <span class=\"title function_\">Emission</span><span class=\"params\">(l_i)</span> </span><br><span class=\"line\">    Emit the instruction matched at node n</span><br></pre></td></tr></table></figure>\n<h3 id=\"最大匹配-vs-动态规划\"><a class=\"markdownIt-Anchor\" href=\"#最大匹配-vs-动态规划\">#</a> 最大匹配 vs 动态规划</h3>\n<ul>\n<li><strong>T</strong> - tile 的总种类数</li>\n<li><strong>K</strong> - 一个 matching tile 平均覆盖的节点数</li>\n<li><strong>K’</strong> - 需要检查的最大 tile 尺寸（即最大的瓦片包含的节点数）</li>\n<li><strong>T’</strong> - 每个树节点平均能匹配上的 tile 数量</li>\n<li><strong>N</strong> - 输入的中间表示 IR Tree 中的总节点数</li>\n</ul>\n<p>两种算法的运行时间复杂度：</p>\n<ul>\n<li><strong>最大匹配（Maximal Munch）</strong> - 其时间复杂度与</li>\n</ul>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><mrow><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>+</mo><msup><mi>T</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>K</mi></mrow><mi>K</mi></mfrac><mo>∗</mo><mi>N</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>+</mo><msup><mi>T</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">\\frac{(K&#x27; + T&#x27;) * K}{K} * N = (K&#x27; + T&#x27;) * N\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.114892em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.428892em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.051892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.801892em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.051892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.801892em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></p>\n<p>成正比</p>\n<ul>\n<li><strong>动态规划（Dynamic Programming）</strong> - 其时间复杂度与</li>\n</ul>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>+</mo><msup><mi>T</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">(K&#x27; + T&#x27;) * N\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.051892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.801892em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.051892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.801892em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></p>\n<p>成正比</p>\n<h2 id=\"tree-grammar-树文法\"><a class=\"markdownIt-Anchor\" href=\"#tree-grammar-树文法\">#</a> Tree Grammar 树文法</h2>\n<p>问题：对于具有复杂指令集和多种寄存器类型及寻址模式的机器，难以使用简单的 tree pattern 和 tiling 算法。<br>\n用一种文法来描述 tiles，代替手写过程式匹配代码，支持自动化的指令选择，增强了可移植性<br>\n图没看懂，后面再回来研究</p>\n",
            "tags": [
                "指令选择"
            ]
        },
        {
            "id": "http://example.com/2025/06/17/computer-science/compile-principles/ch8/",
            "url": "http://example.com/2025/06/17/computer-science/compile-principles/ch8/",
            "title": "Basic Blocks & Traces",
            "date_published": "2025-06-16T16:00:00.000Z",
            "content_html": "<h1 id=\"basic-blocks-and-traces\"><a class=\"markdownIt-Anchor\" href=\"#basic-blocks-and-traces\">#</a> Basic Blocks and Traces</h1>\n<h2 id=\"canonical-form\"><a class=\"markdownIt-Anchor\" href=\"#canonical-form\">#</a> Canonical Form</h2>\n<p>IR 存在一些与机器语言不能完全对应的情况，和与编译优化分析相冲突的情况。</p>\n<ul>\n<li>CJUMP 能够转移到 t 或者 f，但是真正的机器语言在条件为假的时候直接下降至下一条指令（条件为真才跳转）</li>\n<li>在表达式中使用 ESEQ 不太方便，会使子树不同的计算顺序产生不同的计算结果</li>\n<li>CALL 调用 CALL 作为参数的时候会有寄存器冲突、语句副作用（修改全局变量、改变堆内存，etc.）等问题</li>\n</ul>\n<p>三种方法：</p>\n<ol>\n<li>Linearize: Transform trees into a list of canonical<br>\ntrees without SEQ or ESEQ nodes</li>\n<li>Basic blocks: Group statements into sequences with<br>\nno internal jumps/labels</li>\n<li>Trace schedule: Order basic blocks so every CJUMP is followed by its false label</li>\n</ol>\n<h3 id=\"线性化\"><a class=\"markdownIt-Anchor\" href=\"#线性化\">#</a> 线性化</h3>\n<p><mark>规范树（Canonical Tree）定义：</mark></p>\n<ol>\n<li>无 SEQ 或 ESEQ</li>\n<li>每一个 CALL 的父亲不是 EXP (…) 就是 MOVE (TEMP t, …)</li>\n</ol>\n<h4 id=\"消除eseq\"><a class=\"markdownIt-Anchor\" href=\"#消除eseq\">#</a> 消除 ESEQ</h4>\n<h5 id=\"规则\"><a class=\"markdownIt-Anchor\" href=\"#规则\">#</a> 规则</h5>\n<p>合并副作用，提升 ESEQ：</p>\n<ul>\n<li>ESEQ(s1, ESEQ(s2,e)) =&gt; ESEQ(SEQ(s1,s2),e)</li>\n<li>BINOP(op, ESEQ(s, e1), e2) ⇒ ESEQ(s, BINOP(op, e1, e2))</li>\n<li>MEM(ESEQ(s, e1)) ⇒ ESEQ(s, MEM(e1))</li>\n<li>JUMP(ESEQ(s, e1)) ⇒ SEQ(s, JUMP(e1))</li>\n<li>CJUMP(op, ESEQ(s, e1), e2, l1, l2) ⇒ SEQ(s, CJUMP(op, e1, e2, l1, l2))</li>\n</ul>\n<h5 id=\"commutativity重点\"><a class=\"markdownIt-Anchor\" href=\"#commutativity重点\">#</a> Commutativity（重点）</h5>\n<p>当 <code>ESEQ</code>  出现在 <code>BINOP</code>  的右操作数，即<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>I</mi><mi>N</mi><mi>O</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>o</mi><mi>p</mi><mo separator=\"true\">,</mo><mi>e</mi><mn>1</mn><mo separator=\"true\">,</mo><mi>E</mi><mi>S</mi><mi>E</mi><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>e</mi><mn>2</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">BINOP(op, e1, ESEQ(s, e2))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> 时，我们不能再像之前那样简单地把 <code>s</code>  提升到整个 <code>BINOP</code>  之前，因为 <code>e1</code>  的求值在 <code>e2</code>  之前，否则可能影响 <code>e1</code>  的计算结果</p>\n<p>Commutativity：交换性</p>\n<ul>\n<li>Commuting: s 不影响 e1 的结果\n<ul>\n<li>rule: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>I</mi><mi>N</mi><mi>O</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>o</mi><mi>p</mi><mo separator=\"true\">,</mo><mi>e</mi><mn>1</mn><mo separator=\"true\">,</mo><mi>E</mi><mi>S</mi><mi>E</mi><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>e</mi><mn>2</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mi>E</mi><mi>S</mi><mi>E</mi><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>B</mi><mi>I</mi><mi>N</mi><mi>O</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>o</mi><mi>p</mi><mo separator=\"true\">,</mo><mi>e</mi><mn>1</mn><mo separator=\"true\">,</mo><mi>e</mi><mn>2</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">BINOP(op, e1, ESEQ(s, e2)) = ESEQ(s, BINOP(op, e1, e2))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n</li>\n<li>Non-commuting: s 会影响 e1 的结果，把 e1 的结果显算出来放到临时变量 t 里，再提升 s\n<ul>\n<li>rule: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>I</mi><mi>N</mi><mi>O</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>o</mi><mi>p</mi><mo separator=\"true\">,</mo><mi>E</mi><mi>S</mi><mi>E</mi><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>e</mi><mn>1</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>e</mi><mn>2</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi>E</mi><mi>S</mi><mi>E</mi><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mi>O</mi><mi>V</mi><mi>E</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mi>E</mi><mi>M</mi><mi>P</mi><mi>t</mi><mo separator=\"true\">,</mo><mi>e</mi><mn>1</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>E</mi><mi>S</mi><mi>E</mi><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>B</mi><mi>I</mi><mi>N</mi><mi>O</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>o</mi><mi>p</mi><mo separator=\"true\">,</mo><mi>T</mi><mi>E</mi><mi>M</mi><mi>P</mi><mi>t</mi><mo separator=\"true\">,</mo><mi>e</mi><mn>2</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">BINOP(op, ESEQ(s, e1), e2) = ESEQ(MOVE(TEMP t, e1), ESEQ(s, BINOP(op, TEMP t, e2)))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"将call移到顶层\"><a class=\"markdownIt-Anchor\" href=\"#将call移到顶层\">#</a> 将 CALL 移到顶层</h4>\n<p>方法：立即将每一个返回值赋给一个新的临时寄存器</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>C</mi><mi>A</mi><mi>L</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mi>u</mi><mi>n</mi><mo separator=\"true\">,</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi>s</mi><mo stretchy=\"false\">)</mo><mo>⇒</mo><mi>E</mi><mi>S</mi><mi>E</mi><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mi>O</mi><mi>V</mi><mi>E</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mi>E</mi><mi>M</mi><mi>P</mi><mi>t</mi><mo separator=\"true\">,</mo><mi>C</mi><mi>A</mi><mi>L</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mi>u</mi><mi>n</mi><mo separator=\"true\">,</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi>s</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>T</mi><mi>E</mi><mi>M</mi><mi>P</mi><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">CALL(fun, args) ⇒ ESEQ(MOVE(TEMP t, CALL(fun, args)), TEMP t)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<h4 id=\"消除seq\"><a class=\"markdownIt-Anchor\" href=\"#消除seq\">#</a> 消除 SEQ</h4>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>S</mi><mi>E</mi><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mi>E</mi><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>S</mi><mi>E</mi><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>S</mi><mi>E</mi><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">SEQ(SEQ(a, b), c) = SEQ(a, SEQ(b, c))\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>把 SEQ 变成一个线性语句表：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>E</mi><mi>Q</mi><mo stretchy=\"false\">(</mo><msub><mi>s</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi>S</mi><mi>E</mi><mi>Q</mi><mo stretchy=\"false\">(</mo><msub><mi>s</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mi>S</mi><mi>E</mi><mi>Q</mi><mo stretchy=\"false\">(</mo><msub><mi>s</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><msub><mi>s</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">SEQ(s_1, SEQ(s_2, ..., SEQ(s_{n-1}, s_n) ...))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span><br>\n 就可以认为是由语句组成的简单列表<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>s</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>s</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">s_1, s_2, ..., s_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<h3 id=\"处理cjump\"><a class=\"markdownIt-Anchor\" href=\"#处理cjump\">#</a> 处理 CJUMP</h3>\n<p>重排 CJUMP，使得每个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mi>J</mi><mi>U</mi><mi>M</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>o</mi><mi>p</mi><mo separator=\"true\">,</mo><msub><mi>e</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>e</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>l</mi><mi>t</mi></msub><mo separator=\"true\">,</mo><msub><mi>l</mi><mi>f</mi></msub><mo stretchy=\"false\">)</mo><mtext>后面都紧跟着</mtext></mrow><annotation encoding=\"application/x-tex\">CJUMP(op, e_1, e_2, l_t, l_f)后面都紧跟着</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">后</span><span class=\"mord cjk_fallback\">面</span><span class=\"mord cjk_fallback\">都</span><span class=\"mord cjk_fallback\">紧</span><span class=\"mord cjk_fallback\">跟</span><span class=\"mord cjk_fallback\">着</span></span></span></span> LABEL (l_f)$<br>\n 分两步：1. 取一列 canonical tree 由它们形成 basic block 2. 对 basic block 进行排序形成 trace</p>\n<h4 id=\"basic-block\"><a class=\"markdownIt-Anchor\" href=\"#basic-block\">#</a> Basic Block</h4>\n<p>一个基本块是一段连续的指令序列，即:</p>\n<ul>\n<li>第一个语句是一个 <code>LABEL</code></li>\n<li>最后一个语句是 <code>JUMP</code>  或 <code>CJUMP</code></li>\n<li>没有其他的 <code>LABEL</code> ,  <code>JUMP</code>  或 <code>CJUMP</code> <br>\n 划分方法：</li>\n</ul>\n<ol>\n<li>每一个 <code>LABEL</code>  都对应一个基本块的开始</li>\n<li>每一个 <code>JUMP</code>  或 <code>CJUMP</code>  都对应一个基本块的结束</li>\n<li>如果遇到 <code>LABEL1</code>  -&gt;  <code>LABEL2</code> , 就在 <code>LABEL2</code>  前面加一个 <code>JUMP</code>  到 <code>LABEL2</code></li>\n<li>如果遇到开头没有 <code>LABEL</code>  的，则加一个 <code>LABEL</code> （比如程序的开头）</li>\n<li>出口处理：添加一个 LABEL  <code>done</code>  表示出口处理的开始，并把<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi><mi>U</mi><mi>M</mi><mi>P</mi><mi>d</mi><mi>o</mi><mi>n</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">JUMP done</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span></span></span></span> 放最后一个 block 末尾</li>\n</ol>\n<h4 id=\"trace\"><a class=\"markdownIt-Anchor\" href=\"#trace\">#</a> Trace</h4>\n<p>现在我们可以按任意顺序来安排这些基本块，并且程序执行的结果仍是相同的 —— 因为无论怎么排序，每个基本块的末尾都能转移到一个正确的位置。我们可以利用这一点来选择适当的基本块排列顺序，以满足每个 <code>CJUMP</code>  之后都跟随它的 false 标号这一条件。<br>\n与此同时，我们也可以安排基本块使得无条件转移 <code>JUMP</code>  之后直接跟随的是它们的目标标号。这样便可以删除这些无条件转移，从而使编译生成的程序的执行速度更快。</p>\n<p>把 basic block 排成 trace 的方法也很简单：<mark>从每个基本块开始，追踪 JUMP 链，标记遇到的每一个未标记的基本快并添加到当前 trace 中，最终到达一个其后继都标记过的块，就是结束块。之后再选则一个未标记的基本块开始，重复上述过程。</mark></p>\n<p>因为轨迹调度不可能覆盖所有情况，所以：</p>\n<ol>\n<li>如果 CJUMP 后跟 true label: 条件取反，交换 true/false，改成：</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>C</mi><mi>J</mi><mi>U</mi><mi>M</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">!</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>d</mi><mo separator=\"true\">,</mo><mi>l</mi><mi>f</mi><mo separator=\"true\">,</mo><mi>l</mi><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">CJUMP(!cond, lf, lt)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mclose\">!</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<ol start=\"2\">\n<li>CJUMP 后跟的不是 true 也不是 false: 创建中间 label，插入 JUMP</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>C</mi><mi>J</mi><mi>U</mi><mi>M</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>d</mi><mo separator=\"true\">,</mo><mi>l</mi><mi>t</mi><mo separator=\"true\">,</mo><mi>l</mi><mi>f</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo>&gt;</mo><mi>C</mi><mi>J</mi><mi>U</mi><mi>M</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>d</mi><mo separator=\"true\">,</mo><mi>l</mi><mi>t</mi><mo separator=\"true\">,</mo><msup><mi>l</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>f</mi><mo stretchy=\"false\">)</mo><mi>L</mi><mi>A</mi><mi>B</mi><mi>E</mi><mi>L</mi><msup><mi>l</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>f</mi><mi>J</mi><mi>U</mi><mi>M</mi><mi>P</mi><mi>N</mi><mi>A</mi><mi>M</mi><mi>E</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>f</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">CJUMP(cond, lt, lf) =&gt; CJUMP(cond, lt, l&#x27;f) LABEL l&#x27;f   JUMP NAME(lf)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.051892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.801892em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">L</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.801892em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<h4 id=\"最优轨迹optimal-trace\"><a class=\"markdownIt-Anchor\" href=\"#最优轨迹optimal-trace\">#</a> 最优轨迹 (Optimal Trace)</h4>\n<p>对于 basic block 可能有不同的 trace 划分方法</p>\n<ul>\n<li>Hot Path Prioritization（优先热路径）: 优先将 ** 运行频率高的基本块（hot blocks）** 合并在同一条轨迹（trace）里，减少跳转，提高局部性。</li>\n</ul>\n<details class=\"info\"><summary>example</summary><div>\n<p>假设 if-else 中 if 分支占 90% 执行概率，else 只有 10%：</p>\n<figure class=\"highlight c\"><figcaption><span>tiger</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span> then</span><br><span class=\"line\">    a := a + <span class=\"number\">1</span>   -- 热路径</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    a := a - <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>生成时应把 x &gt; 0 为真的路径（包括 CJUMP 的 false 分支）安排成 fall-through，避免跳转开销出现在热路径上。</p>\n</div></details>\n<ul>\n<li>\n<p>Locality Enhancement（增强局部性）: 把逻辑上相关联的代码块放得更近一些，让它们在内存中 “邻近”。</p>\n<ul>\n<li>原因：\n<ul>\n<li>更好地利用 CPU cache、预取机制。</li>\n<li>避免指令 cache miss 导致性能下降。<br>\n比如：将循环体和循环条件代码块排在一起（而不是让条件跳到远处），从而保持指令流顺序性。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Jump Minimization（最小化跳转）: 尽量减少无条件跳转（JUMP）和不必要的条件跳转（CJUMP），尤其在常走路径上，\t减少分支预测失败。</p>\n</li>\n</ul>\n<p><img data-src=\"f1.jpg\" alt><br>\n哪个划分比较好？<br>\n根据 3，c 比 a 好；</p>\n",
            "tags": [
                "Basic Blocks and Traces"
            ]
        },
        {
            "id": "http://example.com/2025/06/16/computer-science/compile-principles/ch7/",
            "url": "http://example.com/2025/06/16/computer-science/compile-principles/ch7/",
            "title": "IR",
            "date_published": "2025-06-15T16:00:00.000Z",
            "content_html": "<h1 id=\"ir\"><a class=\"markdownIt-Anchor\" href=\"#ir\">#</a> IR</h1>\n<p>Intermediate Representation<br>\n 解决高级语言和目标机器汇编语言之间的转化<br>\n为什么需要 IR:</p>\n<ul>\n<li>更模块化、可迁移</li>\n<li>分层分析和优化<br>\n IR 可以有好多层：IR1-&gt;IR2-&gt;…-&gt;IRn</li>\n</ul>\n<details class=\"info\"><summary>编译流程划分</summary><div>\n<p>前端：源代码 -&gt; 词法分析 -&gt; 语法分析 -&gt; 语义分析（IR 之前的都是）<br>\n中端：基于 IR 的分析与变换（可能生成新 IR，可以做一些机器无关优化比如循环展开等）<br>\n后端：指令选择 -&gt; 寄存器分配 -&gt; 指令调度 -&gt; 机器码（IR 之后的）</p>\n</div></details>\n<h2 id=\"three-address-code\"><a class=\"markdownIt-Anchor\" href=\"#three-address-code\">#</a> Three-Address Code</h2>\n<p>最多有三个操作数<br>\n x = y op z<br>\n “地址” 可以具有如下形式</p>\n<ul>\n<li>源程序中的名字 (name)</li>\n<li>常量 (constant)</li>\n<li>临时变量 (temporary)<br>\n<img data-src=\"f1.jpg\" alt><br>\n 最常见的实现方法是将三地址代码作为四元组实现</li>\n</ul>\n<details class=\"info\"><summary>example</summary><div>\n<p>t1=x&gt;0                  (gt, x, 0, t1)<br>\nif_false t1 goto L1     (if_f, t1, L1, _)<br>\nfact=1                  (asn, 1, fact, _)<br>\nlabel L2                (lab, L2, _, _)</p>\n</div></details>\n<h2 id=\"ir-tree\"><a class=\"markdownIt-Anchor\" href=\"#ir-tree\">#</a> IR Tree</h2>\n<p>两大类节点：</p>\n<ol>\n<li>表达式 Exp</li>\n<li>语句 Stmt<br>\n 文法：<br>\n<img data-src=\"f2.jpg\" alt><br>\n表达式：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>Node</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CONST(i)</td>\n<td>整数常量 i</td>\n<td>CONST(42) → the value 42</td>\n</tr>\n<tr>\n<td>NAME(n)</td>\n<td>符号常量 n，通常是一个 label，值是 label 的地址</td>\n<td>NAME(L1) → address of label L1</td>\n</tr>\n<tr>\n<td>TEMP(t)</td>\n<td>临时变量 t (like register)</td>\n<td>TEMP(t123) → contents of temporary t123</td>\n</tr>\n<tr>\n<td>BINOP(o,e1,e2)</td>\n<td>对 e1 和 e2 执行二元操作 o</td>\n<td>BINOP(PLUS,TEMP(t1),CONST(1)) → t1+1</td>\n</tr>\n<tr>\n<td>MEM(e)</td>\n<td>Memory access</td>\n<td>MEM(CONST(100)) → contents at address 100</td>\n</tr>\n<tr>\n<td>CALL(f,l)</td>\n<td>Function call, l 是参数列表</td>\n<td>CALL(NAME(print),[TEMP(t1)]) → call print(t1)</td>\n</tr>\n<tr>\n<td>ESEQ(s,e)</td>\n<td>先执行语句 s，再求值表达式 e 并返回 e 的结果</td>\n<td>ESEQ(MOVE(TEMP(t),CONST(1)),TEMP(t)) → (t=1; t)</td>\n</tr>\n</tbody>\n</table>\n<p>语句：</p>\n<table>\n<thead>\n<tr>\n<th>Node</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MOVE(TEMP t, e)</td>\n<td>将表达式 e 的值赋给临时变量 t</td>\n<td>MOVE(TEMP(t1), CONST(42)) → t1 = 42</td>\n</tr>\n<tr>\n<td>MOVE(MEM(e1), e2)</td>\n<td>将表达式 e2 的值存储到由 e1 指定的内存地址中</td>\n<td>MOVE(MEM(TEMP(t1)), CONST(42)) → *t1 = 42</td>\n</tr>\n<tr>\n<td>EXP(e)</td>\n<td>计算表达式 e 的值但不返回结果，通常用于有副作用的操作（如函数调用）</td>\n<td>EXP (CALL (NAME (print), …)) → 调用 print () 函数以产生效果</td>\n</tr>\n<tr>\n<td>JUMP(e, labs)</td>\n<td>无条件跳转到由 e 指定的地址</td>\n<td>JUMP(NAME(L1), [L1]) → goto L1</td>\n</tr>\n<tr>\n<td>CJUMP(o,e1,e2,t,f)</td>\n<td>条件跳转，根据操作 o 对 e1 和 e2 的结果决定跳转到 t 或 f</td>\n<td>CJUMP (LT, TEMP (t1), CONST (0), L1, L2) → 如果 t1 &lt; 0 则跳转到 L1，否则跳转到 L2</td>\n</tr>\n<tr>\n<td>SEQ(s1, s2)</td>\n<td>语句序列，先执行 s1 再执行 s2</td>\n<td>SEQ (MOVE (…), JUMP (…)) → 先赋值再跳转</td>\n</tr>\n<tr>\n<td>LABEL(n)</td>\n<td>定义一个标签</td>\n<td>LABEL(L1) → L1:</td>\n</tr>\n</tbody>\n</table>\n<p>例子：<br>\n<img data-src=\"f3.jpg\" alt><br>\nADD 那个地方写成 BINOP 的写法也可以</p>\n<h2 id=\"翻译ast成ir-tree\"><a class=\"markdownIt-Anchor\" href=\"#翻译ast成ir-tree\">#</a> 翻译 AST 成 IR Tree</h2>\n<p>把 AST 表达式分为三类：</p>\n<ul>\n<li>Ex: 有结果的 AST 表达式比如 a+b</li>\n<li>Nx：无结果的语句的比如 print</li>\n<li>Cx：条件语句，值为 bool 的 AST 表达式</li>\n</ul>\n<h3 id=\"translate-exp\"><a class=\"markdownIt-Anchor\" href=\"#translate-exp\">#</a> translate Exp</h3>\n<ol>\n<li>翻译简单变量：<br>\n在函数中访问一个局部变量实际上是访问它在当前栈帧中的位置，所以访问一个距离 fp 的 offset 为 k 的局部变量 v，其 IR Tree 表示为:</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>M</mi><mi>E</mi><mi>M</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mi>I</mi><mi>N</mi><mi>O</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>P</mi><mi>L</mi><mi>U</mi><mi>S</mi><mo separator=\"true\">,</mo><mi>T</mi><mi>E</mi><mi>M</mi><mi>P</mi><mi>f</mi><mi>p</mi><mo separator=\"true\">,</mo><mi>C</mi><mi>O</mi><mi>N</mi><mi>S</mi><mi>T</mi><mi>k</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">MEM(BINOP(PLUS, TEMP fp, CONST k))\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p><img data-src=\"f4.jpg\" alt><br>\n如果通过 static link 访问一个变量，就要嵌套好几层 MEM 和 BINOP<br>\n 比如这个访问嵌套两层外面的 x<br>\n 最内层使用 CONST (8)：是因为需要从 inner 函数的帧指针 FP 开始，偏移 8 字节来访问静态链，该静态链指向 middle 函数的帧。<br>\n中间层和最外层使用 CONST (0)：是因为它们分别通过静态链直接访问 outer 函数的帧和变量 x，不需要额外的偏移<br>\n<img data-src=\"f5.jpg\" alt></p>\n<div class=\"note danger\">\n<p>这个地方为什么内层是 8 中层是 0 存疑</p>\n</div>\n<p>左值和右值：= 左右的<br>\n MEM (addr) 可以是左值也可以是右值</p>\n<ul>\n<li>Scalar L-value (Tiger): 一个地址</li>\n<li>Structured L-value (Pascal/C): 一块内存</li>\n</ul>\n<ol start=\"2\">\n<li>翻译算术运算</li>\n</ol>\n<ul>\n<li>二元: BINOP (op, e1, e2)</li>\n<li>一元:\n<ul>\n<li>-x ==&gt; BINOP(MINUS, CONST(0), e_x)</li>\n<li>~x ==&gt; BINOP(XOR, e_x, CONST(-1))</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>数组访问</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>M</mi><mi>E</mi><mi>M</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mi>I</mi><mi>N</mi><mi>O</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>P</mi><mi>L</mi><mi>U</mi><mi>S</mi><mo separator=\"true\">,</mo><mi>M</mi><mi>E</mi><mi>M</mi><mo stretchy=\"false\">(</mo><msub><mi>e</mi><mi>a</mi></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>B</mi><mi>I</mi><mi>N</mi><mi>O</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mi>U</mi><mi>L</mi><mo separator=\"true\">,</mo><msub><mi>e</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><mi>C</mi><mi>O</mi><mi>N</mi><mi>S</mi><mi>T</mi><mo stretchy=\"false\">(</mo><mi>W</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">MEM(BINOP(PLUS, MEM(e_a), BINOP(MUL, e_i, CONST(W))))\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\">L</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<ul>\n<li><code>e_a</code>  是表示变量  <code>a</code>  的表达式，通常是 ==  <code>MEM(+(TEMP(fp), CONST(k_a)))</code> ==</li>\n<li><code>MEM(e_a)</code> ：<mark>获取存储在变量  <code>a</code>  中的值，即数组基地址</mark></li>\n<li><code>e_i</code>  是计算索引  <code>i</code>  的表达式</li>\n<li><code>BINOP(MUL, e_i, CONST(W))</code> ：计算偏移<br>\n<img data-src=\"f6.jpg\" alt></li>\n</ul>\n<p>记录字段 r.f 访问:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>M</mi><mi>E</mi><mi>M</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mi>I</mi><mi>N</mi><mi>O</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>P</mi><mi>L</mi><mi>U</mi><mi>S</mi><mo separator=\"true\">,</mo><mi>M</mi><mi>E</mi><mi>M</mi><mo stretchy=\"false\">(</mo><msub><mi>e</mi><mi>r</mi></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>B</mi><mi>I</mi><mi>N</mi><mi>O</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mi>U</mi><mi>L</mi><mo separator=\"true\">,</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>C</mi><mi>O</mi><mi>N</mi><mi>S</mi><mi>T</mi><mo stretchy=\"false\">(</mo><mi>W</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">MEM(BINOP(PLUS, MEM(e_r), BINOP(MUL, n, CONST(W))))\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\">L</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<ol start=\"4\">\n<li>翻译控制流<br>\n对于 if e1 op e2 then stmt1 else stmt2 翻译成</li>\n</ol>\n<figure class=\"highlight c\"><figcaption><span>IR</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 6个SEQ</span></span><br><span class=\"line\">SEQ(</span><br><span class=\"line\">    CJUMP(op, e1, e2, t, f),</span><br><span class=\"line\">    SEQ(</span><br><span class=\"line\">        LABEL(t),</span><br><span class=\"line\">        SEQ(</span><br><span class=\"line\">            stm1,</span><br><span class=\"line\">            SEQ(</span><br><span class=\"line\">                JUMP(NAME(end)),</span><br><span class=\"line\">                SEQ(</span><br><span class=\"line\">                    LABEL(f),</span><br><span class=\"line\">                    SEQ(stm2, LABEL(end))</span><br><span class=\"line\">                )</span><br><span class=\"line\">            )</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>Tiger 的逻辑运算符 &amp;(and) 和 |(or) 需要实现短路求值：只计算必要的操作数<br>\n每个 Cx 是一个 Label</p>\n<ul>\n<li>逻辑与 (a &amp; b) 的短路规则：\n<ul>\n<li>计算 a<br>\n - 若 a 为假，直接得到假结果（不计算 b）<br>\n- 若 a 为真，继续计算 b，最终结果即为 b 的值</li>\n</ul>\n</li>\n<li>逻辑或 (a | b) 的短路规则：<br>\n- 计算 a<br>\n - 若 a 为真，直接得到真结果（不计算 b）\n<ul>\n<li>若 a 为假，继续计算 b，最终结果即为 b 的值</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>循环语句</li>\n</ol>\n<figure class=\"highlight c\"><figcaption><span>tiger</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> a &gt; <span class=\"number\">0</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">a := a - <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>翻译成</p>\n<figure class=\"highlight c\"><figcaption><span>IR</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SEQ(LABEL test, </span><br><span class=\"line\">    SEQ(CJUMP(GT, TEMP a, CONST <span class=\"number\">0</span>, body, done), </span><br><span class=\"line\">        SEQ(LABEL body, </span><br><span class=\"line\">            SEQ(MOVE(TEMP a, BINOP(MINUS, TEMP a, CONST <span class=\"number\">1</span>)), </span><br><span class=\"line\">                SEQ(JUMP(NAME(test), [test]), </span><br><span class=\"line\">                    LABEL done)))))</span><br></pre></td></tr></table></figure>\n<p>break 翻译为直接跳转到 done<br>\nfor 循环我懒得写了，也是一个道理<br>\n和汇编差不多意思</p>\n<ol start=\"6\">\n<li>翻译函数</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>C</mi><mi>A</mi><mi>L</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>A</mi><mi>M</mi><mi>E</mi><mo stretchy=\"false\">(</mo><msub><mi>l</mi><mi>f</mi></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">[</mo><mi>s</mi><mi>l</mi><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">CALL(NAME(l_f), [sl, a_1, ..., a_n])\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>sl 是 static link。</p>\n<h3 id=\"translate-declaration\"><a class=\"markdownIt-Anchor\" href=\"#translate-declaration\">#</a> translate Declaration</h3>\n<ul>\n<li>Variable declaration</li>\n<li>Type declaration</li>\n<li>Function declaration</li>\n</ul>\n<ol>\n<li>翻译变量声明</li>\n</ol>\n<figure class=\"highlight c\"><figcaption><span>tiger</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let</span><br><span class=\"line\">    var x := <span class=\"number\">10</span></span><br><span class=\"line\">    var y := x + <span class=\"number\">5</span></span><br><span class=\"line\">in </span><br><span class=\"line\">    x + y</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><figcaption><span>IR</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ESEQ( </span><br><span class=\"line\">    SEQ( </span><br><span class=\"line\">        MOVE(MEM(+(FP, CONST(x_offset))), CONST(<span class=\"number\">10</span>)), </span><br><span class=\"line\">        MOVE(MEM(+(FP, CONST(y_offset))), </span><br><span class=\"line\">        BINOP(PLUS, </span><br><span class=\"line\">        MEM(+(FP, CONST(x_offset))), </span><br><span class=\"line\">        CONST(<span class=\"number\">5</span>))) </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    BINOP(PLUS, </span><br><span class=\"line\">    MEM(+(FP, CONST(x_offset))), </span><br><span class=\"line\">    MEM(+(FP, CONST(y_offset)))) </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>let body in e end 翻译成 ESEQ (body, e)<br>\n 变量定义翻译成 MEM (+(FP, CONST (offset)))<br>\n 初始化翻译成 MOVE (MEM (+(FP, CONST (offset))), CONST (value))</p>\n<ol start=\"2\">\n<li>\n<p>类型声明<br>\n No need to generate any IR tree code</p>\n</li>\n<li>\n<p>函数声明<br>\n– Prologue（序言）<br>\n– Body（函数体）<br>\n– Epilogue（尾声）</p>\n</li>\n</ol>\n<ul>\n<li>Prologue\n<ul>\n<li>pseudo-instructions to announce the beginning of a function</li>\n<li>定义函数标签用于跳转 / 调用</li>\n<li>修改栈指针（SP），为新栈帧分配空间，一般是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>P</mi><mo>:</mo><mo>=</mo><mi>S</mi><mi>P</mi><mo>−</mo><mi>f</mi><mi>r</mi><mi>a</mi><mi>m</mi><msub><mi>e</mi><mi>s</mi></msub><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">SP := SP - frame_size</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathnormal\">e</span></span></span></span></li>\n<li>保存被调用者需要保存的寄存器（callee-save），如 $s0-$s7；保存返回地址（RA）</li>\n<li>保存函数参数到栈中（尤其是传值调用时）；保存静态链（static link）</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "中间代码"
            ]
        },
        {
            "id": "http://example.com/2025/06/15/computer-science/compile-principles/ch6/",
            "url": "http://example.com/2025/06/15/computer-science/compile-principles/ch6/",
            "title": "活动记录",
            "date_published": "2025-06-14T16:00:00.000Z",
            "content_html": "<h1 id=\"activation-recordstack-frame\"><a class=\"markdownIt-Anchor\" href=\"#activation-recordstack-frame\">#</a> Activation Record/Stack Frame</h1>\n<p>函数的栈帧是栈上用来放函数的局部变量、参数、返回地址以及其他临时变量的区域<br>\n stack 一般从高地址向低地址，heap 从低地址向高地址<br>\n layout:<br>\n<img data-src=\"f1.jpg\" alt></p>\n<ul>\n<li>incoming arguments: 存储 caller 传递给 callee 的参数</li>\n<li>frame pointer: 帧指针，用来访问 incoming arguments，从低向高是 argument 1, argument 2, …</li>\n<li>local variables: 存储函数的局部变量（还有一些保存在寄存器里）</li>\n<li>return address: 存储需要返回 caller 的哪里；non-leaf 过程会把 return address 写入栈帧里面</li>\n<li>temporaries: 存储临时变量，复杂表达式拆出来的中间变量放的地方</li>\n<li>saved registers</li>\n<li>outgoing arguments: 存储当前函数要传递给别的函数的参数</li>\n<li>stack pointer: 栈指针，从低向高</li>\n</ul>\n<h2 id=\"函数调用流程\"><a class=\"markdownIt-Anchor\" href=\"#函数调用流程\">#</a> 函数调用流程：</h2>\n<ul>\n<li>g 调用 f 的时候</li>\n</ul>\n<ol>\n<li>进入 f 的时候，保存旧的 FP (g 的 FP)</li>\n<li>把 FP 设置为原来的 SP，把 SP = SP - frame size<br>\n<img data-src=\"f2.jpg\" alt></li>\n</ol>\n<ul>\n<li>f 返回的时候</li>\n</ul>\n<ol>\n<li>让 SP = FP (恢复 g 的 SP)</li>\n<li>从内存中读出 g 的 FP 恢复回去</li>\n</ol>\n<p>如果栈帧大小固定就只需要 FP 不需要 SP 了，因为 FP = SP + frame size</p>\n<h2 id=\"saved-register\"><a class=\"markdownIt-Anchor\" href=\"#saved-register\">#</a> saved register</h2>\n<p>函数 g 调用 f 的时候，用到了寄存器 r，调用 f 的时候要把 r 保存在 saved register 中，等调用结束再恢复回去</p>\n<ul>\n<li>caller-saved register: 函数调用的时候用到的寄存器，调用结束后可以恢复</li>\n<li>callee-saved register: 函数调用的时候用不到的寄存器，调用结束后不能恢复<br>\n<mark> FP 是由 callee 保存和恢复的</mark></li>\n</ul>\n<h2 id=\"参数传递\"><a class=\"markdownIt-Anchor\" href=\"#参数传递\">#</a> 参数传递</h2>\n<p>一般约定把前 k (4 or 6) 个参数放在寄存器传递，剩下的参数放在栈中传递<br>\n四种传参方法：</p>\n<ol>\n<li>不给叶过程 (leaf procedure) 分配栈帧<br>\n叶过程是指不调用其他过程的过程。在这种情况下，可以不为叶过程分配栈帧</li>\n<li>过程间寄存器分配 (interprocedural register allocation)<br>\n 这种方法需要先分析代码中全部的函数，然后再根据分析结果来分配寄存器。<br>\n假设有一个程序包含多个函数，通过全局分析发现某些变量在多个函数之间频繁使用，可以为其分配固定的寄存器，避免频繁的内存读写</li>\n<li>若变量 x 不再被使用，可以直接写其寄存器，不需要再保存 x 到栈帧中<br>\n当一个变量在当前作用域内不再被使用时，可以直接将其值写入寄存器，而无需保存到栈帧中</li>\n</ol>\n<figure class=\"highlight c\"><figcaption><span>example</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">exampleFunction</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> y = x * <span class=\"number\">2</span>;  <span class=\"comment\">// 使用x后，x不再被使用</span></span><br><span class=\"line\">    <span class=\"comment\">// 直接将y的值写入寄存器，无需保存x到栈帧中</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Result: %d\\n&quot;</span>, y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>寄存器窗口技术 (register windows)<br>\n 在每次函数调用时，系统会自动切换到一组新的寄存器，称为寄存器窗口。这样，每个函数都可以独立地使用自己的寄存器，而不会影响其他函数的寄存器状态。</li>\n</ol>\n<figure class=\"highlight c\"><figcaption><span>example</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">functionA</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用寄存器窗口A</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">functionB</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用寄存器窗口B</span></span><br><span class=\"line\">    functionA();  <span class=\"comment\">// 调用functionA时，自动切换到寄存器窗口A</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"frame-resident-variables\"><a class=\"markdownIt-Anchor\" href=\"#frame-resident-variables\">#</a> Frame-Resident Variables</h2>\n<p>什么情况下要把变量写入栈帧里面？、</p>\n<ol>\n<li>the varibles will be passed by reference 变量传地址 / 引用</li>\n<li>变量被嵌套在函数内部的函数访问（不绝对）</li>\n<li>变量太大了没法直接放寄存器</li>\n<li>变量是一个数组</li>\n<li>传递参数</li>\n<li>有太多局部变量和临时变量放不下了</li>\n</ol>\n<ul>\n<li>escape 逃逸：如果一个变量需要传地址 / 取地址 / 被过程内部嵌套的函数访问，那么这个变量就会逃逸。</li>\n</ul>\n<h2 id=\"static-links\"><a class=\"markdownIt-Anchor\" href=\"#static-links\">#</a> static links</h2>\n<p>在嵌套的函数声明中，内层函数是有可能用到外层函数的局部变量的。</p>\n<ul>\n<li>static links 是指向上一层嵌套层级的栈帧的指针。内层嵌套函数调用外层定义的变量的时候需要用到 static links，否则无法寻址。<br>\n<img data-src=\"f3.jpg\" alt><br>\n<img data-src=\"f4.jpg\" alt><br>\n只有调用自身的时候才传递自己的 static link 作为 static link，其他的都是把外层函数的 fp 作为 static link<br>\n 如果要访问外层变量，就顺着 static 一层一层查上去直到找到了为止。<br>\n其他访问方法：</li>\n<li>嵌套层次显示表 (display)<br>\n 建立一个全局数组，位置 i 包含一个指针，指向最近一次进入的，其静态嵌套深度是 i 的过程的栈帧<br>\n<img data-src=\"f5.jpg\" alt><br>\n先给它们标上嵌套深度<br>\n直接把链表变成数组了，需要用到一个变量，就查看当前变量的嵌套深度 i 然后直接找那个数组 i 位置的座位 fp 地址来找</li>\n<li>lambda lifting<br>\ng 调用 f 时，g 中每一个实际（或被嵌套在 f 内的任意函数）访问了的变量，都将作为额外的参数传递给 f<br>\n 把内部的函数，从内往外进行改写，改写函数的参数实现 lambda lifting<br>\n<img data-src=\"f6.jpg\" alt></li>\n</ul>\n<h2 id=\"tiger编译器的栈帧\"><a class=\"markdownIt-Anchor\" href=\"#tiger编译器的栈帧\">#</a> tiger 编译器的栈帧</h2>\n<p>tiger 不支持高阶函数<br>\n看不完了。。再说吧</p>\n",
            "tags": [
                "活动记录"
            ]
        },
        {
            "id": "http://example.com/2025/05/14/computer-science/computer-organization/ch2/",
            "url": "http://example.com/2025/05/14/computer-science/computer-organization/ch2/",
            "title": "Ch2",
            "date_published": "2025-05-13T16:00:00.000Z",
            "content_html": "<h1 id=\"ch2-数据的表示和运算\"><a class=\"markdownIt-Anchor\" href=\"#ch2-数据的表示和运算\">#</a> Ch2 数据的表示和运算</h1>\n<h2 id=\"21-进位计数制及其相互转换\"><a class=\"markdownIt-Anchor\" href=\"#21-进位计数制及其相互转换\">#</a> 2.1 进位计数制及其相互转换</h2>\n<h3 id=\"211\"><a class=\"markdownIt-Anchor\" href=\"#211\">#</a> 2.1.1</h3>\n<ul>\n<li>十进制二进制八进制十六进制转换\n<ul>\n<li>略</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"212-定点数的编码表示\"><a class=\"markdownIt-Anchor\" href=\"#212-定点数的编码表示\">#</a> 2.1.2 定点数的编码表示</h3>\n<ul>\n<li>定点数一般表示定点小数和定点整数，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1ucXE5Nml1cmlvNWprMWFjNDNnLnh4eA==\">小数是符号位.xxx</span>，整数是符号位 xxxx.0</li>\n<li>\n<blockquote>\n<p>感觉不是什么重要的东西，浮点数表示比较重要</p>\n</blockquote>\n</li>\n<li>原码，反码，补码\n<ul>\n<li>正数的原码反码补码相同</li>\n<li>原码表示的范围为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mi>n</mi></msup><mo>+</mo><mn>1</mn><mtext> </mtext><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-2^n+1 ~ 2^n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.747722em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.747722em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li>补码表示的范围为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mi>n</mi></msup><mtext> </mtext><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-2^n ~ 2^n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.747722em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li>负数的原码是 1 + 绝对值，反码是 1 + 绝对值取反，补码是反码 + 1</li>\n</ul>\n</li>\n<li>移码：用来表示浮点数的阶码，只能表示整数\n<ul>\n<li>一般用移码表示浮点数的阶码，用补码表示定点整数</li>\n</ul>\n</li>\n</ul>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>x</mi><msub><mo stretchy=\"false\">]</mo><mtext>移</mtext></msub><mo>=</mo><msup><mn>2</mn><mi>n</mi></msup><mo>+</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">[x]_移 = 2^n + x \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord cjk_fallback mtight\">移</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7977219999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span></p>\n<p>移码就是在真值 x 前面加一个 offset，比如取 offset 为 2^7，就在补码的第 8 位加上 1</p>\n<ul>\n<li>比如正数 10101，移码是 10010101，负数 - 10101 的补码是 11101011，所以移码是 01101011</li>\n<li>移码的作用是<mark>保持数据原有的大小顺序</mark>，移码大真值大，移码小真值小，所以可以直观地进行比较</li>\n</ul>\n<div class=\"note warning\">\n<p>相同位数的补码和移码表示具有相同的数据表示范围，区别只是表示方法不同<br>\n补码与移码只差一个符号位。同一个数的补码和移码表示，其数值部分相同，而符号位相反。</p>\n</div>\n<h3 id=\"213-整数表示\"><a class=\"markdownIt-Anchor\" href=\"#213-整数表示\">#</a> 2.1.3 整数表示</h3>\n<p>略</p>\n<h3 id=\"214\"><a class=\"markdownIt-Anchor\" href=\"#214\">#</a> 2.1.4</h3>\n<p>c 中的强制转换<br>\n short 转成 unsigned short 直接把二进制看成 unsigned short，比如 - 1 变成 65535<br>\nint 变成 short 直接截断<br>\n小字长转大字长不会改变值，如果是 unsigned 就会在前面补 0，如果是有符号数就在前面补符号位<br>\n short 转 unsigned int，先对 short 进行符号扩展到 int，再把它当做 unsigned int，如果是 unsigned short 转 int，就进行零扩展再看成 int……</p>\n<p>一些题目</p>\n<details class=\"info\"><summary>example</summary><div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"t1\">\n<p>若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>x</mi><msub><mo stretchy=\"false\">]</mo><mtext>补</mtext></msub><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mi>x</mi><mn>2</mn></msub><msub><mi>x</mi><mn>3</mn></msub><msub><mi>x</mi><mn>4</mn></msub><msub><mi>x</mi><mn>5</mn></msub><msub><mi>x</mi><mn>6</mn></msub></mrow><annotation encoding=\"application/x-tex\">[x]_补 = 1,x_1x_2x_3x_4x_5x_6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord cjk_fallback mtight\">补</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, 其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 取 0 或 1，若要 x&gt;-32，应当满足：<br>\nC. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为 1，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><msub><mi>x</mi><mn>6</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_2...x_6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 中至少有一位为 1<br>\n1100000 是 - 32，要比 - 32 大所以绝对值要小，所以数值部分要大，所以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 必须是 1, 后面随便有个 1 就行</p>\n</div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"t2\">\n<p>设 x 为正数，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>x</mi><msub><mo stretchy=\"false\">]</mo><mtext>补</mtext></msub><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mi>x</mi><mn>2</mn></msub><msub><mi>x</mi><mn>3</mn></msub><msub><mi>x</mi><mn>4</mn></msub><msub><mi>x</mi><mn>5</mn></msub></mrow><annotation encoding=\"application/x-tex\">[x]_补 = 1,x_1x_2x_3x_4x_5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord cjk_fallback mtight\">补</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, 若要 x&lt;-16，应当满足：<br>\nC. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 必须为 0，其它任意<br>\n 110000 是 - 16，要小于 - 16 所以数值部分绝对值要小，所以只要<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为 0 就比 - 16 小</p>\n</div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"t3\">\n<p>一个 8 位的二进制整数由 2 个 “0” 和 6 个 “1” 组成，采用补码或者移码表示，则<br>\n若采用移码表示，偏置值为 127，则此整数最小为 - 64（偏置为 127 需要在补码加上 1111111，<mark>要让数值最小，应该把 1 放低位</mark>，所以移码是 00111111，补码是 10111111 是 - 64）</p>\n<blockquote>\n<p>：前面说过，移码大真值大，移码小真值小，所以要让数值最小把 1 放低位就行了</p>\n</blockquote>\n<p>若采用补码表示，则此整数最小为 - 97（10011111=-97）</p>\n</div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"比较大小的方法\">\n<p>对于无符号数，数值大的数就大<br>\n对于有符号数的原码和反码比较大小：先看正负然后看数值，反码数值转成原码再比<br>\n对于补码比较大小，正数正常比较，负数数值部分越小，绝对值越大（前面 1 更多的数的绝对值越小，所以 11111111 是 - 1）</p>\n</div>\n</div></details>\n<h2 id=\"22-运算方法和运算电路\"><a class=\"markdownIt-Anchor\" href=\"#22-运算方法和运算电路\">#</a> 2.2 运算方法和运算电路</h2>\n<h3 id=\"221-基本运算部件\"><a class=\"markdownIt-Anchor\" href=\"#221-基本运算部件\">#</a> 2.2.1 基本运算部件</h3>\n<h4 id=\"一位全加器\"><a class=\"markdownIt-Anchor\" href=\"#一位全加器\">#</a> 一位全加器</h4>\n<ul>\n<li>用真值表实现的：进位 C，和 S</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">A</th>\n<th style=\"text-align:center\">B</th>\n<th style=\"text-align:center\">Cin</th>\n<th style=\"text-align:center\">Cout</th>\n<th style=\"text-align:center\">S</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>可以用卡诺图或者直接理解<br>\n<img data-src=\"img2.jpg\" alt></li>\n</ul>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi>S</mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mover accent=\"true\"><mi>A</mi><mo stretchy=\"true\">‾</mo></mover><mtext> </mtext><mover accent=\"true\"><mi>B</mi><mo stretchy=\"true\">‾</mo></mover><mtext> </mtext><msub><mi>C</mi><mi>i</mi></msub><mo>+</mo><mover accent=\"true\"><mi>A</mi><mo stretchy=\"true\">‾</mo></mover><mtext> </mtext><mi>B</mi><mtext> </mtext><mover accent=\"true\"><msub><mi>C</mi><mi>i</mi></msub><mo stretchy=\"true\">‾</mo></mover><mo>+</mo><mi>A</mi><mtext> </mtext><mover accent=\"true\"><mi>B</mi><mo stretchy=\"true\">‾</mo></mover><mtext> </mtext><mover accent=\"true\"><msub><mi>C</mi><mi>i</mi></msub><mo stretchy=\"true\">‾</mo></mover><mo>+</mo><mi>A</mi><mtext> </mtext><mi>B</mi><mtext> </mtext><msub><mi>C</mi><mi>i</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>A</mi><mo>⊕</mo><mi>B</mi><mo>⊕</mo><msub><mi>C</mi><mi>i</mi></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\nS &amp;= \\overline{A} \\, \\overline{B} \\, C_i + \\overline{A} \\, B \\, \\overline{C_i} + A \\, \\overline{B} \\, \\overline{C_i} + A \\, B \\, C_i \\\\\n  &amp;= A \\oplus B \\oplus C_i\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.04333em;vertical-align:-1.271665em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.771665em;\"><span style=\"top:-3.888335em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span><span style=\"top:-2.388335em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.271665em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.771665em;\"><span style=\"top:-3.888335em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.388335em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.271665em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>C</mi><mi>o</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>A</mi><mi>B</mi><mo>+</mo><mi>A</mi><mover accent=\"true\"><mi>B</mi><mo stretchy=\"true\">‾</mo></mover><msub><mi>C</mi><mi>i</mi></msub><mo>+</mo><mover accent=\"true\"><mi>A</mi><mo stretchy=\"true\">‾</mo></mover><mi>B</mi><msub><mi>C</mi><mi>i</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>A</mi><mi>B</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo>⊕</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><msub><mi>C</mi><mi>i</mi></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\nCo &amp;= AB + A \\overline{B} C_i + \\overline{A} B C_i \\\\\n   &amp;= AB + (A \\oplus B) \\cdot C_i\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.04333em;vertical-align:-1.271665em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.771665em;\"><span style=\"top:-3.888335em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">o</span></span></span><span style=\"top:-2.388335em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.271665em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.771665em;\"><span style=\"top:-3.888335em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.388335em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.271665em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h4 id=\"串行进位加法器\"><a class=\"markdownIt-Anchor\" href=\"#串行进位加法器\">#</a> 串行进位加法器</h4>\n<ul>\n<li>把 n 个一位全加器连起来<br>\n<img data-src=\"img3.png\" alt><br>\n Carry Propagation &amp; Delay</li>\n</ul>\n<h4 id=\"并行进位加法器\"><a class=\"markdownIt-Anchor\" href=\"#并行进位加法器\">#</a> 并行进位加法器</h4>\n<p>对 Cin 进行 look ahead</p>\n<p><img data-src=\"img4.png\" alt></p>\n<p>前面提到：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>C</mi><mi>o</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>A</mi><mi>B</mi><mo>+</mo><mi>A</mi><mover accent=\"true\"><mi>B</mi><mo stretchy=\"true\">‾</mo></mover><msub><mi>C</mi><mi>i</mi></msub><mo>+</mo><mover accent=\"true\"><mi>A</mi><mo stretchy=\"true\">‾</mo></mover><mi>B</mi><msub><mi>C</mi><mi>i</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>A</mi><mi>B</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo>⊕</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><msub><mi>C</mi><mi>i</mi></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\nCo &amp;= AB + A \\overline{B} C_i + \\overline{A} B C_i \\\\\n   &amp;= AB + (A \\oplus B) \\cdot C_i\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.04333em;vertical-align:-1.271665em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.771665em;\"><span style=\"top:-3.888335em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">o</span></span></span><span style=\"top:-2.388335em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.271665em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.771665em;\"><span style=\"top:-3.888335em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.388335em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.271665em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>下一位的 Cin 等于上一位的 Cout，所以可以进行 look ahead，这里让</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi>G</mi><mi>i</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><msub><mi>A</mi><mi>i</mi></msub><msub><mi>B</mi><mi>i</mi></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\nG_i &amp;= A_iB_i\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5000000000000002em;vertical-align:-0.5000000000000002em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1em;\"><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5000000000000002em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1em;\"><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5000000000000002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi>P</mi><mi>i</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><msub><mi>A</mi><mi>i</mi></msub><mo>⊕</mo><msub><mi>B</mi><mi>i</mi></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\nP_i &amp;= A_i \\oplus B_i\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5000000000000002em;vertical-align:-0.5000000000000002em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1em;\"><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5000000000000002em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1em;\"><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5000000000000002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>所以</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi>C</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><msub><mi>G</mi><mi>i</mi></msub><mo>+</mo><msub><mi>P</mi><mi>i</mi></msub><msub><mi>C</mi><mi>i</mi></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\nC_{i+1} &amp;= G_i + P_iC_i\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5000000000000002em;vertical-align:-0.5000000000000002em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1em;\"><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5000000000000002em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1em;\"><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5000000000000002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi>S</mi><mi>i</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><msub><mi>P</mi><mi>i</mi></msub><mo>⊕</mo><msub><mi>C</mi><mi>i</mi></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\nS_i &amp;= P_i \\oplus C_i\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5000000000000002em;vertical-align:-0.5000000000000002em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1em;\"><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5000000000000002em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1em;\"><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5000000000000002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>就能得到超前进位的效果</p>\n<h4 id=\"带标志加法器\"><a class=\"markdownIt-Anchor\" href=\"#带标志加法器\">#</a> 带标志加法器</h4>\n<p><img data-src=\"img5.jpg\" alt></p>\n<ul>\n<li>溢出标志 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mi>F</mi><mo>=</mo><msub><mi>C</mi><mi>n</mi></msub><mo>⊕</mo><msub><mi>C</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">OF = C_n  \\oplus C_{n-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span>，只能判断有符号数是否溢出<br>\n - 两个正数加起来变成负数或者两个负数加起来变成正数，就会溢出</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">A</th>\n<th style=\"text-align:center\">B</th>\n<th style=\"text-align:center\" n-1>C_</th>\n<th style=\"text-align:center\">F</th>\n<th style=\"text-align:center\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">C_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></th>\n<th style=\"text-align:center\">OF</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>第二行 A=0, B=0, F=1，正 + 正 = 负<br>\n第七行 A=0, B=1, F=0，负 + 负 = 正<br>\n所以 OF=1，表示有溢出<br>\n观察发现<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mi>F</mi><mo>=</mo><msub><mi>C</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>⊕</mo><msub><mi>C</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">OF = C_{n-1}  \\oplus C_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<ul>\n<li>符号标志 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>F</mi><mo>=</mo><msub><mi>F</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">SF = F_{n-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span>，输出的最高位决定有符号数的正负</li>\n<li><code>CF</code>  进位 / 借位标志：用于判断无符号数的加减运算是否溢出\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mi>F</mi><mo>=</mo><mi>C</mi><mi>i</mi><mi>n</mi><mo>⊕</mo><mi>C</mi><mi>o</mi><mi>u</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">CF = Cin \\oplus Cout</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span></span></span></span></li>\n<li>此处的 Cin 和 Cout 表示最开始的输入和最后的输出，还没理解</li>\n</ul>\n</li>\n<li><code>ZF</code>  零标志 当且仅当所有 F=0 时为 1，否则为 0（把所有 F 作或非）</li>\n<li><code>SF</code>  符号标志位，结果为负，即符号位为 1 时 SF=1，否则为 0<br>\n 具体可以看这篇：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dhYmJ5X19fXy9hcnRpY2xlL2RldGFpbHMvODA4MjU1NDk=\">https://blog.csdn.net/gabby____/article/details/80825549</span></li>\n</ul>\n<h4 id=\"alu\"><a class=\"markdownIt-Anchor\" href=\"#alu\">#</a> ALU</h4>\n<p>略</p>\n<h3 id=\"222-定点数的移位运算\"><a class=\"markdownIt-Anchor\" href=\"#222-定点数的移位运算\">#</a> 2.2.2 定点数的移位运算</h3>\n<ul>\n<li>左移一位 * 2，右移一位 / 2</li>\n<li>逻辑移位：移完直接补 0\n<ul>\n<li>无符号数若高位的 1 移出，则发生溢出</li>\n</ul>\n</li>\n<li>算数移位：有符号数右移时，补符号位，左移直接移，如果高位和符号位不同，则发生溢出</li>\n</ul>\n<h3 id=\"定点数的加减运算\"><a class=\"markdownIt-Anchor\" href=\"#定点数的加减运算\">#</a> 定点数的加减运算</h3>\n<p>补码相加减，略<br>\n主要是溢出判断：符号相同的数相加或者符号相异的数相减会发生溢出</p>\n<ul>\n<li>一位符号位（参考前面 OF）</li>\n<li>双符号位（模 4 补码）\n<ul>\n<li>符号位左边那一位表示正确的符号，0 为正，1 为负；右边那一位如果和左边的相同，如 &quot;00” 表示正且无溢出，&quot;11&quot; 表示负且无溢出。如果右边那一位与左边那一位不一样，则表示有溢出</li>\n<li>溢出逻辑判断：若 V 为 0 则无溢出，V 为 1 则溢出</li>\n<li><mark>存储的时候，模 4 补码只需要一位符号位</mark>，因为任何一个正确的数值它的两个符号位是相同的。它只是把两个模 4 补码的数送往 ALU 进行运算的时候，把符号位同时送入 ALU 的双符号位中，即<mark>只在 ALU 中采用双符号位</mark></li>\n</ul>\n</li>\n</ul>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>V</mi><mo>=</mo><msub><mi>S</mi><mrow><mi>s</mi><mn>1</mn></mrow></msub><mo>⊕</mo><msub><mi>S</mi><mrow><mi>s</mi><mn>2</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">V = S_{s1} \\oplus S_{s2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>例子看这篇写的挺清楚：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bl9ib3lfYm95X3N1bi9hcnRpY2xlL2RldGFpbHMvODc5MTcwMjA=\">https://blog.csdn.net/sun_boy_boy_sun/article/details/87917020</span><br>\n 总之两位不同则有溢出</p>\n<h3 id=\"定点数的乘除运算\"><a class=\"markdownIt-Anchor\" href=\"#定点数的乘除运算\">#</a> 定点数的乘除运算</h3>\n<p>略，列竖式即可</p>\n<h3 id=\"浮点数的表示与运算\"><a class=\"markdownIt-Anchor\" href=\"#浮点数的表示与运算\">#</a> 浮点数的表示与运算</h3>\n<ol>\n<li>浮点数的表示格式</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>N</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>s</mi></msup><mo>⋅</mo><mi>M</mi><mo>⋅</mo><msup><mi>R</mi><mi>E</mi></msup></mrow><annotation encoding=\"application/x-tex\">N = (-1)^s \\cdot M \\cdot R^E\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8913309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>s 符号，M 尾数，E 阶码，R 基数<br>\n 2. 浮点数的表示范围<br>\n范围关于原点对称，运算结果大于最大正数时成为正上溢，小遇绝对值最大负数是成为负上溢，统称上溢。运算结果在 0 - 最小整数之间成为正下溢，负数同理，统称下溢（原因是精度不够）<br>\n3. 浮点数的规格化<br>\n化成<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.</mn><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>⋅</mo><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">1.xxxxx... \\cdot 2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> 的形式<br>\n 4. IEEE754<br>\n 符号，阶码，尾数<br>\n 32 位单精度：1 8 23，偏置为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>7</mn></msup><mo>−</mo><mn>1</mn><mo>=</mo><mn>127</mn></mrow><annotation encoding=\"application/x-tex\">2^7-1=127</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">7</span></span></span></span>，真值为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>s</mi></msup><mo>⋅</mo><msup><mn>2</mn><mrow><mi>e</mi><mo>−</mo><mn>127</mn></mrow></msup><mo>⋅</mo><mo stretchy=\"false\">(</mo><mn>1.</mn><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(-1)^s \\cdot 2^{e-127} \\cdot (1.M)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span><br>\n 单精度表示的最小值为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mrow><mn>1</mn><mo>−</mo><mn>127</mn></mrow></msup><mo>⋅</mo><mo stretchy=\"false\">(</mo><mn>1.000...</mn><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>126</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">1 \\cdot 2^{1-127} \\cdot (1.000...) = 2^{-126}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span></span>，最大值为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mrow><mn>254</mn><mo>−</mo><mn>127</mn></mrow></msup><mo>⋅</mo><mo stretchy=\"false\">(</mo><mn>1.111...</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>23</mn></mrow></msup><mo stretchy=\"false\">)</mo><mo>⋅</mo><msup><mn>2</mn><mn>127</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\cdot 2^{254-127} \\cdot (1.111...) = (2 - 2^{-23}) \\cdot 2^{127}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">5</span><span class=\"mord mtight\">4</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span></span>}<br>\n 64 位双精度：1 11 52，偏置为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>10</mn></msup><mo>−</mo><mn>1</mn><mo>=</mo><mn>1023</mn></mrow><annotation encoding=\"application/x-tex\">2^{10}-1=1023</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">3</span></span></span></span>，真值为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>s</mi></msup><mo>⋅</mo><msup><mn>2</mn><mrow><mi>e</mi><mo>−</mo><mn>1023</mn></mrow></msup><mo>⋅</mo><mo stretchy=\"false\">(</mo><mn>1.</mn><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(-1)^s \\cdot 2^{e-1023} \\cdot (1.M)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span>，最大值为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mrow><mn>2046</mn><mo>−</mo><mn>1023</mn></mrow></msup><mo>⋅</mo><mo stretchy=\"false\">(</mo><mn>1.111...</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>52</mn></mrow></msup><mo stretchy=\"false\">)</mo><mo>⋅</mo><msup><mn>2</mn><mn>1023</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\cdot 2^{2046-1023} \\cdot (1.111...) = (2 - 2^{-52}) \\cdot 2^{1023}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">4</span><span class=\"mord mtight\">6</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">5</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span><br>\n 阶码全为 0 或者全为 1 有特殊意义<br>\n<img data-src=\"f1.jpg\" alt><br>\n阶码全 1 尾数不全 0 表示无穷大<br>\n阶码全 1 尾数全 0 表示 NaN<br>\n 阶码全 0 尾数不全 0 表示非规格化数，隐藏位为 0（精度不够表示，需要特殊处理）</p>\n<h3 id=\"浮点数的加减运算\"><a class=\"markdownIt-Anchor\" href=\"#浮点数的加减运算\">#</a> 浮点数的加减运算</h3>\n<ol>\n<li>对阶</li>\n<li>尾数相加减</li>\n<li>尾数规格化，修改阶数</li>\n<li>舍入</li>\n</ol>\n<ul>\n<li>就近舍入：舍入为最近的可表示数，当结果是两个可表示数的中间时，选择结果为偶数</li>\n<li>正向舍入：朝数轴正无穷方向舍入，取右边最近的可表示数</li>\n<li>负向舍入：和正向相反</li>\n<li>截断法：直接截取所需位数，是一种趋向原点的舍入</li>\n</ul>\n<ol start=\"5\">\n<li>溢出判断<br>\n对阶码加减时要判断是否溢出</li>\n</ol>\n",
            "tags": [
                "数据的表示与运算"
            ]
        },
        {
            "id": "http://example.com/2025/05/13/computer-science/computer-organization/ch1/",
            "url": "http://example.com/2025/05/13/computer-science/computer-organization/ch1/",
            "title": "Ch1",
            "date_published": "2025-05-12T16:00:00.000Z",
            "content_html": "<blockquote>\n<p>计组考研复习笔记，参考资料：王道，zju 数逻 / 计组 / 体系课程 ppt<br>\n 怕学完忘了写个笔记保留一下顺便加深印象 x<br>\n 王道书写得好烂、、</p>\n</blockquote>\n<h1 id=\"ch1-计算机系统概述\"><a class=\"markdownIt-Anchor\" href=\"#ch1-计算机系统概述\">#</a> Ch1 计算机系统概述</h1>\n<h2 id=\"11-计算机发展历程\"><a class=\"markdownIt-Anchor\" href=\"#11-计算机发展历程\">#</a> 1.1 计算机发展历程</h2>\n<ul>\n<li>四代计算机：电子管 -&gt; 晶体管 -&gt; 集成电路 -&gt; 超大规模集成电路</li>\n<li>摩尔定律：集成电路上可以容纳的晶体管数目在大约每经过 18 个月到 24 个月便会增加一倍</li>\n</ul>\n<h2 id=\"12-计算机系统层次结构\"><a class=\"markdownIt-Anchor\" href=\"#12-计算机系统层次结构\">#</a> 1.2 计算机系统层次结构</h2>\n<ul>\n<li>计算机系统：硬件 + 软件</li>\n<li>对于某一功能，既能用软件实现又能用硬件实现，称为软、硬件在逻辑功能上是等价的</li>\n</ul>\n<h3 id=\"122-硬件\"><a class=\"markdownIt-Anchor\" href=\"#122-硬件\">#</a> 1.2.2 硬件</h3>\n<ul>\n<li>冯・诺依曼机的特点：\n<ul>\n<li>采用 “存储程序” 的工作方式</li>\n<li>冯・诺依曼计算机由五大部件组成：运算器、控制器、存储器、输入设备和输出设备</li>\n<li>指令和数据以同等地位存储在存储器中</li>\n<li>指令和数据均用二进制代码表示</li>\n<li>指令由操作码和地址码组成</li>\n<li><img data-src=\"img1.png\" alt></li>\n</ul>\n</li>\n<li>计算机的功能部件：\n<ul>\n<li>输入设备</li>\n<li>输出设备</li>\n<li>存储器：主存 + 外存\n<ul>\n<li>CPU 能直接访问的是主存</li>\n<li><img data-src=\"img2.jpg\" alt></li>\n<li>MAR 位 10 位则最多有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>10</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{10}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span> 个存储单元</li>\n<li>在现代计算机中 MAR 和 MDR 存在 CPU 中</li>\n</ul>\n</li>\n<li>运算器：进行算术运算和逻辑运算\n<ul>\n<li>核心是 ALU：通用寄存器有<mark>累加器 (ACC)，乘商寄存器 (MQ)，操作数寄存器 (X)</mark>，变址寄存器 (IX)，基址寄存器 (BR) 等，前三个必备</li>\n<li>程序状态寄存器 (PSW)</li>\n<li><img data-src=\"img3.jpg\" alt></li>\n</ul>\n</li>\n<li>控制器：由 PC, IR 和 control unit 组成\n<ul>\n<li>: RISCV 控制器</li>\n<li><img data-src=\"img4.png\" alt></li>\n</ul>\n</li>\n<li>CPU 由运算器、控制器和 cache 组成</li>\n<li>总线有地址总线、数据总线、控制总线</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"123-软件\"><a class=\"markdownIt-Anchor\" href=\"#123-软件\">#</a> 1.2.3 软件</h3>\n<ul>\n<li>组成：系统软件 (OS, DBMS, 编译器，…)+ 应用软件</li>\n<li>语言：汇编语言、机器语言、高级语言\n<ul>\n<li>汇编器：把汇编语言翻译成机器语言</li>\n<li>编译器：把高级语言翻译成汇编语言或机器语言</li>\n<li>解释器：把高级语言翻译成<mark>机器语言</mark> (比如 python)<details class=\"info\"><summary>example</summary><div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"题目\">\n<p>🌰<br>\n将高级语言源程序转换为机器级目标代码文件的程序是 []。<br>\nA. 汇编程序<br>\n B. 链接程序<br>\n C. 编译程序<br>\n D. 解释程序</p>\n</div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"答案\">\n<p>C. 编译程序<br>\n因为解释程序不生成目标代码，编译器可以把高级语言翻译成汇编语言或者直接翻译成机器语言</p>\n</div>\n</div></details>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"124-计算机系统的层次结构\"><a class=\"markdownIt-Anchor\" href=\"#124-计算机系统的层次结构\">#</a> 1.2.4 计算机系统的层次结构</h3>\n<ul>\n<li>看看就好</li>\n<li><img data-src=\"img5.png\" alt></li>\n</ul>\n<h3 id=\"125-计算机系统的工作原理\"><a class=\"markdownIt-Anchor\" href=\"#125-计算机系统的工作原理\">#</a> 1.2.5 计算机系统的工作原理</h3>\n<ul>\n<li>程序执行前，需要把所含的指令和数据一起放入主存中</li>\n<li>五个阶段：IF-ID-EX-MEM-WB</li>\n<li>c 程序怎么变成可执行文件的：直接看图\n<ul>\n<li><img data-src=\"img6.png\" alt></li>\n<li>汇编器把指令打包成可重定位目标代码文件：使用相对地址和符号引用来表示各个代码段之间的关系（代码段、数据段、符号表、重定位表…）使得代码或数据能在内存中任意位置加载或运行</li>\n</ul>\n</li>\n<li>指令执行过程：后面几章会具体讲</li>\n</ul>\n<h2 id=\"13-计算机的性能指标\"><a class=\"markdownIt-Anchor\" href=\"#13-计算机的性能指标\">#</a> 1.3 计算机的性能指标</h2>\n<h3 id=\"131-主要性能指标\"><a class=\"markdownIt-Anchor\" href=\"#131-主要性能指标\">#</a> 1.3.1 主要性能指标</h3>\n<ul>\n<li>字长：一次整数运算所能处理的二进制数据的位数<div class=\"note info\">\n<p>机器字长、指令字长和存储字长</p>\n</div>\n</li>\n<li>带宽 <code>bandwidth</code> ：总线一次能并行传送信息的位数</li>\n<li>主存容量</li>\n<li>运算速度\n<ul>\n<li>吞吐量 <code>throughput</code> ：一次输入数据所对应的输出数据个数</li>\n<li>响应时间 <code>Response (Execution) time</code></li>\n<li>主频</li>\n<li>clock cycle time( = 1/CPU frequency)</li>\n<li>MIPS: million instructions per second</li>\n<li>FLOPS: floating-point operations per second</li>\n</ul>\n<blockquote>\n<p>CPI: clock cycles per instruction (IPC: CPI 的倒数)</p>\n</blockquote>\n</li>\n</ul>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mtext>CPU execution time</mtext></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mtext>CPU clock cycles</mtext><mo>×</mo><mtext>Clock cycle time</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mtext>CPU clock cycles</mtext><mtext>Clock rate</mtext></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\"> \\begin{aligned}\n    \\text{CPU execution time} &amp;= \\text{CPU clock cycles} \\times \\text{Clock cycle time} \\\\\n    &amp;= \\frac{\\text{CPU clock cycles}}{\\text{Clock rate}}\n\\end{aligned}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.8574399999999995em;vertical-align:-1.6787199999999993em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.17872em;\"><span style=\"top:-4.71016em;\"><span class=\"pstrut\" style=\"height:3.3714399999999998em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">CPU execution time</span></span></span></span><span style=\"top:-2.6787200000000007em;\"><span class=\"pstrut\" style=\"height:3.3714399999999998em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6787199999999993em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.17872em;\"><span style=\"top:-4.71016em;\"><span class=\"pstrut\" style=\"height:3.3714399999999998em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord text\"><span class=\"mord\">CPU clock cycles</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord text\"><span class=\"mord\">Clock cycle time</span></span></span></span><span style=\"top:-2.6787200000000007em;\"><span class=\"pstrut\" style=\"height:3.3714399999999998em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">Clock rate</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">CPU clock cycles</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6787199999999993em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mtext>CPU clock cycles</mtext></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mtext>Instructions count</mtext><mo>×</mo><mtext>Average cycles per instruction</mtext></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n    \\text{CPU clock cycles} &amp;= \\text{Instructions count} \\times \\text{Average cycles per instruction}\n\\end{aligned}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5000000000000002em;vertical-align:-0.5000000000000002em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1em;\"><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">CPU clock cycles</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5000000000000002em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1em;\"><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord text\"><span class=\"mord\">Instructions count</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord text\"><span class=\"mord\">Average cycles per instruction</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5000000000000002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mtext>CPU execution time</mtext></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mtext>CPU clock cycles</mtext><mo>×</mo><mtext>Clock cycle time</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mtext>CPU clock cycles</mtext><mtext>Clock rate</mtext></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n    \\text{CPU execution time} &amp;= \\text{CPU clock cycles} \\times \\text{Clock cycle time} \\\\\n    &amp;= \\frac{\\text{CPU clock cycles}}{\\text{Clock rate}}\n\\end{aligned} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.8574399999999995em;vertical-align:-1.6787199999999993em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.17872em;\"><span style=\"top:-4.71016em;\"><span class=\"pstrut\" style=\"height:3.3714399999999998em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">CPU execution time</span></span></span></span><span style=\"top:-2.6787200000000007em;\"><span class=\"pstrut\" style=\"height:3.3714399999999998em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6787199999999993em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.17872em;\"><span style=\"top:-4.71016em;\"><span class=\"pstrut\" style=\"height:3.3714399999999998em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord text\"><span class=\"mord\">CPU clock cycles</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord text\"><span class=\"mord\">Clock cycle time</span></span></span></span><span style=\"top:-2.6787200000000007em;\"><span class=\"pstrut\" style=\"height:3.3714399999999998em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">Clock rate</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">CPU clock cycles</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6787199999999993em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mtext>performance</mtext></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mtext>CPU execution time</mtext></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\"> \\begin{aligned}\n     \\text{performance} &amp;= \\frac{1}{\\text{CPU execution time}}\n\\end{aligned}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.30744em;vertical-align:-0.90372em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4037200000000003em;\"><span style=\"top:-3.4037200000000003em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">performance</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90372em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4037200000000003em;\"><span style=\"top:-3.4037200000000003em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">CPU execution time</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90372em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>“Processor X is n times fast than Y” is</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mtext>n</mtext></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mtext>CPU execution time of Y</mtext><mtext>CPU execution time of X</mtext></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\"> \\begin{aligned}\n    \\text{n} &amp;= \\frac{\\text{CPU execution time of Y}}{\\text{CPU execution time of X}}\n\\end{aligned}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.35744em;vertical-align:-0.9287200000000001em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4287199999999998em;\"><span style=\"top:-3.4287199999999998em;\"><span class=\"pstrut\" style=\"height:3.3714399999999998em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9287200000000001em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4287199999999998em;\"><span style=\"top:-3.4287199999999998em;\"><span class=\"pstrut\" style=\"height:3.3714399999999998em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">CPU execution time of X</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">CPU execution time of Y</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9287200000000001em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>IPS: instructions per second</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left right\" columnspacing=\"0em 1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mtext>IPS</mtext></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mtext>CPU frequency</mtext><mtext>CPI</mtext></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mtext>CPU clock cycles</mtext><mo>×</mo><mtext>CPU execution time</mtext></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\"> \\begin{aligned}\n    \\text{IPS} &amp;= \\frac{\\text{CPU frequency}}{\\text{CPI}}\n        &amp;= \\frac{1}{\\text{CPU clock cycles} \\times \\text{CPU execution time}}\n\\end{aligned}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.5518799999999997em;vertical-align:-1.02594em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5259399999999996em;\"><span style=\"top:-3.5259399999999994em;\"><span class=\"pstrut\" style=\"height:3.3714399999999998em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">IPS</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.02594em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5259399999999996em;\"><span style=\"top:-3.5259399999999994em;\"><span class=\"pstrut\" style=\"height:3.3714399999999998em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">CPI</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">CPU frequency</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.02594em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5259399999999996em;\"><span style=\"top:-3.5259399999999994em;\"><span class=\"pstrut\" style=\"height:3.3714399999999998em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">CPU clock cycles</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord text\"><span class=\"mord\">CPU execution time</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804400000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.02594em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li>其他公式，，，用到再说吧</li>\n<li>兼容：软件或硬件的通用性</li>\n</ul>\n<blockquote>\n<p>在用于科学计算的计算机中，标志系统性能最有用的参数是浮点数运算相关的</p>\n<ul>\n<li>MFLOPS 10^6</li>\n<li>GFLOPS 10^9</li>\n<li>TFLOPS 10^12</li>\n<li>PFLOPS 10^15</li>\n<li>EFLOPS 10^18</li>\n<li>ZFLOPS 10^21</li>\n</ul>\n</blockquote>\n",
            "tags": [
                "计算机组成"
            ]
        },
        {
            "id": "http://example.com/2025/05/13/computer-science/computer-network/ch1/",
            "url": "http://example.com/2025/05/13/computer-science/computer-network/ch1/",
            "title": "Ch1",
            "date_published": "2025-05-12T16:00:00.000Z",
            "content_html": "",
            "tags": [
                "计算机网络"
            ]
        },
        {
            "id": "http://example.com/2025/03/30/computer-science/compile-principles/ch5/",
            "url": "http://example.com/2025/03/30/computer-science/compile-principles/ch5/",
            "title": "语义分析",
            "date_published": "2025-03-29T16:00:00.000Z",
            "content_html": "<h1 id=\"语义分析\"><a class=\"markdownIt-Anchor\" href=\"#语义分析\">#</a> 语义分析</h1>\n<blockquote>\n<p>绑定，类型检查</p>\n</blockquote>\n<h2 id=\"symbol-table\"><a class=\"markdownIt-Anchor\" href=\"#symbol-table\">#</a> symbol table</h2>\n<ul>\n<li>Imperative style: 命令式风格\n<ul>\n<li>Modify <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>σ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\sigma_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> until it becomes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>σ</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\sigma_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</li>\n<li>While <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>σ</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\sigma_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> exists, we cannot look things up in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>σ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\sigma_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</li>\n<li>When done with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>σ</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\sigma_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, can undo the modification to get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>σ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\sigma_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> back again.</li>\n</ul>\n</li>\n</ul>\n<details class=\"info\"><summary>方法：</summary><div>\n<p>Hashing<br>\n 插入：找到哈希值然后插入链表的表头<br>\n查找：找到哈希值然后遍历链表<br>\n pop: 找到哈希值然后把链表表头删掉  table [hash (key)] = table [hash (key)].next</p>\n</div></details>\n<ul>\n<li>Functional style: 函数式风格\n<ul>\n<li>To keep <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>σ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\sigma_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> in pristine condition while creating create <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>σ</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\sigma_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>σ</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\sigma_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<details class=\"info\"><summary>方法：</summary><div>\n<p>如果依旧用哈希，每次要复制一遍哈希表，开销太大了，不现实<br>\n<img data-src=\"f2.jpg\" alt><br>\n所以用 persistent BST<br>\n<img data-src=\"f1.jpg\" alt><br>\n 先遍历二叉搜索树找到要插入的位置，然后对于插入节点把它从根节点到它全都复制一遍然后插入</p>\n</div></details>\n<h2 id=\"tiger编译器中的符号\"><a class=\"markdownIt-Anchor\" href=\"#tiger编译器中的符号\">#</a> Tiger 编译器中的符号</h2>\n<p>对链表进行 lookup 的时候每一次都要进行 string compare，开销是很大的。所以使用新的数据结构将符号对象关联到一个整数上，因此对于任意给定字符串的所有不同出现，都会被转换成同一个符号对象。<br>\nSymbol 的实现：通过 hash 函数将字符串映射到一个 symbol 对象上<br>\n SymbolTable 的实现：beginScope () 和 endScope () 的实现</p>\n<ul>\n<li>beginScope ()：添加一个 marksym</li>\n<li>endScope ()：从符号表中不断 pop 直到 marksym</li>\n<li>引入一个 辅助栈 (Auxiliary stack) 来维护\n<ul>\n<li>符号入栈时，会将 binding 联动地插入对应 bucket 的链表头</li>\n<li>弹出栈顶符号时，对应 bucket 的链表头也会联动地被移除</li>\n<li>beginScope: 压入一个特殊标记到辅助栈中</li>\n<li>endScope: 一直弹出符号直到弹出了一个特殊标记</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类型检查\"><a class=\"markdownIt-Anchor\" href=\"#类型检查\">#</a> 类型检查</h2>\n<h3 id=\"哪些类型表达式是合法非法的\"><a class=\"markdownIt-Anchor\" href=\"#哪些类型表达式是合法非法的\">#</a> 哪些类型表达式是合法 / 非法的</h3>\n<p>Tiger 的类型系统：</p>\n<ul>\n<li>两种 primitive type: int, string</li>\n<li>两种 constructed type: records, arrays</li>\n</ul>\n<p>文法</p>\n<ol>\n<li>typec → type type-id = ty\n<ul>\n<li>这表示定义一个类型。 <code>typec</code>  是一个类型定义的开始，它由关键字  <code>type</code> 、一个类型标识符  <code>type-id</code>  和一个等号  <code>=</code>  后跟类型定义  <code>ty</code>  组成。</li>\n</ul>\n</li>\n<li>ty → type-id\n<ul>\n<li>这表示类型  <code>ty</code>  可以直接是一个已定义的类型标识符  <code>type-id</code> 。</li>\n</ul>\n</li>\n<li>ty → ‘{’ tyfields ‘}’\n<ul>\n<li>这表示类型  <code>ty</code>  可以是一个记录（record），由花括号  <code>&#123;&#125;</code>  包围的一系列字段  <code>tyfields</code>  定义。</li>\n</ul>\n</li>\n<li>ty → array of type-id\n<ul>\n<li>这表示类型  <code>ty</code>  可以是一个数组，由关键字  <code>array of</code>  后跟一个类型标识符  <code>type-id</code>  定义。</li>\n</ul>\n</li>\n<li>tyfields → ε\n<ul>\n<li>这表示字段列表  <code>tyfields</code>  可以为空（ε 表示空串）。</li>\n</ul>\n</li>\n<li , id:type-id>tyfields → id: type-id\n<ul>\n<li>这表示字段列表  <code>tyfields</code>  由一个或多个字段组成，每个字段由一个标识符  <code>id</code>  和冒号  <code>:</code>  后跟一个类型标识符  <code>type-id</code>  定义，多个字段之间用逗号  <code>,</code>  分隔。</li>\n</ul>\n</li>\n</ol>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let type a = &#123;x: int; y: int&#125;</span><br><span class=\"line\">    type b = a</span><br><span class=\"line\">    var i : a := ...</span><br><span class=\"line\">    var j : b := ...</span><br><span class=\"line\">in i := j</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h3 id=\"类型等价\"><a class=\"markdownIt-Anchor\" href=\"#类型等价\">#</a> 类型等价</h3>\n<ul>\n<li>Name equivalence (NE): 必须声明是同一个类型才是同一类型</li>\n<li>Structure equivalence (SE): 如果两个类型的结构完全相同（即它们由相同的构造器以相同的顺序组成），那么它们就被认为是等价的，即使它们的名字不同</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type A = &#123;x: int; y: int&#125;</span><br><span class=\"line\">type B = &#123;x: int; y: int&#125; </span><br></pre></td></tr></table></figure>\n<p>Tiger 用的是 NE<br>\n 在 Tiger 编程语言中，存在两个独立的命名空间：一个用于类型（Types），另一个用于函数和变量（Functions and Variables）。所以类型和函数 / 变量可以存在相同的名字，但是函数和变量不能存在相同的名字。<br>\n所以需要两个 env</p>\n<ul>\n<li>Type env\n<ul>\n<li>symbol -&gt; Ty_ty</li>\n</ul>\n</li>\n<li>Value env\n<ul>\n<li>对于变量，symbol -&gt; Ty_ty</li>\n<li ty_tylist formals, ty_ty results>对于函数，symbol -&gt; struct</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"类型检查的rule\"><a class=\"markdownIt-Anchor\" href=\"#类型检查的rule\">#</a> 类型检查的 rule</h3>\n<p>类型检查分为两部分:</p>\n<ul>\n<li>Type-checking expressions: 对于每个表达式，根据当前的 Type 和 Value 环境来确定其类型，并检查是否符合语言的类型规则</li>\n<li>Type-checking declarations: 在 Tiger 语言中声明只可能在 let 语句中出现<br>\n好像就是讲了 transExp, transDec, transVar，AST 递归检查每个节点的类型然后一层一层往上传再检查</li>\n</ul>\n",
            "tags": [
                "语义分析"
            ]
        },
        {
            "id": "http://example.com/2025/03/29/computer-science/compile-principles/ch4/",
            "url": "http://example.com/2025/03/29/computer-science/compile-principles/ch4/",
            "title": "抽象语法",
            "date_published": "2025-03-28T16:00:00.000Z",
            "content_html": "",
            "tags": [
                "抽象语法"
            ]
        },
        {
            "id": "http://example.com/2025/03/23/computer-science/compile-principles/ch3/",
            "url": "http://example.com/2025/03/23/computer-science/compile-principles/ch3/",
            "title": "语法分析",
            "date_published": "2025-03-22T16:00:00.000Z",
            "content_html": "<h1 id=\"语法分析\"><a class=\"markdownIt-Anchor\" href=\"#语法分析\">#</a> 语法分析</h1>\n<h2 id=\"cfg\"><a class=\"markdownIt-Anchor\" href=\"#cfg\">#</a> CFG</h2>\n<p>见计算理论<br>\n Parse tree</p>\n<h3 id=\"ambiguous-grammars\"><a class=\"markdownIt-Anchor\" href=\"#ambiguous-grammars\">#</a> Ambiguous grammars</h3>\n<h2 id><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h2>\n",
            "tags": [
                "语法分析"
            ]
        },
        {
            "id": "http://example.com/2025/03/22/computer-science/compile-principles/ch2/",
            "url": "http://example.com/2025/03/22/computer-science/compile-principles/ch2/",
            "title": "词法分析",
            "date_published": "2025-03-21T16:00:00.000Z",
            "content_html": "<h1 id=\"ch2-词法分析\"><a class=\"markdownIt-Anchor\" href=\"#ch2-词法分析\">#</a> Ch2 词法分析</h1>\n<blockquote>\n<p>把 input 分解成一个个 token</p>\n</blockquote>\n<h2 id=\"regular-expression\"><a class=\"markdownIt-Anchor\" href=\"#regular-expression\">#</a> Regular Expression</h2>\n<ul>\n<li>Language: a set of strings</li>\n<li>String: a finite sequence of characters</li>\n</ul>\n<blockquote>\n<p>Regular Experssion Notations:<br>\n<img data-src=\"image-1.png\" alt></p>\n</blockquote>\n<div class=\"note info\">\n<p>DFA, NFA 相关 见计算理论</p>\n</div>\n<h2 id=\"re转nfa\"><a class=\"markdownIt-Anchor\" href=\"#re转nfa\">#</a> RE 转 NFA</h2>\n<div class=\"note info 方法：\">\n<ol>\n<li>画出初始态和终态</li>\n<li>分裂规则：<br>\n<img data-src=\"image-2.jpg\" alt></li>\n</ol>\n</div>\n<h2 id=\"nfa转dfa\"><a class=\"markdownIt-Anchor\" href=\"#nfa转dfa\">#</a> NFA 转 DFA</h2>\n<p>从初始状态的闭包开始，每次根据 \\epsilon 和当前状态的闭包，得到下一个状态的闭包，直到得到终态的闭包。</p>\n<details class=\"info\"><summary>example</summary><div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"题目\">\n<p>🌰<br>\n把这个 NFA 转成等价的 DFA<br>\n<img data-src=\"image-3.png\" alt></p>\n</div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"答案\">\n<p>初态的闭包是 1、2、6，1、2、6 经过 a 可以转移到 3、7，因为有 \\epsilon 转移，所以 3、7 的闭包是 3、4、7、8，同理 3、4、7、8 经过 b 可以到 5、8，由于 8 是终态，把所有包含 8 的圆圈画成终态的环。<br>\n<img data-src=\"image-4.png\" alt></p>\n</div>\n</div></details>\n<h2 id=\"最小化dfa\"><a class=\"markdownIt-Anchor\" href=\"#最小化dfa\">#</a> 最小化 DFA</h2>\n<p>含义：</p>\n<ol>\n<li>没有多余状态：</li>\n</ol>\n<ul>\n<li>从这个状态没有通路到达终态</li>\n<li>从开始状态出发，任何输入串也不能到达的那个状态</li>\n</ul>\n<ol start=\"2\">\n<li>没有两个状态相互等价</li>\n</ol>\n<div class=\"note info 方法：\">\n<ol>\n<li>多余状态直接删除<br>\n<img data-src=\"image-5.png\" alt></li>\n<li>合并等价状态</li>\n</ol>\n<ul>\n<li>将状态分为终态和非终态两个集合</li>\n<li>遍历每个集合，如果经过转换到达的状态都在当前集合里，则不用分，否则划分子集，直到划分不了为止</li>\n<li>🌰 例子</li>\n<li><img data-src=\"image-6.png\" alt></li>\n</ul>\n</div>\n",
            "tags": [
                "词法分析"
            ]
        },
        {
            "id": "http://example.com/2025/03/21/computer-science/compile-principles/ch1/",
            "url": "http://example.com/2025/03/21/computer-science/compile-principles/ch1/",
            "title": "Introduction",
            "date_published": "2025-03-20T16:00:00.000Z",
            "content_html": "<blockquote>\n<p>ZJU 2025 春夏编译原理 学习笔记</p>\n<p>主要基于虎书（<em>Modern Compiler Implementation in C</em>, Andrew W. Appel）和好多老师的 ppt（ldm, yps），还有 lzx 的智云</p>\n</blockquote>\n<h1 id=\"ch1-introduction\"><a class=\"markdownIt-Anchor\" href=\"#ch1-introduction\">#</a> CH1 Introduction</h1>\n<ul>\n<li>Two Important Concepts\n<ul>\n<li>Phases（阶段）</li>\n<li>Interfaces（接口）</li>\n</ul>\n</li>\n</ul>\n<p>方框里的是 phase，中间的是 interface<br>\n<img data-src=\"image.png\" alt><br>\n 各个阶段的描述<br>\n<img data-src=\"image-1.png\" alt><img data-src=\"image-2.png\" alt></p>\n",
            "tags": [
                "编译原理"
            ]
        }
    ]
}