<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title> • Posts by &#34;计算机科学&#34; category</title>
        <link>http://example.com</link>
        <description></description>
        <language>en</language>
        <pubDate>Wed, 14 May 2025 00:00:00 +0800</pubDate>
        <lastBuildDate>Wed, 14 May 2025 00:00:00 +0800</lastBuildDate>
        <category>人工智能</category>
        <category>�˹�����</category>
        <category>编译原理</category>
        <category>词法分析</category>
        <category>抽象语法</category>
        <category>语义分析</category>
        <category>语法分析</category>
        <category>计算机组成</category>
        <category>数据的表示与运算</category>
        <category>计算机网络</category>
        <item>
            <guid isPermalink="true">http://example.com/2025/05/14/computer-science/computer-organization/ch2/</guid>
            <title>Ch2</title>
            <link>http://example.com/2025/05/14/computer-science/computer-organization/ch2/</link>
            <category>数据的表示与运算</category>
            <pubDate>Wed, 14 May 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Ch2-数据的表示和运算&#34;&gt;&lt;a href=&#34;#Ch2-数据的表示和运算&#34; class=&#34;headerlink&#34; title=&#34;Ch2 数据的表示和运算&#34;&gt;&lt;/a&gt;Ch2 数据的表示和运算&lt;/h1&gt;&lt;h2 id=&#34;2-1-进位计数制及其相互转换&#34;&gt;&lt;a href=&#34;#2-1-进位计数制及其相互转换&#34; class=&#34;headerlink&#34; title=&#34;2.1 进位计数制及其相互转换&#34;&gt;&lt;/a&gt;2.1 进位计数制及其相互转换&lt;/h2&gt;&lt;h3 id=&#34;2-1-1&#34;&gt;&lt;a href=&#34;#2-1-1&#34; class=&#34;headerlink&#34; title=&#34;2.1.1&#34;&gt;&lt;/a&gt;2.1.1&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;十进制二进制八进制十六进制转换&lt;ul&gt;
&lt;li&gt;略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-1-2-定点数的编码表示&#34;&gt;&lt;a href=&#34;#2-1-2-定点数的编码表示&#34; class=&#34;headerlink&#34; title=&#34;2.1.2 定点数的编码表示&#34;&gt;&lt;/a&gt;2.1.2 定点数的编码表示&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定点百世一般表示定点小数和定点整数，小数是符号位.xxx，整数是符号位xxxx.0&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;感觉不是什么重要的东西，浮点数表示比较重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;原码，反码，补码&lt;ul&gt;
&lt;li&gt;正数的原码反码补码相同&lt;/li&gt;
&lt;li&gt;原码表示的范围为 $-2^n+1 ~ 2^n-1$&lt;/li&gt;
&lt;li&gt;补码表示的范围为 $-2^n ~ 2^n-1$&lt;/li&gt;
&lt;li&gt;负数的原码是1+绝对值，反码是1+绝对值取反，补码是反码+1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移码：用来表示浮点数的阶码，只能表示整数&lt;ul&gt;
&lt;li&gt;一般用移码表示浮点数的阶码，用补码表示定点整数&lt;br&gt;$$ [x]_移 &amp;#x3D; 2^n + x $$&lt;br&gt;移码就是在真值x前面加一个offset，比如取offset为2^7，就在补码的第8位加上1&lt;/li&gt;
&lt;li&gt;比如正数10101，移码是10010101，负数-10101的补码是11101011，所以移码是01101011&lt;/li&gt;
&lt;li&gt;移码的作用是&amp;#x3D;&amp;#x3D;保持数据原有的大小顺序&amp;#x3D;&amp;#x3D;，移码大真值大，移码小真值小，所以可以直观地进行比较&lt;br&gt;:::warning&lt;br&gt;相同位数的补码和移码表示具有相同的数据表示范围，区别只是表示方法不同&lt;br&gt;补码与移码只差一个符号位。同一个数的补码和移码表示，其数值部分相同，而符号位相反。&lt;br&gt;:::&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-1-3-整数表示&#34;&gt;&lt;a href=&#34;#2-1-3-整数表示&#34; class=&#34;headerlink&#34; title=&#34;2.1.3 整数表示&#34;&gt;&lt;/a&gt;2.1.3 整数表示&lt;/h3&gt;&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&#34;2-1-4&#34;&gt;&lt;a href=&#34;#2-1-4&#34; class=&#34;headerlink&#34; title=&#34;2.1.4&#34;&gt;&lt;/a&gt;2.1.4&lt;/h3&gt;&lt;p&gt;c中的强制转换&lt;br&gt;short转成unsigned short直接把二进制看成unsigned short，比如-1变成65535&lt;br&gt;int变成short直接截断&lt;br&gt;小字长转大字长不会改变值，如果是unsigned就会在前面补0，如果是有符号数就在前面补符号位&lt;br&gt;short转unsigned int，先对short进行符号扩展到int，再把它当做unsigned int，如果是unsigned short转int，就进行零扩展再看成int……&lt;/p&gt;
&lt;p&gt;一些题目&lt;br&gt;+++info example&lt;br&gt;;;;id3 t1&lt;br&gt;若$[x]_补 &amp;#x3D; 1,x_1x_2x_3x_4x_5x_6$,其中$x_i$取0或1，若要x&amp;gt;-32，应当满足：&lt;br&gt;C. $x_1$为1，$x_2…x_6$中至少有一位为1&lt;br&gt;1100000是-32，要比-32大所以绝对值要小，所以数值部分要大，所以$x_1$必须是1,后面随便有个1就行&lt;br&gt;;;;&lt;br&gt;;;;id3 t2&lt;br&gt;设x为正数，$[x]_补 &amp;#x3D; 1,x_1x_2x_3x_4x_5$,若要x&amp;lt;-16，应当满足：&lt;br&gt;C. $x_1$必须为0，其它任意&lt;br&gt;110000是-16，要小于-16所以数值部分绝对值要小，所以只要$x_1$为0就比-16小&lt;br&gt;;;;&lt;br&gt;;;;id3 t3&lt;br&gt;一个8位的二进制整数由2个“0”和6个“1”组成，采用补码或者移码表示，则&lt;br&gt;若采用移码表示，偏置值为127，则此整数最小为-64（偏置为127需要在补码加上1111111，&amp;#x3D;&amp;#x3D;要让数值最小，应该把1放低位&amp;#x3D;&amp;#x3D;，所以移码是00111111，补码是10111111是-64）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;：前面说过，移码大真值大，移码小真值小，所以要让数值最小把1放低位就行了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;若采用补码表示，则此整数最小为-97（10011111&amp;#x3D;-97）&lt;br&gt;;;;&lt;br&gt;;;;id3 比较大小的方法&lt;br&gt;对于无符号数，数值大的数就大&lt;br&gt;对于有符号数的原码和反码比较大小：先看正负然后看数值，反码数值转成原码再比&lt;br&gt;对于补码比较大小，正数正常比较，负数数值部分越小，绝对值越大（前面1更多的数的绝对值越小，所以11111111是-1）&lt;br&gt;;;;&lt;br&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;2-2-运算方法和运算电路&#34;&gt;&lt;a href=&#34;#2-2-运算方法和运算电路&#34; class=&#34;headerlink&#34; title=&#34;2.2 运算方法和运算电路&#34;&gt;&lt;/a&gt;2.2 运算方法和运算电路&lt;/h2&gt;&lt;h3 id=&#34;2-2-1-基本运算部件&#34;&gt;&lt;a href=&#34;#2-2-1-基本运算部件&#34; class=&#34;headerlink&#34; title=&#34;2.2.1 基本运算部件&#34;&gt;&lt;/a&gt;2.2.1 基本运算部件&lt;/h3&gt;&lt;h4 id=&#34;一位全加器&#34;&gt;&lt;a href=&#34;#一位全加器&#34; class=&#34;headerlink&#34; title=&#34;一位全加器&#34;&gt;&lt;/a&gt;一位全加器&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;用真值表实现的：进位C，和S&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;A&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;B&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Cin&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Cout&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;S&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;可以用卡诺图或者直接理解(王道不写还好我本来就会，差点忘了。。。)&lt;br&gt;&lt;img data-src=&#34;/img2.jpg&#34;&gt;&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;S &amp;amp;&amp;#x3D; \overline{A} , \overline{B} , C_i + \overline{A} , B , \overline{C_i} + A , \overline{B} , \overline{C_i} + A , B , C_i \&lt;br&gt;&amp;amp;&amp;#x3D; A \oplus B \oplus C_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;Co &amp;amp;&amp;#x3D; AB + A \overline{B} C_i + \overline{A} B C_i \&lt;br&gt;&amp;amp;&amp;#x3D; AB + (A \oplus B) \cdot C_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;串行进位加法器&#34;&gt;&lt;a href=&#34;#串行进位加法器&#34; class=&#34;headerlink&#34; title=&#34;串行进位加法器&#34;&gt;&lt;/a&gt;串行进位加法器&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;把n个一位全加器连起来&lt;br&gt;&lt;img data-src=&#34;/img3.png&#34;&gt;&lt;br&gt;Carry Propagation &amp;amp; Delay&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;并行进位加法器&#34;&gt;&lt;a href=&#34;#并行进位加法器&#34; class=&#34;headerlink&#34; title=&#34;并行进位加法器&#34;&gt;&lt;/a&gt;并行进位加法器&lt;/h4&gt;&lt;p&gt;对Cin进行look ahead&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;前面提到：&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;Co &amp;amp;&amp;#x3D; AB + A \overline{B} C_i + \overline{A} B C_i \&lt;br&gt;   &amp;amp;&amp;#x3D; AB + (A \oplus B) \cdot C_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;下一位的Cin等于上一位的Cout，所以可以进行look ahead，这里让&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;G_i &amp;amp;&amp;#x3D; A_iB_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;P_i &amp;amp;&amp;#x3D; A_i \oplus B_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;所以&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;C_{i+1} &amp;amp;&amp;#x3D; G_i + P_iC_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;S_i &amp;amp;&amp;#x3D; P_i \oplus C_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;就能得到超前进位的效果&lt;/p&gt;
&lt;h4 id=&#34;带标志加法器&#34;&gt;&lt;a href=&#34;#带标志加法器&#34; class=&#34;headerlink&#34; title=&#34;带标志加法器&#34;&gt;&lt;/a&gt;带标志加法器&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;/img5.jpg&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;溢出标志 $OF &amp;#x3D; C_n  \oplus C_{n-1}$，只能判断有符号数是否溢出&lt;br&gt;-两个正数加起来变成负数或者两个负数加起来变成正数，就会溢出&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;A&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;B&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;$C_{n-1}$&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;F&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;$C_n$&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;OF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;第二行A&amp;#x3D;0, B&amp;#x3D;0, F&amp;#x3D;1，正+正&amp;#x3D;负&lt;br&gt;  第七行A&amp;#x3D;0, B&amp;#x3D;1, F&amp;#x3D;0，负+负&amp;#x3D;正&lt;br&gt;  所以OF&amp;#x3D;1，表示有溢出&lt;br&gt;  观察发现$OF &amp;#x3D; C_{n-1}  \oplus C_n$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;符号标志 $SF &amp;#x3D; F_{n-1}$，输出的最高位决定有符号数的正负&lt;/li&gt;
&lt;li&gt;进位&amp;#x2F;借位标志：用于判断无符号数的加减运算是否溢出&lt;ul&gt;
&lt;li&gt;$CF &amp;#x3D; Cin \oplus Cout$&lt;/li&gt;
&lt;li&gt;此处的Cin和Cout表示最开始的输入和最后的输出，还没理解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;零标志 当且仅当所有F&amp;#x3D;0时为1，否则为0（把所有F作或非）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ALU&#34;&gt;&lt;a href=&#34;#ALU&#34; class=&#34;headerlink&#34; title=&#34;ALU&#34;&gt;&lt;/a&gt;ALU&lt;/h4&gt;&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&#34;2-2-2-定点数的移位运算&#34;&gt;&lt;a href=&#34;#2-2-2-定点数的移位运算&#34; class=&#34;headerlink&#34; title=&#34;2.2.2 定点数的移位运算&#34;&gt;&lt;/a&gt;2.2.2 定点数的移位运算&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;左移一位*2，右移一位&amp;#x2F;2&lt;/li&gt;
&lt;li&gt;逻辑移位：移完直接补0&lt;ul&gt;
&lt;li&gt;无符号数若高位的1移出，则发生溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;算数移位：有符号数右移时，补符号位，左移如果高位和符号位不同，则发生溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定点数的加减运算&#34;&gt;&lt;a href=&#34;#定点数的加减运算&#34; class=&#34;headerlink&#34; title=&#34;定点数的加减运算&#34;&gt;&lt;/a&gt;定点数的加减运算&lt;/h3&gt;&lt;p&gt;补码相加减，略&lt;br&gt;主要是溢出判断：符号相同的数相加或者符号相异的数相减会发生溢出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一位符号位（参考前面OF）&lt;/li&gt;
&lt;li&gt;双符号位（模4补码）&lt;ul&gt;
&lt;li&gt;符号位左边那一位表示正确的符号，0为正，1为负；右边那一位如果和左边的相同，如 “00”表示正且无溢出，”11”表示负且无溢出。如果右边那一位与左边那一位不一样，则表示有溢出&lt;/li&gt;
&lt;li&gt;溢出逻辑判断：若V为0则无溢出，V为1则溢出&lt;br&gt;$$&lt;br&gt;V &amp;#x3D; S_{s1} \oplus S_{s2}&lt;br&gt;$$&lt;br&gt;例子看这篇写的挺清楚：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bl9ib3lfYm95X3N1bi9hcnRpY2xlL2RldGFpbHMvODc5MTcwMjA=&#34;&gt;https://blog.csdn.net/sun_boy_boy_sun/article/details/87917020&lt;/span&gt;&lt;br&gt;总之两位不同则有溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定点数的乘除运算&#34;&gt;&lt;a href=&#34;#定点数的乘除运算&#34; class=&#34;headerlink&#34; title=&#34;定点数的乘除运算&#34;&gt;&lt;/a&gt;定点数的乘除运算&lt;/h3&gt;&lt;p&gt;略，列竖式即可&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/05/13/computer-science/computer-organization/ch1/</guid>
            <title>Ch1</title>
            <link>http://example.com/2025/05/13/computer-science/computer-organization/ch1/</link>
            <category>计算机组成</category>
            <pubDate>Tue, 13 May 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;王道计组考研复习笔记&lt;br&gt;怕学完忘了写个笔记保留一下顺便加深印象x&lt;br&gt;王道书写得好烂、、&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Ch1-计算机系统概述&#34;&gt;&lt;a href=&#34;#Ch1-计算机系统概述&#34; class=&#34;headerlink&#34; title=&#34;Ch1 计算机系统概述&#34;&gt;&lt;/a&gt;Ch1 计算机系统概述&lt;/h1&gt;&lt;h2 id=&#34;1-1-计算机发展历程&#34;&gt;&lt;a href=&#34;#1-1-计算机发展历程&#34; class=&#34;headerlink&#34; title=&#34;1.1 计算机发展历程&#34;&gt;&lt;/a&gt;1.1 计算机发展历程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;四代计算机：电子管-&amp;gt;晶体管-&amp;gt;集成电路-&amp;gt;超大规模集成电路&lt;/li&gt;
&lt;li&gt;摩尔定律：集成电路上可以容纳的晶体管数目在大约每经过18个月到24个月便会增加一倍&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-2-计算机系统层次结构&#34;&gt;&lt;a href=&#34;#1-2-计算机系统层次结构&#34; class=&#34;headerlink&#34; title=&#34;1.2 计算机系统层次结构&#34;&gt;&lt;/a&gt;1.2 计算机系统层次结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;计算机系统：硬件+软件&lt;/li&gt;
&lt;li&gt;对于某一功能，既能用软件实现又能用硬件实现，称为软、硬件在逻辑功能上是等价的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-2-硬件&#34;&gt;&lt;a href=&#34;#1-2-2-硬件&#34; class=&#34;headerlink&#34; title=&#34;1.2.2 硬件&#34;&gt;&lt;/a&gt;1.2.2 硬件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;冯·诺依曼机的特点：&lt;ul&gt;
&lt;li&gt;采用“存储程序”的工作方式&lt;/li&gt;
&lt;li&gt;冯·诺依曼计算机由五大部件组成：运算器、控制器、存储器、输入设备和输出设备&lt;/li&gt;
&lt;li&gt;指令和数据以同等地位存储在存储器中&lt;/li&gt;
&lt;li&gt;指令和数据均用二进制代码表示&lt;/li&gt;
&lt;li&gt;指令由操作码和地址码组成&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img1.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;计算机的功能部件：&lt;ul&gt;
&lt;li&gt;输入设备&lt;/li&gt;
&lt;li&gt;输出设备&lt;/li&gt;
&lt;li&gt;存储器：主存+外存&lt;ul&gt;
&lt;li&gt;CPU能直接访问的是主存&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img2.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;MAR位10位则最多有$2^{10}$个存储单元&lt;/li&gt;
&lt;li&gt;在现代计算机中MAR和MDR存在CPU中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;运算器：进行算术运算和逻辑运算&lt;ul&gt;
&lt;li&gt;核心是ALU：通用寄存器有&amp;#x3D;&amp;#x3D;累加器(ACC)，乘商寄存器(MQ)，操作数寄存器(X)&amp;#x3D;&amp;#x3D;，变址寄存器(IX)，基址寄存器(BR)等，前三个必备&lt;/li&gt;
&lt;li&gt;程序状态寄存器(PSW)&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img3.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制器：由PC, IR和control unit组成&lt;ul&gt;
&lt;li&gt;: RISCV控制器&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img4.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU由运算器、控制器和cache组成&lt;/li&gt;
&lt;li&gt;总线有地址总线、数据总线、控制总线&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-3-软件&#34;&gt;&lt;a href=&#34;#1-2-3-软件&#34; class=&#34;headerlink&#34; title=&#34;1.2.3 软件&#34;&gt;&lt;/a&gt;1.2.3 软件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;组成：系统软件(OS, DBMS, 编译器, …)+应用软件&lt;/li&gt;
&lt;li&gt;语言：汇编语言、机器语言、高级语言&lt;ul&gt;
&lt;li&gt;汇编器：把汇编语言翻译成机器语言&lt;/li&gt;
&lt;li&gt;编译器：把高级语言翻译成汇编语言或机器语言&lt;/li&gt;
&lt;li&gt;解释器：把高级语言翻译成&amp;#x3D;&amp;#x3D;机器语言&amp;#x3D;&amp;#x3D;(比如python)&lt;br&gt;  +++info example&lt;br&gt;  ;;;id3 题目&lt;br&gt;  :chestnut:&lt;br&gt;  将高级语言源程序转换为机器级目标代码文件的程序是 []。&lt;br&gt;  A. 汇编程序&lt;br&gt;  B. 链接程序&lt;br&gt;  C. 编译程序&lt;br&gt;  D. 解释程序&lt;br&gt;  ;;;&lt;br&gt;  ;;;id3 答案&lt;br&gt;  C. 编译程序&lt;br&gt;  因为解释程序不生成目标代码，编译器可以把高级语言翻译成汇编语言或者直接翻译成机器语言&lt;br&gt;  ;;;&lt;br&gt;  +++&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-4-计算机系统的层次结构&#34;&gt;&lt;a href=&#34;#1-2-4-计算机系统的层次结构&#34; class=&#34;headerlink&#34; title=&#34;1.2.4 计算机系统的层次结构&#34;&gt;&lt;/a&gt;1.2.4 计算机系统的层次结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;看看就好&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img5.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-5-计算机系统的工作原理&#34;&gt;&lt;a href=&#34;#1-2-5-计算机系统的工作原理&#34; class=&#34;headerlink&#34; title=&#34;1.2.5 计算机系统的工作原理&#34;&gt;&lt;/a&gt;1.2.5 计算机系统的工作原理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;程序执行前，需要把所含的指令和数据一起放入主存中&lt;/li&gt;
&lt;li&gt;五个阶段：IF-ID-EX-MEM-WB&lt;/li&gt;
&lt;li&gt;c程序怎么变成可执行文件的：直接看图&lt;ul&gt;
&lt;li&gt;&lt;img data-src=&#34;/img6.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;汇编器把指令打包成可重定位目标代码文件：使用相对地址和符号引用来表示各个代码段之间的关系（代码段、数据段、符号表、重定位表…）使得代码或数据能在内存中任意位置加载或运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指令执行过程：后面几章会具体讲&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-3-计算机的性能指标&#34;&gt;&lt;a href=&#34;#1-3-计算机的性能指标&#34; class=&#34;headerlink&#34; title=&#34;1.3 计算机的性能指标&#34;&gt;&lt;/a&gt;1.3 计算机的性能指标&lt;/h2&gt;&lt;h3 id=&#34;1-3-1-主要性能指标&#34;&gt;&lt;a href=&#34;#1-3-1-主要性能指标&#34; class=&#34;headerlink&#34; title=&#34;1.3.1 主要性能指标&#34;&gt;&lt;/a&gt;1.3.1 主要性能指标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;字长：一次整数运算所能处理的二进制数据的位数&lt;br&gt; :::info&lt;br&gt; 机器字长、指令字长和存储字长&lt;br&gt; :::&lt;/li&gt;
&lt;li&gt;带宽&lt;code&gt;bandwidth&lt;/code&gt;：总线一次能并行传送信息的位数&lt;/li&gt;
&lt;li&gt;主存容量&lt;/li&gt;
&lt;li&gt;运算速度&lt;ul&gt;
&lt;li&gt;吞吐量&lt;code&gt;throughput&lt;/code&gt;：一次输入数据所对应的输出数据个数&lt;/li&gt;
&lt;li&gt;响应时间&lt;code&gt;Response (Execution) time&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;主频&lt;/li&gt;
&lt;li&gt;clock cycle time( &amp;#x3D; 1&amp;#x2F;CPU frequency)&lt;/li&gt;
&lt;li&gt;MIPS: million instructions per second&lt;/li&gt;
&lt;li&gt;FLOPS: floating-point operations per second&lt;blockquote&gt;
&lt;p&gt;CPI: clock cycles per instruction(IPC: CPI的倒数)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ \begin{aligned}&lt;br&gt;    \text{CPU execution time} &amp;amp;&amp;#x3D; \text{CPU clock cycles} \times \text{Clock cycle time} \&lt;br&gt;    &amp;amp;&amp;#x3D; \frac{\text{CPU clock cycles}}{\text{Clock rate}}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;    \text{CPU clock cycles} &amp;amp;&amp;#x3D; \text{Instructions count} \times \text{Average cycles per instruction}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;    \text{CPU execution time} &amp;amp;&amp;#x3D; \text{CPU clock cycles} \times \text{Clock cycle time} \&lt;br&gt;    &amp;amp;&amp;#x3D; \frac{\text{CPU clock cycles}}{\text{Clock rate}}&lt;br&gt;\end{aligned} $$&lt;/p&gt;
&lt;p&gt;$$ \begin{aligned}&lt;br&gt;     \text{performance} &amp;amp;&amp;#x3D; \frac{1}{\text{CPU execution time}}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;“Processor X is n times fast than Y” is&lt;br&gt;$$ \begin{aligned}&lt;br&gt;    \text{n} &amp;amp;&amp;#x3D; \frac{\text{CPU execution time of Y}}{\text{CPU execution time of X}}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;IPS: instructions per second&lt;br&gt;$$ \begin{aligned}&lt;br&gt;    \text{IPS} &amp;amp;&amp;#x3D; \frac{\text{CPU frequency}}{\text{CPI}}&lt;br&gt;        &amp;amp;&amp;#x3D; \frac{1}{\text{CPU clock cycles} \times \text{CPU execution time}}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其他公式，，，用到再说吧&lt;/li&gt;
&lt;li&gt;兼容：软件或硬件的通用性&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在用于科学计算的计算机中，标志系统性能最有用的参数是浮点数运算相关的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MFLOPS 10^6&lt;/li&gt;
&lt;li&gt;GFLOPS 10^9&lt;/li&gt;
&lt;li&gt;TFLOPS 10^12&lt;/li&gt;
&lt;li&gt;PFLOPS 10^15&lt;/li&gt;
&lt;li&gt;EFLOPS 10^18&lt;/li&gt;
&lt;li&gt;ZFLOPS 10^21&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/05/13/computer-science/computer-network/ch1/</guid>
            <title>Ch1</title>
            <link>http://example.com/2025/05/13/computer-science/computer-network/ch1/</link>
            <category>计算机网络</category>
            <pubDate>Tue, 13 May 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/03/29/computer-science/compile-principles/ch4/</guid>
            <title>Ch4</title>
            <link>http://example.com/2025/03/29/computer-science/compile-principles/ch4/</link>
            <category>抽象语法</category>
            <pubDate>Sat, 29 Mar 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/03/23/computer-science/compile-principles/ch3/</guid>
            <title>Ch3</title>
            <link>http://example.com/2025/03/23/computer-science/compile-principles/ch3/</link>
            <category>语法分析</category>
            <pubDate>Sun, 23 Mar 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;语法分析&#34;&gt;&lt;a href=&#34;#语法分析&#34; class=&#34;headerlink&#34; title=&#34;语法分析&#34;&gt;&lt;/a&gt;语法分析&lt;/h1&gt;&lt;h2 id=&#34;CFG&#34;&gt;&lt;a href=&#34;#CFG&#34; class=&#34;headerlink&#34; title=&#34;CFG&#34;&gt;&lt;/a&gt;CFG&lt;/h2&gt;&lt;p&gt;见计算理论&lt;br&gt;Parse tree&lt;/p&gt;
&lt;h3 id=&#34;Ambiguous-grammars&#34;&gt;&lt;a href=&#34;#Ambiguous-grammars&#34; class=&#34;headerlink&#34; title=&#34;Ambiguous grammars&#34;&gt;&lt;/a&gt;Ambiguous grammars&lt;/h3&gt;&lt;h2 id&gt;&lt;a href=&#34;#&#34; class=&#34;headerlink&#34; title&gt;&lt;/a&gt;&lt;/h2&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/03/22/computer-science/compile-principles/ch2/</guid>
            <title>Ch2</title>
            <link>http://example.com/2025/03/22/computer-science/compile-principles/ch2/</link>
            <category>词法分析</category>
            <pubDate>Sat, 22 Mar 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Ch2-词法分析&#34;&gt;&lt;a href=&#34;#Ch2-词法分析&#34; class=&#34;headerlink&#34; title=&#34;Ch2 词法分析&#34;&gt;&lt;/a&gt;Ch2 词法分析&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;把input分解成一个个token&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;Regular-Expression&#34;&gt;&lt;a href=&#34;#Regular-Expression&#34; class=&#34;headerlink&#34; title=&#34;Regular Expression&#34;&gt;&lt;/a&gt;Regular Expression&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Language: a set of strings&lt;/li&gt;
&lt;li&gt;String: a finite sequence of characters&lt;blockquote&gt;
&lt;p&gt;Regular Experssion Notations:&lt;br&gt;&lt;img data-src=&#34;/image-1.png&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::info&lt;br&gt;DFA, NFA相关 见计算理论&lt;br&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;RE转NFA&#34;&gt;&lt;a href=&#34;#RE转NFA&#34; class=&#34;headerlink&#34; title=&#34;RE转NFA&#34;&gt;&lt;/a&gt;RE转NFA&lt;/h2&gt;&lt;p&gt;:::info 方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;画出初始态和终态&lt;/li&gt;
&lt;li&gt;分裂规则：&lt;br&gt;&lt;img data-src=&#34;/image-2.jpg&#34;&gt;&lt;br&gt;:::&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;NFA转DFA&#34;&gt;&lt;a href=&#34;#NFA转DFA&#34; class=&#34;headerlink&#34; title=&#34;NFA转DFA&#34;&gt;&lt;/a&gt;NFA转DFA&lt;/h2&gt;&lt;p&gt;从初始状态的闭包开始，每次根据\epsilon和当前状态的闭包，得到下一个状态的闭包，直到得到终态的闭包。&lt;/p&gt;
&lt;p&gt;+++info example&lt;br&gt;;;;id3 题目&lt;br&gt;:chestnut:&lt;br&gt;把这个NFA转成等价的DFA&lt;br&gt;&lt;img data-src=&#34;/image-3.png&#34;&gt;&lt;br&gt;;;;&lt;br&gt;;;;id3 答案&lt;br&gt;初态的闭包是1、2、6，1、2、6经过a可以转移到3、7，因为有\epsilon转移，所以3、7的闭包是3、4、7、8，同理3、4、7、8经过b可以到5、8，由于8是终态，把所有包含8的圆圈画成终态的环。&lt;br&gt;&lt;img data-src=&#34;/image-4.png&#34;&gt;&lt;br&gt;;;;&lt;br&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;最小化DFA&#34;&gt;&lt;a href=&#34;#最小化DFA&#34; class=&#34;headerlink&#34; title=&#34;最小化DFA&#34;&gt;&lt;/a&gt;最小化DFA&lt;/h2&gt;&lt;p&gt;含义：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没有多余状态：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;从这个状态没有通路到达终态&lt;/li&gt;
&lt;li&gt;从开始状态出发，任何输入串也不能到达的那个状态&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;没有两个状态相互等价&lt;br&gt;:::info 方法：&lt;/li&gt;
&lt;li&gt;多余状态直接删除&lt;br&gt;&lt;img data-src=&#34;/image-5.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;合并等价状态&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;将状态分为终态和非终态两个集合&lt;/li&gt;
&lt;li&gt;遍历每个集合，如果经过转换到达的状态都在当前集合里，则不用分，否则划分子集，直到划分不了为止&lt;/li&gt;
&lt;li&gt;:chestnut: 例子&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/image-6.png&#34;&gt;&lt;br&gt;:::&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/03/21/computer-science/compile-principles/ch1/</guid>
            <title>Ch1</title>
            <link>http://example.com/2025/03/21/computer-science/compile-principles/ch1/</link>
            <category>编译原理</category>
            <pubDate>Fri, 21 Mar 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;ZJU 2025春夏编译原理 学习笔记&lt;/p&gt;
&lt;p&gt;主要基于虎书（&lt;em&gt;Modern Compiler Implementation in C&lt;/em&gt;, Andrew W. Appel）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;CH1-Introduction&#34;&gt;&lt;a href=&#34;#CH1-Introduction&#34; class=&#34;headerlink&#34; title=&#34;CH1 Introduction&#34;&gt;&lt;/a&gt;CH1 Introduction&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Two Important Concepts&lt;ul&gt;
&lt;li&gt;Phases（阶段）&lt;/li&gt;
&lt;li&gt;Interfaces（接口）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方框里的是phase，中间的是interface&lt;br&gt;&lt;img data-src=&#34;/image.png&#34;&gt;&lt;br&gt;各个阶段的描述&lt;br&gt;&lt;img data-src=&#34;/image-1.png&#34;&gt;&lt;img data-src=&#34;/image-2.png&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/03/21/computer-science/compile-principles/ch5/</guid>
            <title>Ch5</title>
            <link>http://example.com/2025/03/21/computer-science/compile-principles/ch5/</link>
            <category>语义分析</category>
            <pubDate>Fri, 21 Mar 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;语义分析&#34;&gt;&lt;a href=&#34;#语义分析&#34; class=&#34;headerlink&#34; title=&#34;语义分析&#34;&gt;&lt;/a&gt;语义分析&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;绑定，类型检查&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;symbol-table&#34;&gt;&lt;a href=&#34;#symbol-table&#34; class=&#34;headerlink&#34; title=&#34;symbol table&#34;&gt;&lt;/a&gt;symbol table&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Functional style: 函数式风格&lt;ul&gt;
&lt;li&gt;To keep $\sigma_1$ in pristine condition while creating create $\sigma_2$ and $\sigma_3$&lt;br&gt;:::info 方法：&lt;br&gt;persistent BST&lt;br&gt;:::&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Imperative style: 命令式风格&lt;ul&gt;
&lt;li&gt;Modify $\sigma_1$ until it becomes $\sigma_2$. &lt;/li&gt;
&lt;li&gt;While $\sigma_2$ exists, we cannot look things up in $\sigma_1$. &lt;/li&gt;
&lt;li&gt;When done with $\sigma_2$, can undo the modification to get $\sigma_1$ back again.&lt;br&gt;:::info 方法：&lt;br&gt;Hashing&lt;br&gt;:::&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
