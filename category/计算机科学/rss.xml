<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>NoResponse&#39;s Blog • Posts by &#34;计算机科学&#34; category</title>
        <link>http://example.com</link>
        <description>成分复杂的CSer from ZJU</description>
        <language>en</language>
        <pubDate>Tue, 01 Jul 2025 00:00:00 +0800</pubDate>
        <lastBuildDate>Tue, 01 Jul 2025 00:00:00 +0800</lastBuildDate>
        <category>人工智能</category>
        <category>软件工程</category>
        <category>编译原理</category>
        <category>Register Allocation</category>
        <category>语法分析</category>
        <category>Liveness Analysis</category>
        <category>抽象语法</category>
        <category>词法分析</category>
        <category>活动记录</category>
        <category>语义分析</category>
        <category>中间代码</category>
        <category>Basic Blocks and Traces</category>
        <category>指令选择</category>
        <category>计算机网络</category>
        <category>计算机组成</category>
        <category>错题</category>
        <category>数据的表示与运算</category>
        <category>存储系统</category>
        <item>
            <guid isPermalink="true">http://example.com/2025/07/01/computer-science/computer-organization/%E9%94%99%E9%A2%98%E9%9B%86%E5%90%88/</guid>
            <title>错题集合</title>
            <link>http://example.com/2025/07/01/computer-science/computer-organization/%E9%94%99%E9%A2%98%E9%9B%86%E5%90%88/</link>
            <category>错题</category>
            <pubDate>Tue, 01 Jul 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;错题集合&#34;&gt;&lt;a href=&#34;#错题集合&#34; class=&#34;headerlink&#34; title=&#34;错题集合&#34;&gt;&lt;/a&gt;错题集合&lt;/h1&gt;&lt;h2 id=&#34;Ch2&#34;&gt;&lt;a href=&#34;#Ch2&#34; class=&#34;headerlink&#34; title=&#34;Ch2&#34;&gt;&lt;/a&gt;Ch2&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;某计算机字长为8位，CPU中有一个8位加法器，已知无符号数x&amp;#x3D;69, y&amp;#x3D;38，若在该加法器中计算x-y，则加法器的两个输入短信息和输入的低位进位信息分别为（）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;0100 0101, 1101 1001, 1 &lt;blockquote&gt;
&lt;p&gt;无符号数减法，在加法器中输入x的原码，y的取反和1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;减法指令 “sub R1, R2, R3” 的功能为 “(R1) - (R2) -&amp;gt; R3”, 该指令执行后将生成进位&amp;#x2F;借位标志CF和溢出标志OF，若(R1) &amp;#x3D; FFFF FFFFH, R2 &amp;#x3D; FFFF FFF0H, 则该减法指令执行后，CF和OF分别为：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;CF &amp;#x3D; 0, OF &amp;#x3D; 0&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;已知x, y为int类型，当x &amp;#x3D; 100, y &amp;#x3D; 200时，执行 “x - y”指令得到的溢出标志OF和结尾标志CF分别为0，1，那么当x &amp;#x3D; 1-, y &amp;#x3D; -20时，执行该指令得到的OF和CF分别为：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;OF &amp;#x3D; 0, CF &amp;#x3D; 1&lt;blockquote&gt;
&lt;p&gt;ALU生成标志位时只负责计算，不管运算对象是有符号数还是无符号数。CF&amp;#x3D;1表示当做无符号数运算时溢出，OF&amp;#x3D;1表示当做有符号数运算时溢出。当做有符号数，10-(-20)没问题，所以OF&amp;#x3D;0；把它俩当做无符号数的时候，x &amp;#x3D; 10 &amp;#x3D; 0000 0000 0000 0000 0000 0000 0000 1010，y &amp;#x3D; -20 &amp;#x3D; 1111 1111 1111 1111 1111 1111 1110 1100，此时x &amp;lt; y，所以CF&amp;#x3D;1。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;下列关于整数乘法运算的叙述中，错误的是：D&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;A. 用阵列乘法器实现的乘运算可以在一个时钟周期内完成 –正确，因为是组合逻辑理论上可以在一个clc里完成&lt;/li&gt;
&lt;li&gt;B. 用ALU和移位器实现的乘运算无法在一个时钟周期内完成&lt;/li&gt;
&lt;li&gt;C. 变量与常数的乘运算可编译优化为若干移位及家&amp;#x2F;减运算指令&lt;/li&gt;
&lt;li&gt;D. 两个变量的乘运算无法编译转换为移位及加法等指令的循环实现&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/07/01/computer-science/computer-organization/ch3/</guid>
            <title>Ch3</title>
            <link>http://example.com/2025/07/01/computer-science/computer-organization/ch3/</link>
            <category>存储系统</category>
            <pubDate>Tue, 01 Jul 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Ch3-存储系统&#34;&gt;&lt;a href=&#34;#Ch3-存储系统&#34; class=&#34;headerlink&#34; title=&#34;Ch3 存储系统&#34;&gt;&lt;/a&gt;Ch3 存储系统&lt;/h1&gt;&lt;h2 id=&#34;存储器概述&#34;&gt;&lt;a href=&#34;#存储器概述&#34; class=&#34;headerlink&#34; title=&#34;存储器概述&#34;&gt;&lt;/a&gt;存储器概述&lt;/h2&gt;&lt;h3 id=&#34;存储器的分类&#34;&gt;&lt;a href=&#34;#存储器的分类&#34; class=&#34;headerlink&#34; title=&#34;存储器的分类&#34;&gt;&lt;/a&gt;存储器的分类&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;按层次分&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;主存（小、快、成本高）&lt;/li&gt;
&lt;li&gt;辅存（大、慢、成本低）&lt;/li&gt;
&lt;li&gt;Cache&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;按存储介质分&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;磁表面存储器（磁盘、磁带）&lt;/li&gt;
&lt;li&gt;磁芯存储器&lt;/li&gt;
&lt;li&gt;半导体存储器（MOS型、双极型）&lt;/li&gt;
&lt;li&gt;光存储器（光盘）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;按存储方式分&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;RAM （随机存储器）:随机读取存储单元，存取时间与存储单元的物理位置无关。读写方便，主要用作主存和cache，分静态RAM和动态RAM。&lt;/li&gt;
&lt;li&gt;ROM （只读存储器）：只能读不能写，非易失性，随机读取。广义的ROM也可以通过电擦除进行写入(EEPROM)&lt;/li&gt;
&lt;li&gt;SAM （顺序存储器）：按顺序存储，存取时间与存储单元的物理位置有关&lt;/li&gt;
&lt;li&gt;DAM （直接存储器）：先选取信息所在区域，然后顺序存取。结合了RAM和SAM的特性（磁盘）&lt;/li&gt;
&lt;li&gt;Associated memory: 不根据地址而是根据存储内容来进行存取的存储器，可以实现快速地查找快表。既可以按照&amp;#x3D;&amp;#x3D;地址&amp;#x3D;&amp;#x3D;寻址也可以按照&amp;#x3D;&amp;#x3D;内容&amp;#x3D;&amp;#x3D;寻址（通常是某些字段）&lt;/li&gt;
&lt;li&gt;串行访问存储器：SAM和DAM都是，所以读写时间和物理位置有关&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;按信息的可保存性分类&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;易失性存储器：断电后丢失数据，如RAM&lt;/li&gt;
&lt;li&gt;非易失性存储器：断电后数据还在，如ROM，磁盘光盘&lt;/li&gt;
&lt;li&gt;破坏性读出：读出数据后数据被破坏&lt;/li&gt;
&lt;li&gt;非破坏性读出：读出数据后数据不改变&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;存储器的性能指标&#34;&gt;&lt;a href=&#34;#存储器的性能指标&#34; class=&#34;headerlink&#34; title=&#34;存储器的性能指标&#34;&gt;&lt;/a&gt;存储器的性能指标&lt;/h3&gt;&lt;p&gt;三个主要性能指标：存储容量、单位成本、存储速度&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;容量 &amp;#x3D; 存储字数 * 字长&lt;/li&gt;
&lt;li&gt;单位成本 &amp;#x3D; 总成本&amp;#x2F;总容量&lt;/li&gt;
&lt;li&gt;存储速度：&lt;br&gt;存取时间$T_a$: 启动一次存储器操作到完成该操作所经历的时间，分为读出时间和写入事件&lt;br&gt;存取周期$T_m$: 进行连续读&amp;#x2F;写操作所允许的最短时间间隔&lt;br&gt;主存带宽$B_m$: b&amp;#x2F;s, B&amp;#x2F;s, word&amp;#x2F;s&lt;blockquote&gt;
&lt;p&gt;存取时间仅为完成一次操作的时间，而存取周期不仅包含操作时间，还包括操作后线路的恢复时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;多级层次的存储系统&#34;&gt;&lt;a href=&#34;#多级层次的存储系统&#34; class=&#34;headerlink&#34; title=&#34;多级层次的存储系统&#34;&gt;&lt;/a&gt;多级层次的存储系统&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;br&gt;从上到下价格越来越低，速度越来越慢，容量越来越大，CPU访问频度越来越低&lt;br&gt;&lt;img data-src=&#34;/f2.jpg&#34;&gt;&lt;br&gt;存储时间与存储周期的关系&lt;/p&gt;
&lt;p&gt;主存-Cache之间的数据调用由硬件自动完成，对所有程序员均是透明的&lt;br&gt;主存-辅存的数据调用由硬件和操作系统共同完成，对应用程序员是透明的&lt;/p&gt;
&lt;h2 id=&#34;主存储器&#34;&gt;&lt;a href=&#34;#主存储器&#34; class=&#34;headerlink&#34; title=&#34;主存储器&#34;&gt;&lt;/a&gt;主存储器&lt;/h2&gt;&lt;p&gt;存储元件：MOS管&lt;/p&gt;
&lt;h3 id=&#34;SRAM-DRAM&#34;&gt;&lt;a href=&#34;#SRAM-DRAM&#34; class=&#34;headerlink&#34; title=&#34;SRAM &amp;amp; DRAM&#34;&gt;&lt;/a&gt;SRAM &amp;amp; DRAM&lt;/h3&gt;&lt;p&gt;RAM: SRAM静态随机存储器和DRAM动态随机存储器&lt;br&gt;&amp;#x3D;&amp;#x3D;主存主要是DRAM，Cache主要是SRAM&amp;#x3D;&amp;#x3D;，都易失&lt;/p&gt;
&lt;p&gt;DRAM芯片：使用栅极电容存储信息，只要一个晶体管，读写&amp;#x3D;&amp;#x3D;更慢&amp;#x3D;&amp;#x3D;，是&amp;#x3D;&amp;#x3D;破坏性读出&amp;#x3D;&amp;#x3D;，需要重写，&amp;#x3D;&amp;#x3D;成本低，集成度高，功耗低&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;SRAM芯片：使用双稳态触发器存储信息（六晶体管MOS，RS, JK, D）。读写&amp;#x3D;&amp;#x3D;更快&amp;#x3D;&amp;#x3D;，是非破坏性读出，&amp;#x3D;&amp;#x3D;成本高，集成度低，功耗大&amp;#x3D;&amp;#x3D;&lt;br&gt;&lt;img data-src=&#34;/f4.jpg&#34;&gt;&lt;br&gt;栅极电容需要一直刷新给电容充电，触发器不需要刷新，只要不断电状态不会改变&lt;/p&gt;
&lt;h4 id=&#34;DRAM的刷新&#34;&gt;&lt;a href=&#34;#DRAM的刷新&#34; class=&#34;headerlink&#34; title=&#34;DRAM的刷新&#34;&gt;&lt;/a&gt;DRAM的刷新&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;多久需要刷新一次？ 刷新周期：一般为2ms&lt;/li&gt;
&lt;li&gt;每次刷新多少存储单元？以行为单位，每次刷新一行存储单元&lt;br&gt;——为什么要用行列地址？减少选通线的数量&lt;/li&gt;
&lt;li&gt;在什么时刻刷新？&lt;br&gt;有硬件支持，读出一行的信息后重新写入，占用1个读&amp;#x2F;写周期&lt;br&gt;假设DRAM内部结构排列成128×128的形式，读&amp;#x2F;写周期0.5us&lt;br&gt;2ms共 2ms&amp;#x2F;0.5us &amp;#x3D; 4000 个周期&lt;br&gt;三种刷新方式：&lt;br&gt;&lt;img data-src=&#34;/f5.jpg&#34;&gt;&lt;br&gt;刷新以行为单位，再生（重写）只需要恢复被读出来的存储单元&lt;br&gt;刷新由存储器独立完成，不需要CPU控制&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;DRAM的地址引脚复用技术&#34;&gt;&lt;a href=&#34;#DRAM的地址引脚复用技术&#34; class=&#34;headerlink&#34; title=&#34;DRAM的地址引脚复用技术&#34;&gt;&lt;/a&gt;DRAM的地址引脚复用技术&lt;/h5&gt;&lt;p&gt;&lt;img data-src=&#34;/f6.jpg&#34;&gt;&lt;br&gt;行列地址分成两次送，节省了一半的地址线&lt;br&gt;行列数优化原则：尽量使行、列数相同，且行数较少（因为按行刷新）&lt;br&gt;目前常用SDRAM（同步DRAM），数据交换同步于CPU的时钟信号，使得CPU不需要等待&lt;/p&gt;
&lt;h3 id=&#34;ROM&#34;&gt;&lt;a href=&#34;#ROM&#34; class=&#34;headerlink&#34; title=&#34;ROM&#34;&gt;&lt;/a&gt;ROM&lt;/h3&gt;&lt;p&gt;结构简单、非易失性&lt;br&gt;类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MROM 掩模式ROM&lt;br&gt;在芯片生产过程中写入，无法改变，可靠性高，急程度高，价格便宜，灵活性差&lt;/li&gt;
&lt;li&gt;PROM 一次可编程ROM&lt;br&gt;可以用专门的设备写入一次，一旦写入无法改变&lt;/li&gt;
&lt;li&gt;EPROM 可擦除可编程ROM&lt;br&gt;可以写入并多次改写，但是编程次数有限且时间长&lt;/li&gt;
&lt;li&gt;Flash&lt;br&gt;兼有RAM和ROM的优点，可以不加电长期保存信息，又能在线快速擦除和重写，价格便宜，急程度高，电可擦除重写且速度快&lt;br&gt;SSD 固态硬盘基于Flash，由控制单元和Flash组成，长期保存、快速擦除和重写，对比传统硬盘读写速度快。低功耗。但是价格高&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;主存储器的基本组成&#34;&gt;&lt;a href=&#34;#主存储器的基本组成&#34; class=&#34;headerlink&#34; title=&#34;主存储器的基本组成&#34;&gt;&lt;/a&gt;主存储器的基本组成&lt;/h3&gt;&lt;p&gt;核心部件：一个个存储0或1的存储单元构成的存储矩阵&lt;br&gt;访问主存时，CPU把地址送到MAR，MAR通过地址总线把地址送到主存中的地址寄存器，地址译码器进行译码，选中相应的内存单元，然后通过控制电路决定读&amp;#x2F;写操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读操作：将选中的内存单元的内容通过数据总线送到MDR中&lt;/li&gt;
&lt;li&gt;写操作：将MDR中的内容通过数据总线送到选中的内存单元中&lt;br&gt;MDR的位数和数据总线位数相同，通常等于存储字长；MAR的位数和地址总线位数相同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多模块存储器&#34;&gt;&lt;a href=&#34;#多模块存储器&#34; class=&#34;headerlink&#34; title=&#34;多模块存储器&#34;&gt;&lt;/a&gt;多模块存储器&lt;/h3&gt;&lt;p&gt;DRAM芯片的恢复时间比较长，有可能是存取时间的几倍（SRAM的恢复时间较短）。CPU的读写速度比主存快很多，主存恢复时间太长&lt;br&gt; —— 利用多个完全相同的存储模块并行工作来提高吞吐率：单体多字存储器，多体低位交叉存储器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;双端口RAM（408不考，了解即可）&lt;br&gt;&lt;img data-src=&#34;/f7.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;单体多字存储器&lt;br&gt;一般一个存储单元只存储一个word，但是单体多字存储器一个存储单元存储多个word，然后读的时候一次性读取这多个字。好处是快，缺点是只有指令和数据连续存放时才能提高存取速度，否则造成不必要的读取。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;多体并行存储器（重点）&amp;#x3D;&amp;#x3D;&lt;br&gt;分为高位交叉编址和低位交叉编址两种&lt;br&gt;&lt;img data-src=&#34;/f8.jpg&#34;&gt;&lt;br&gt;高位交叉编址每一块存储体的高位是一样的，实际上还是顺序存储。因此访问连续内存实际上访问的还是同一块存储体，并不能通过并行加快访问速度&lt;br&gt;低位交叉编址的每一块存储体低位相同，因此可以在恢复时间并行存取下一块内存的数据&lt;br&gt;存取周期为&lt;code&gt;T&lt;/code&gt;, 存取时间为&lt;code&gt;r&lt;/code&gt;, T &amp;#x3D; r + 恢复时间&lt;br&gt;对于n个存储器并行访问的存储器：&lt;br&gt;采用高位交叉编址的时间为&lt;code&gt;n*T&lt;/code&gt;&lt;br&gt;低位交叉编址为&lt;code&gt;T + (n-1)*r&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/f9.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;轮流启动：每个bank的存储位数等于数据总线的位数，此时采用轮流启动&lt;ul&gt;
&lt;li&gt;对于低位交叉编址，要保证&lt;code&gt;m&amp;gt;=T/r&lt;/code&gt;，以保证流水线不间断&lt;/li&gt;
&lt;li&gt;理想情况下，m个bank的交叉存储器每隔&lt;code&gt;T/m&lt;/code&gt;个周期可以读&amp;#x2F;写一个数据，若相邻m次访问的当存地址出现在同一个模块内，则会发生访存冲突，此时需要延迟发生冲突的访问请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同时启动：如果m个bank的总位数加起来刚好等于数据总线的位数，则m个同时存&amp;#x2F;取&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;主存储器与CPU的连接&#34;&gt;&lt;a href=&#34;#主存储器与CPU的连接&#34; class=&#34;headerlink&#34; title=&#34;主存储器与CPU的连接&#34;&gt;&lt;/a&gt;主存储器与CPU的连接&lt;/h2&gt;&lt;h3 id=&#34;连接原理&#34;&gt;&lt;a href=&#34;#连接原理&#34; class=&#34;headerlink&#34; title=&#34;连接原理&#34;&gt;&lt;/a&gt;连接原理&lt;/h3&gt;&lt;p&gt;通过总线连接（控制、地址、数据）&lt;br&gt;传输速率 &amp;#x3D; 总线宽度&amp;#x2F;传输时间&lt;br&gt;地址总线的位数决定了可寻址的最大内存空间&lt;br&gt;控制总线指出总线周期的类型和本次输入输出完成的时刻&lt;br&gt;将多个芯片集成在内存条上，由多个内存条和主板上的ROM芯片组成计算机所需的主存空间，通过总线与CPU连接&lt;/p&gt;
&lt;h3 id=&#34;主存容量的扩展&#34;&gt;&lt;a href=&#34;#主存容量的扩展&#34; class=&#34;headerlink&#34; title=&#34;主存容量的扩展&#34;&gt;&lt;/a&gt;主存容量的扩展&lt;/h3&gt;&lt;p&gt;数据总线宽度&amp;gt;存储字长 —— 位扩展&lt;br&gt;地址总线宽度&amp;gt;存储字数量所需的宽度&lt;br&gt;&lt;img data-src=&#34;/f10.jpg&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;位扩展法：增加存储字长&lt;br&gt;由于数据总线宽度大于存储字长，存在浪费情况，必须进行位扩展使数据位数与数据总线位数相等&lt;br&gt;如图：&lt;br&gt;&lt;img data-src=&#34;/f11.jpg&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字扩展法&lt;br&gt;地址总线存在浪费情况，对存储字的数量进行扩展&lt;br&gt;用多出来的地址线提供CS片选信号，决定输出的是哪个芯片的数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;线选法：n条多余的地址线，对应n个选片信号，地址空间不连续造成地址空间浪费（只能有一个1有效），电路简单&lt;br&gt;&lt;img data-src=&#34;/f13.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;译码器选法：n条多余的线对应$2^n$个选片信号，地址空间可以连续&lt;br&gt;&lt;img data-src=&#34;/f12.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;字、位同时扩展&lt;br&gt;既增加存储字的数量，又增加存储字长&lt;br&gt;&lt;img data-src=&#34;/f14.jpg&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;存储芯片的地址分配和片选&#34;&gt;&lt;a href=&#34;#存储芯片的地址分配和片选&#34; class=&#34;headerlink&#34; title=&#34;存储芯片的地址分配和片选&#34;&gt;&lt;/a&gt;存储芯片的地址分配和片选&lt;/h3&gt;&lt;p&gt;见上方线选法译码器选法&lt;/p&gt;
&lt;h3 id=&#34;存储器与CPU的连接&#34;&gt;&lt;a href=&#34;#存储器与CPU的连接&#34; class=&#34;headerlink&#34; title=&#34;存储器与CPU的连接&#34;&gt;&lt;/a&gt;存储器与CPU的连接&lt;/h3&gt;&lt;p&gt;……&lt;br&gt;片选信号还与CPU的方寸控制信号$\overline{MREQ}$有关（低电平有效），若CPU访问IO则此信号为高电平&lt;br&gt;MAR位数要看主存地址空间大小，而不能看实际上用了多少位&lt;/p&gt;
&lt;h2 id=&#34;外部存储器&#34;&gt;&lt;a href=&#34;#外部存储器&#34; class=&#34;headerlink&#34; title=&#34;外部存储器&#34;&gt;&lt;/a&gt;外部存储器&lt;/h2&gt;&lt;p&gt;磁盘存储器是以磁盘为存储介质的存储器，优点：容量大，价格低；记录介质可重复使用；可以长期保存；非破坏性读出。缺点：存取速度慢；机械结构复杂；对工作环境要求高&lt;/p&gt;
&lt;h3 id=&#34;磁盘存储器&#34;&gt;&lt;a href=&#34;#磁盘存储器&#34; class=&#34;headerlink&#34; title=&#34;磁盘存储器&#34;&gt;&lt;/a&gt;磁盘存储器&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;磁盘存储器&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;组成：磁盘驱动器，磁盘控制器，盘片&lt;br&gt;&lt;img data-src=&#34;/f15.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;存储区域：&amp;#x3D;&amp;#x3D;扇区（也称块）是磁盘读写的最小单位&amp;#x3D;&amp;#x3D;，按块存取&lt;ul&gt;
&lt;li&gt;磁头数(Heads)：一个记录面对应一个磁头&lt;/li&gt;
&lt;li&gt;柱面数(Cylinders)：表示每面盘片上的磁道数，不同记录面的相同位置的磁道构成一个柱面&lt;/li&gt;
&lt;li&gt;扇区数(Sectors)：每条磁道上有多少扇区&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disk Cache&lt;ul&gt;
&lt;li&gt;在内存上的一片区域，用来缓冲被送到磁盘上的数据。优点：写磁盘时按簇进行，可以避免频繁地用小块数据写；中间结果数据写回之前可以被快速再次使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;磁记录原理&lt;ul&gt;
&lt;li&gt;原理：当磁头和磁性记录介质有相对运动时，通过电磁转换完成读&amp;#x2F;写操作。&lt;/li&gt;
&lt;li&gt;编码方法：按某种方案（规律），把一连串的二进制信息变换成存储介质磁层中一个磁化翻转状态的序列，并使读&amp;#x2F;写控制电路容易、可靠地实现转换。&lt;/li&gt;
&lt;li&gt;磁记录方式：通常采用调频制（FM）和改进型调频制（MFM）的记录方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能指标&lt;ul&gt;
&lt;li&gt;&lt;p&gt;磁盘的容量：一个磁盘所能存储的字节总数称为磁盘容量。磁盘容量有非格式化容量和格式化容量之分。&lt;br&gt;非格式化容量是指磁记录表面可以利用的磁化单元总数，非格式化容量 &amp;#x3D; 记录面数 * 柱面数 * 每条磁道的磁化单元数&lt;br&gt;格式化容量是指按照某种特定的记录格式所能存储信息的总量，格式化容量 &amp;#x3D; 记录面数 * 柱面数 * 每道扇区数 * 每个扇区的容量&lt;br&gt;&amp;#x3D;&amp;#x3D;格式化容量 &amp;lt; 非格式化容量&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;记录密度:记录密度是指盘片单位面积上记录的二进制的信息量，通常以&lt;code&gt;道密度&lt;/code&gt;、&lt;code&gt;位密度&lt;/code&gt;和&lt;code&gt;面密度&lt;/code&gt;表示。道密度是&amp;#x3D;&amp;#x3D;沿磁盘半径方向单位长度上的磁道数&amp;#x3D;&amp;#x3D;；位密度是&amp;#x3D;&amp;#x3D;磁道单位长度上能记录的二进制代码位数&amp;#x3D;&amp;#x3D;；面密度是位密度和道密度的乘积。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;磁盘所有磁道记录的信息量一定是相等的，并不是圆越大信息越多，故每个磁道的位密度都不同，越靠近圆心位密度越大&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;平均存取时间：平均存取时间 &amp;#x3D; 寻道时间（磁头移动到目的磁道）+ 旋转延迟时间（磁头定位到所在扇区）+ 传输时间（传输数据所花费的时间）&lt;br&gt;&amp;#x3D;&amp;#x3D;寻道时间通常取从最外道到最内道时间的一半，旋转延迟时间通常取旋转半周的时间&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据传输率：磁盘存储器在单位时间内向主机传送数据的字节数，称为数据传输率&lt;br&gt;假设磁盘转速为r（转&amp;#x2F;秒），每条磁道容量为N个字节，则数据传输率为$D_r&amp;#x3D;rN$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;磁盘地址&lt;br&gt;&lt;img data-src=&#34;/f16.jpg&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;磁盘的工作原理&lt;br&gt;硬盘的主要操作是寻址、读盘、写盘。每个操作都对应一个控制字，硬盘工作时，第一步是取控制字，第二步是执行控制字。&lt;br&gt;硬盘属于机械式部件，其读写操作是串行的，不可能在同一时刻既读又写，也不可能在同一时刻读两组数据或写两组数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;RAID&lt;br&gt;将多个独立的物理磁盘组成一个独立的逻辑磁盘，数据分割交叉存储，并行访问。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;RAID0：无冗余和无校验的磁盘阵列。&lt;/li&gt;
&lt;li&gt;RAID1：镜像磁盘阵列。每份数据存两遍，成本太高&lt;/li&gt;
&lt;li&gt;RAID2：采用纠错的海明码的磁盘阵列。&lt;br&gt;逻辑上连续的几个bit物理上分散存储在各个盘中4bit信息位+3bit海明校验位——可纠正1bit错误&lt;br&gt;每个码字有 &lt;code&gt;m&lt;/code&gt; 个信息位和 &lt;code&gt;r&lt;/code&gt; 个冗余位，$ (m+r+1)≤2^r$&lt;br&gt;参考xyx学长的计网笔记：&lt;br&gt;&lt;img data-src=&#34;/f17.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;RAID3：位交叉奇偶校验的磁盘阵列。前三个盘的奇偶校验位写在第四个盘上&lt;/li&gt;
&lt;li&gt;RAID4：块交叉奇偶校验的磁盘阵列。&lt;/li&gt;
&lt;li&gt;RAID5：无独立校验的奇偶校验磁盘阵列。在所有磁盘之间分条，并且每个数据块的奇偶校验块 (P) 写入到同一条带上&lt;br&gt;RAID1-RAID5数据不会损坏&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;固态硬盘-SSD&#34;&gt;&lt;a href=&#34;#固态硬盘-SSD&#34; class=&#34;headerlink&#34; title=&#34;固态硬盘(SSD)&#34;&gt;&lt;/a&gt;固态硬盘(SSD)&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;特性&lt;br&gt;属于Flash memory, EEPROM&lt;br&gt;组成：闪存翻译层，存储介质&lt;br&gt;&lt;img data-src=&#34;/f18.jpg&#34;&gt;&lt;br&gt;&amp;#x3D;&amp;#x3D;数据以页为单位读写，以块为单位擦除&amp;#x3D;&amp;#x3D;只有整个块被擦除之后才能写这一页，若视图修改包含已有数据的页$P_i$，则这个快中所有含有有用数据的页必须被复制到新的空白的块中，才能对$P_i$进行写操作&lt;br&gt;SSD的优点：&amp;#x3D;&amp;#x3D;随机写很慢，随机读比机械磁盘块&amp;#x3D;&amp;#x3D;，没噪声，能耗低，抗震性好，安全性高&lt;/li&gt;
&lt;li&gt;Wear Leveling 磨损均衡&lt;br&gt;重复擦写块就会磨损坏，一般是几百次到几千次&lt;br&gt;(1) 动态磨损均衡：&amp;#x3D;&amp;#x3D;写入时&amp;#x3D;&amp;#x3D;优先选择擦除次数少的新闪存块，只在写入时触发，仅考虑可用空间（对于冷数据不包括在空间池中，减少了可以用的block数量）&lt;br&gt;(2) 静态磨损均衡：就算没有写入，SSD也会监测并自动进行数据分配，让老的闪存快以读为主，让新的块腾出空间，以写为主：将数据从写入&amp;#x2F;擦除次数较低的block移动到其他block中，这样可以将低擦写次数的block释放出来，添加到可用可用空间池中，以便后续使用。仅覆盖单个闪存芯片单元&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/18/computer-science/compile-principles/ch11/</guid>
            <title>Register Allocation</title>
            <link>http://example.com/2025/06/18/computer-science/compile-principles/ch11/</link>
            <category>Register Allocation</category>
            <pubDate>Wed, 18 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Register-Allocation&#34;&gt;&lt;a href=&#34;#Register-Allocation&#34; class=&#34;headerlink&#34; title=&#34;Register Allocation&#34;&gt;&lt;/a&gt;Register Allocation&lt;/h1&gt;&lt;p&gt;目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Map temporaries to registers&lt;/li&gt;
&lt;li&gt;Preserve program semantics&lt;/li&gt;
&lt;li&gt;Optimize performance&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;图着色算法&#34;&gt;&lt;a href=&#34;#图着色算法&#34; class=&#34;headerlink&#34; title=&#34;图着色算法&#34;&gt;&lt;/a&gt;图着色算法&lt;/h2&gt;&lt;p&gt;冲突图是一个无向图，冲突图中，每个节点是一个变量（寄存器分配的候选对象）。&lt;br&gt;如果两个变量在同一时刻是活跃的（live），它们就有冲突边（interference edge），表示它们不能被分配到同一个寄存器&lt;br&gt;冲突信息可以用矩阵或者图来表示&lt;/p&gt;
&lt;h3 id=&#34;冲突图构建&#34;&gt;&lt;a href=&#34;#冲突图构建&#34; class=&#34;headerlink&#34; title=&#34;冲突图构建&#34;&gt;&lt;/a&gt;冲突图构建&lt;/h3&gt;&lt;p&gt;我们从一个中间代码的指令出发，根据live-out（就是out集合）添加冲突边：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;非 move 指令（不是a :&amp;#x3D; b这种）&lt;br&gt;比如a :&amp;#x3D; b1 + b2&lt;br&gt;对于每个bn和a之间都添加冲突边&lt;br&gt;比如下面这个例子：&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;br&gt;可以看到有ab ac同时live了，所以为a和b，a和c添加冲突边&lt;/li&gt;
&lt;li&gt;move指令&lt;br&gt;对于move指令，不添加冲突边：&lt;br&gt;比如对于第 2 条指令 d ← a，out[2] &amp;#x3D; {a, e}，那么只对d和e添加冲突边，对d和a不添加&lt;br&gt;但如果move之后又对d重新赋值了，那么还是要添加上d和a之间的冲突边&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;冲突图着色&#34;&gt;&lt;a href=&#34;#冲突图着色&#34; class=&#34;headerlink&#34; title=&#34;冲突图着色&#34;&gt;&lt;/a&gt;冲突图着色&lt;/h3&gt;&lt;p&gt;Vertex Coloring: 给图中的顶点着色，使得图中没有边连接相同颜色的顶点&lt;br&gt;K-Coloring: 颜色数小于K&lt;/p&gt;
&lt;h4 id=&#34;Kempe-简化&#34;&gt;&lt;a href=&#34;#Kempe-简化&#34; class=&#34;headerlink&#34; title=&#34;Kempe 简化&#34;&gt;&lt;/a&gt;Kempe 简化&lt;/h4&gt;&lt;p&gt;如果图中有一个节点 n 的度数 &amp;lt; K（也就是它的冲突数少于寄存器数），那我们可以“临时删掉”这个节点，并递归给剩下的图上色。之后再把这个节点加回来，它一定可以找到一个合法颜色。&lt;/p&gt;
&lt;p&gt;如果图中所有节点的度数都 ≥ K，那就可能要进入溢出（spill）处理&lt;br&gt;算法步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;build: 画冲突图&lt;/li&gt;
&lt;li&gt;simplify the nodes with insignificant degree: 选取degree &amp;lt; k的节点，压栈&lt;/li&gt;
&lt;li&gt;select (or color) while rebuilding the graph: 出栈，分配颜色&lt;br&gt;A vertex such that its degree &amp;lt; k is always k-colorable&lt;br&gt;Remove such vertices and push them to a stack until the graph becomes empty&lt;br&gt;移除顶点的同时移除相关边&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;Coalescing&#34;&gt;&lt;a href=&#34;#Coalescing&#34; class=&#34;headerlink&#34; title=&#34;Coalescing&#34;&gt;&lt;/a&gt;Coalescing&lt;/h4&gt;&lt;p&gt;遵循两种策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Briggs Criteria&lt;/strong&gt;: 如果将节点 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 合并后得到的新节点 &lt;code&gt;ab&lt;/code&gt;，其相邻节点中degree &amp;gt;&amp;#x3D; K 的节点（significant-degree neighbors）的数量 小于 K，则可以合并&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;George Criteria&lt;/strong&gt;: 如果对节点 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt;，对于 &lt;code&gt;a&lt;/code&gt; 的每一个邻居 &lt;code&gt;t&lt;/code&gt;， 满足二者其中之一，就能合并：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt; 本来就和 &lt;code&gt;b&lt;/code&gt; 有冲突&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt;的degree &amp;lt; K&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整体流程：&lt;br&gt;&lt;img data-src=&#34;/f2.jpg&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么要simplify non-move-related node: 保留move-related的后续可以合并&lt;/li&gt;
&lt;li&gt;freeze: 当我们遇到两个变量 a ← b 有 move 指令，但现在还不能安全合并，我们又不想立刻 spill，于是我们“冻结”这条 move 指令：不再试图合并 a 和 b，而是让其中一个变成非 move 相关（non-move-related），进入 Simplify 阶段继续处理&lt;/li&gt;
&lt;li&gt;spill规则：优先移除不被经常使用、degree大的节点&lt;ul&gt;
&lt;li&gt;实际溢出的priority计算，对于节点a：&lt;br&gt;$$&lt;br&gt;priority(t) &amp;#x3D; \frac{(use + def outside loop) + loop_num * (use + def inside loop)}{D}&lt;br&gt;$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/18/computer-science/compile-principles/ch10/</guid>
            <title>Liveness Analysis</title>
            <link>http://example.com/2025/06/18/computer-science/compile-principles/ch10/</link>
            <category>Liveness Analysis</category>
            <pubDate>Wed, 18 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Liveness-Analysis-活跃变量分析&#34;&gt;&lt;a href=&#34;#Liveness-Analysis-活跃变量分析&#34; class=&#34;headerlink&#34; title=&#34;Liveness Analysis 活跃变量分析&#34;&gt;&lt;/a&gt;Liveness Analysis 活跃变量分析&lt;/h1&gt;&lt;p&gt;判断在程序执行的某个点上，一个变量的值是否可能在未来被使用，是寄存器分配、死代码消除的基础&lt;/p&gt;
&lt;h2 id=&#34;Compiler-Optimizations&#34;&gt;&lt;a href=&#34;#Compiler-Optimizations&#34; class=&#34;headerlink&#34; title=&#34;Compiler Optimizations&#34;&gt;&lt;/a&gt;Compiler Optimizations&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Local: 基于basic blocks&lt;/li&gt;
&lt;li&gt;Intraprocedural (or “global’): 基本块的控制流转移&lt;/li&gt;
&lt;li&gt;Interprocedural (or “whole-program”): Operate on &amp;gt; 1 procedure, up to whole program; Sometimes, at link time (LTO, link time optimization)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Analyze program to gather “facts”&lt;/li&gt;
&lt;li&gt;Apply transformation (e.g., optimizations)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Dataflow-Analysis&#34;&gt;&lt;a href=&#34;#Dataflow-Analysis&#34; class=&#34;headerlink&#34; title=&#34;Dataflow Analysis&#34;&gt;&lt;/a&gt;Dataflow Analysis&lt;/h2&gt;&lt;p&gt;Control Flow Graph: A directed graph 数据流图&lt;br&gt;– Nodes represent statements&lt;br&gt;– Edges represent control flow&lt;/p&gt;
&lt;p&gt;CFG的简化：基本块&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;变量的活跃性：&#34;&gt;&lt;a href=&#34;#变量的活跃性：&#34; class=&#34;headerlink&#34; title=&#34;变量的活跃性：&#34;&gt;&lt;/a&gt;变量的活跃性：&lt;/h3&gt;&lt;p&gt;变量x在语句s处（执行s之前）处于活动状态，当且仅当满足以下三个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存在一个使用x的语句s’；&lt;/li&gt;
&lt;li&gt;存在从s到s’的路径；&lt;/li&gt;
&lt;li&gt;这条路径上没有对x进行任何赋值操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过分析liveness，我们可以实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Register Allocation&lt;/li&gt;
&lt;li&gt;Code Optimizations：Remove unused assignments&lt;/li&gt;
&lt;li&gt;IR Construction： Optimize the construction of SSA&lt;/li&gt;
&lt;li&gt;Security&amp;#x2F;Reliability: Detect the use of uninitialized variables&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Dataflow-Equations-for-Liveness-构建数据流方程&#34;&gt;&lt;a href=&#34;#Dataflow-Equations-for-Liveness-构建数据流方程&#34; class=&#34;headerlink&#34; title=&#34;Dataflow Equations for Liveness 构建数据流方程&#34;&gt;&lt;/a&gt;Dataflow Equations for Liveness 构建数据流方程&lt;/h2&gt;&lt;p&gt;A CFG node has&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;out-edges: lead to successor nodes&lt;/li&gt;
&lt;li&gt;in-edges: come from predecessor nodes&lt;/li&gt;
&lt;li&gt;pred[n]: the predecessors of node n       前驱&lt;/li&gt;
&lt;li&gt;succ[n]: the successors of node n     后继&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;几个定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use[n]: 在节点n被读取或使用(x &amp;#x3D; a + b的a和b, if(a &amp;lt; b)的a和b, return c的c)&lt;/li&gt;
&lt;li&gt;def[n]: 在节点n被定义(x &amp;#x3D; a + b的x)&lt;/li&gt;
&lt;li&gt;in[n]: 在节点n之前，所有活跃变量的集合&lt;/li&gt;
&lt;li&gt;out[n]: 在节点n之后，所有活跃变量的集合&lt;br&gt;三条活跃性规则：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;if $a \in in[n]$ then for $\all m \in pred[n]$ we have $a \in out[m]$&lt;/li&gt;
&lt;li&gt;if $a \in use[n]$ then $a \in in[n]$&lt;/li&gt;
&lt;li&gt;if $a \in out[n]$ and $a \notin def[n]$ then $a \in in[n]$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;得到以下两个数据流方程：&lt;br&gt;$$&lt;br&gt;out[n] &amp;#x3D; \cup_{s \in succ[n]} in[s]&lt;br&gt;$$&lt;br&gt; 一个节点在n的出口处活跃当且仅当在它后继的入口处是活跃的（活跃性的反向传播）&lt;br&gt;$$&lt;br&gt;in[n] &amp;#x3D; use[n] \cup (out[n] - def[n])&lt;br&gt;$$&lt;/p&gt;
&lt;h2 id=&#34;求解数据流方程&#34;&gt;&lt;a href=&#34;#求解数据流方程&#34; class=&#34;headerlink&#34; title=&#34;求解数据流方程&#34;&gt;&lt;/a&gt;求解数据流方程&lt;/h2&gt;&lt;p&gt;有了上面的两个数据流方程，就可以求解数据流方程了&lt;br&gt;算法：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;figcaption&gt;&lt;span&gt;pseudo&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for each n&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    in[n] ←&amp;#123;&amp;#125;; out[n] ←&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;repeat&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for each n&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        in′[n] ← in[n]; out′[n] ← out[n]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        in[n] ← use[n] ∪ (out[n] − def[n])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        out[n] ← ⋃( ∈()**[+] in[s]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;until in′[n] = in[n] and out′[n] = out[n] for all n&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;将所有节点的 &lt;code&gt;in&lt;/code&gt; 和 &lt;code&gt;out&lt;/code&gt; 集合初始化为空集。&lt;/li&gt;
&lt;li&gt;写出&lt;code&gt;use[n]&lt;/code&gt;和&lt;code&gt;def[n]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用数据流方程更新&lt;code&gt;in&lt;/code&gt;和&lt;code&gt;out&lt;/code&gt;集合&lt;/li&gt;
&lt;li&gt;直到&lt;code&gt;in&lt;/code&gt;和&lt;code&gt;out&lt;/code&gt;集合不再改变为止&lt;br&gt;例：&lt;br&gt;&lt;img data-src=&#34;/f2.jpg&#34;&gt;&lt;br&gt;对于这个CFG&lt;br&gt;每一次迭代如图：&lt;br&gt;&lt;img data-src=&#34;/f3.jpg&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Improvements&#34;&gt;&lt;a href=&#34;#Improvements&#34; class=&#34;headerlink&#34; title=&#34;Improvements&#34;&gt;&lt;/a&gt;Improvements&lt;/h2&gt;&lt;h3 id=&#34;Use-Basic-Block&#34;&gt;&lt;a href=&#34;#Use-Basic-Block&#34; class=&#34;headerlink&#34; title=&#34;Use Basic Block&#34;&gt;&lt;/a&gt;Use Basic Block&lt;/h3&gt;&lt;p&gt;后面有点懒得看，先放着&lt;/p&gt;
&lt;h2 id=&#34;集合的表示方法&#34;&gt;&lt;a href=&#34;#集合的表示方法&#34; class=&#34;headerlink&#34; title=&#34;集合的表示方法&#34;&gt;&lt;/a&gt;集合的表示方法&lt;/h2&gt;&lt;p&gt;对于in, out, use, def集合的表示和操作对性能有很大影响&lt;/p&gt;
&lt;h3 id=&#34;Bit-Arrays&#34;&gt;&lt;a href=&#34;#Bit-Arrays&#34; class=&#34;headerlink&#34; title=&#34;Bit Arrays&#34;&gt;&lt;/a&gt;Bit Arrays&lt;/h3&gt;&lt;p&gt;有点像bit map，适用于稠密集合（1比较多的，如果0太多就浪费了）&lt;/p&gt;
&lt;h3 id=&#34;Sorted-Lists&#34;&gt;&lt;a href=&#34;#Sorted-Lists&#34; class=&#34;headerlink&#34; title=&#34;Sorted Lists&#34;&gt;&lt;/a&gt;Sorted Lists&lt;/h3&gt;&lt;p&gt;适合稀疏集合（用一个链表存集合中的变量, Sorted by variable name&amp;#x2F;ID）&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/17/computer-science/compile-principles/ch8/</guid>
            <title>Basic Blocks &amp; Traces</title>
            <link>http://example.com/2025/06/17/computer-science/compile-principles/ch8/</link>
            <category>Basic Blocks and Traces</category>
            <pubDate>Tue, 17 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Basic-Blocks-and-Traces&#34;&gt;&lt;a href=&#34;#Basic-Blocks-and-Traces&#34; class=&#34;headerlink&#34; title=&#34;Basic Blocks and Traces&#34;&gt;&lt;/a&gt;Basic Blocks and Traces&lt;/h1&gt;&lt;h2 id=&#34;Canonical-Form&#34;&gt;&lt;a href=&#34;#Canonical-Form&#34; class=&#34;headerlink&#34; title=&#34;Canonical Form&#34;&gt;&lt;/a&gt;Canonical Form&lt;/h2&gt;&lt;p&gt;IR存在一些与机器语言不能完全对应的情况，和与编译优化分析相冲突的情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CJUMP能够转移到t或者f，但是真正的机器语言在条件为假的时候直接下降至下一条指令（条件为真才跳转）&lt;/li&gt;
&lt;li&gt;在表达式中使用ESEQ不太方便，会使子树不同的计算顺序产生不同的计算结果&lt;/li&gt;
&lt;li&gt;CALL调用CALL作为参数的时候会有寄存器冲突、语句副作用（修改全局变量、改变堆内存, etc.）等问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Linearize: Transform trees into a list of canonical&lt;br&gt;trees without SEQ or ESEQ nodes&lt;/li&gt;
&lt;li&gt;Basic blocks: Group statements into sequences with&lt;br&gt;no internal jumps&amp;#x2F;labels&lt;/li&gt;
&lt;li&gt;Trace schedule: Order basic blocks so every CJUMP is followed by its false label&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;线性化&#34;&gt;&lt;a href=&#34;#线性化&#34; class=&#34;headerlink&#34; title=&#34;线性化&#34;&gt;&lt;/a&gt;线性化&lt;/h3&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;规范树（Canonical Tree）定义：&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无SEQ或ESEQ&lt;/li&gt;
&lt;li&gt;每一个CALL的父亲不是EXP(…)就是MOVE(TEMP t, …)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;消除ESEQ&#34;&gt;&lt;a href=&#34;#消除ESEQ&#34; class=&#34;headerlink&#34; title=&#34;消除ESEQ&#34;&gt;&lt;/a&gt;消除ESEQ&lt;/h4&gt;&lt;h5 id=&#34;规则&#34;&gt;&lt;a href=&#34;#规则&#34; class=&#34;headerlink&#34; title=&#34;规则&#34;&gt;&lt;/a&gt;规则&lt;/h5&gt;&lt;p&gt;合并副作用，提升ESEQ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ESEQ(s1, ESEQ(s2,e)) &amp;#x3D;&amp;gt; ESEQ(SEQ(s1,s2),e)&lt;/li&gt;
&lt;li&gt;BINOP(op, ESEQ(s, e1), e2) ⇒ ESEQ(s, BINOP(op, e1, e2))&lt;/li&gt;
&lt;li&gt;MEM(ESEQ(s, e1)) ⇒ ESEQ(s, MEM(e1))&lt;/li&gt;
&lt;li&gt;JUMP(ESEQ(s, e1)) ⇒ SEQ(s, JUMP(e1))&lt;/li&gt;
&lt;li&gt;CJUMP(op, ESEQ(s, e1), e2, l1, l2) ⇒ SEQ(s, CJUMP(op, e1, e2, l1, l2))&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;Commutativity（重点）&#34;&gt;&lt;a href=&#34;#Commutativity（重点）&#34; class=&#34;headerlink&#34; title=&#34;Commutativity（重点）&#34;&gt;&lt;/a&gt;Commutativity（重点）&lt;/h5&gt;&lt;p&gt;当&lt;code&gt;ESEQ&lt;/code&gt;出现在&lt;code&gt;BINOP&lt;/code&gt;的右操作数，即$BINOP(op, e1, ESEQ(s, e2))$时，我们不能再像之前那样简单地把&lt;code&gt;s&lt;/code&gt;提升到整个&lt;code&gt;BINOP&lt;/code&gt;之前，因为&lt;code&gt;e1&lt;/code&gt;的求值在&lt;code&gt;e2&lt;/code&gt;之前，否则可能影响&lt;code&gt;e1&lt;/code&gt;的计算结果&lt;/p&gt;
&lt;p&gt;Commutativity：交换性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Commuting: s不影响e1的结果&lt;ul&gt;
&lt;li&gt;rule: $BINOP(op, e1, ESEQ(s, e2)) &amp;#x3D; ESEQ(s, BINOP(op, e1, e2))$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Non-commuting: s会影响e1的结果，把e1的结果显算出来放到临时变量t里，再提升s&lt;ul&gt;
&lt;li&gt;rule: $BINOP(op, ESEQ(s, e1), e2) &amp;#x3D; ESEQ(MOVE(TEMP t, e1), ESEQ(s, BINOP(op, TEMP t, e2)))$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将CALL移到顶层&#34;&gt;&lt;a href=&#34;#将CALL移到顶层&#34; class=&#34;headerlink&#34; title=&#34;将CALL移到顶层&#34;&gt;&lt;/a&gt;将CALL移到顶层&lt;/h4&gt;&lt;p&gt;方法：立即将每一个返回值赋给一个新的临时寄存器&lt;br&gt;$$&lt;br&gt;CALL(fun, args) ⇒ ESEQ(MOVE(TEMP t, CALL(fun, args)), TEMP t)&lt;br&gt;$$&lt;/p&gt;
&lt;h4 id=&#34;消除SEQ&#34;&gt;&lt;a href=&#34;#消除SEQ&#34; class=&#34;headerlink&#34; title=&#34;消除SEQ&#34;&gt;&lt;/a&gt;消除SEQ&lt;/h4&gt;&lt;p&gt;$$&lt;br&gt;SEQ(SEQ(a, b), c) &amp;#x3D; SEQ(a, SEQ(b, c))&lt;br&gt;$$&lt;br&gt;把SEQ变成一个线性语句表：$SEQ(s_1, SEQ(s_2, …, SEQ(s_{n-1}, s_n) …))$&lt;br&gt;就可以认为是由语句组成的简单列表$s_1, s_2, …, s_n$&lt;/p&gt;
&lt;h3 id=&#34;处理CJUMP&#34;&gt;&lt;a href=&#34;#处理CJUMP&#34; class=&#34;headerlink&#34; title=&#34;处理CJUMP&#34;&gt;&lt;/a&gt;处理CJUMP&lt;/h3&gt;&lt;p&gt;重排CJUMP，使得每个$CJUMP(op, e_1, e_2, l_t, l_f)后面都紧跟着$LABEL(l_f)$&lt;br&gt;分两步：1. 取一列canonical tree由它们形成basic block 2. 对basic block进行排序形成trace&lt;/p&gt;
&lt;h4 id=&#34;Basic-Block&#34;&gt;&lt;a href=&#34;#Basic-Block&#34; class=&#34;headerlink&#34; title=&#34;Basic Block&#34;&gt;&lt;/a&gt;Basic Block&lt;/h4&gt;&lt;p&gt;一个基本块是一段连续的指令序列，即:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个语句是一个&lt;code&gt;LABEL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最后一个语句是&lt;code&gt;JUMP&lt;/code&gt;或&lt;code&gt;CJUMP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;没有其他的&lt;code&gt;LABEL&lt;/code&gt;, &lt;code&gt;JUMP&lt;/code&gt;或&lt;code&gt;CJUMP&lt;/code&gt;&lt;br&gt;划分方法：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;每一个&lt;code&gt;LABEL&lt;/code&gt;都对应一个基本块的开始&lt;/li&gt;
&lt;li&gt;每一个&lt;code&gt;JUMP&lt;/code&gt;或&lt;code&gt;CJUMP&lt;/code&gt;都对应一个基本块的结束&lt;/li&gt;
&lt;li&gt;如果遇到&lt;code&gt;LABEL1&lt;/code&gt; -&amp;gt; &lt;code&gt;LABEL2&lt;/code&gt;,就在&lt;code&gt;LABEL2&lt;/code&gt;前面加一个&lt;code&gt;JUMP&lt;/code&gt;到&lt;code&gt;LABEL2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果遇到开头没有&lt;code&gt;LABEL&lt;/code&gt;的，则加一个&lt;code&gt;LABEL&lt;/code&gt;（比如程序的开头）&lt;/li&gt;
&lt;li&gt;出口处理：添加一个LABEL &lt;code&gt;done&lt;/code&gt;表示出口处理的开始，并把$JUMP done$放最后一个block末尾&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;Trace&#34;&gt;&lt;a href=&#34;#Trace&#34; class=&#34;headerlink&#34; title=&#34;Trace&#34;&gt;&lt;/a&gt;Trace&lt;/h4&gt;&lt;p&gt;现在我们可以按任意顺序来安排这些基本块，并且程序执行的结果仍是相同的——因为无论怎么排序，每个基本块的末尾都能转移到一个正确的位置。我们可以利用这一点来选择适当的基本块排列顺序，以满足每个&lt;code&gt;CJUMP&lt;/code&gt;之后都跟随它的false标号这一条件。&lt;br&gt;与此同时，我们也可以安排基本块使得无条件转移&lt;code&gt;JUMP&lt;/code&gt;之后直接跟随的是它们的目标标号。这样便可以删除这些无条件转移，从而使编译生成的程序的执行速度更快。&lt;/p&gt;
&lt;p&gt;把basic block排成trace的方法也很简单：&amp;#x3D;&amp;#x3D;从每个基本块开始，追踪JUMP链，标记遇到的每一个未标记的基本快并添加到当前trace中，最终到达一个其后继都标记过的块，就是结束块。之后再选则一个未标记的基本块开始，重复上述过程。&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;因为轨迹调度不可能覆盖所有情况，所以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果CJUMP 后跟 true label: 条件取反，交换 true&amp;#x2F;false，改成：&lt;br&gt;$$&lt;br&gt;CJUMP(!cond, lf, lt)&lt;br&gt;$$&lt;/li&gt;
&lt;li&gt;CJUMP 后跟的不是 true 也不是 false: 创建中间 label，插入 JUMP&lt;br&gt;$$&lt;br&gt;CJUMP(cond, lt, lf) &amp;#x3D;&amp;gt; CJUMP(cond, lt, l’f) LABEL l’f   JUMP NAME(lf)&lt;br&gt;$$&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;最优轨迹-Optimal-Trace&#34;&gt;&lt;a href=&#34;#最优轨迹-Optimal-Trace&#34; class=&#34;headerlink&#34; title=&#34;最优轨迹(Optimal Trace)&#34;&gt;&lt;/a&gt;最优轨迹(Optimal Trace)&lt;/h4&gt;&lt;p&gt;对于basic block可能有不同的trace划分方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hot Path Prioritization（优先热路径）: 优先将**运行频率高的基本块（hot blocks）**合并在同一条轨迹（trace）里，减少跳转，提高局部性。&lt;br&gt;+++info example&lt;br&gt;假设 if-else 中 if 分支占 90% 执行概率，else 只有 10%：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;tiger&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; x &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; then&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a := a + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;   -- 热路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a := a - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;生成时应把 x &amp;gt; 0 为真的路径（包括 CJUMP 的 false 分支）安排成 fall-through，避免跳转开销出现在热路径上。&lt;br&gt;+++&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Locality Enhancement（增强局部性）: 把逻辑上相关联的代码块放得更近一些，让它们在内存中“邻近”。&lt;ul&gt;
&lt;li&gt;原因：&lt;ul&gt;
&lt;li&gt;更好地利用 CPU cache、预取机制。&lt;/li&gt;
&lt;li&gt;避免指令 cache miss 导致性能下降。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如：将循环体和循环条件代码块排在一起（而不是让条件跳到远处），从而保持指令流顺序性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jump Minimization（最小化跳转）: 尽量减少无条件跳转（JUMP）和不必要的条件跳转（CJUMP），尤其在常走路径上，	减少分支预测失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;br&gt;哪个划分比较好？&lt;br&gt;根据3，c比a好；&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/17/computer-science/compile-principles/ch9/</guid>
            <title>指令选择</title>
            <link>http://example.com/2025/06/17/computer-science/compile-principles/ch9/</link>
            <category>指令选择</category>
            <pubDate>Tue, 17 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;指令选择&#34;&gt;&lt;a href=&#34;#指令选择&#34; class=&#34;headerlink&#34; title=&#34;指令选择&#34;&gt;&lt;/a&gt;指令选择&lt;/h1&gt;&lt;p&gt;找出实现一个给定的IR Tree的恰当机器指令序列。Mapping IR into abstract assembly code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Abstract assembly &amp;#x3D; assembly with infinite registers&lt;ul&gt;
&lt;li&gt;Invent new temporaries for intermediate results&lt;/li&gt;
&lt;li&gt;Map to actual registers later&lt;br&gt;Tree pattern, 也叫tile&lt;br&gt;本质上是pattern matching, 我们使用tree covering 来实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们&lt;code&gt;Jouette&lt;/code&gt;体系将树模式映射为指令:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;寄存器中可以存储数据或地址，每条指令可以访问任意寄存器&lt;/li&gt;
&lt;li&gt;寄存器r0的值永远是0&lt;/li&gt;
&lt;li&gt;每条指令的latency都是一周期（除了MOVEM的周期是m）&lt;/li&gt;
&lt;li&gt;每个周期执行一条指令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/f2.jpg&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;br&gt;将IR与后端的机器指令都转换为树结构。这样就把指令选择问题转换为机器指令树覆盖全IR Tree的问题。&lt;br&gt;一棵树可以有多种tiling方式&lt;/p&gt;
&lt;h2 id=&#34;Optimal-Tiling-Optimum-Tiling&#34;&gt;&lt;a href=&#34;#Optimal-Tiling-Optimum-Tiling&#34; class=&#34;headerlink&#34; title=&#34;Optimal Tiling &amp;amp; Optimum Tiling&#34;&gt;&lt;/a&gt;Optimal Tiling &amp;amp; Optimum Tiling&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Optimum Tiling：使得tiling数最少，是&amp;#x3D;&amp;#x3D;全局最优&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;li&gt;Optimal Tiling：No two adjacent tiles can be combined into a single tile of lower cost，是&amp;#x3D;&amp;#x3D;局部最优&amp;#x3D;&amp;#x3D;&lt;br&gt;一个optimum tiling必定是optimal tiling&lt;br&gt;&lt;img data-src=&#34;/f3.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Algorithms-for-Instruction-Selection&#34;&gt;&lt;a href=&#34;#Algorithms-for-Instruction-Selection&#34; class=&#34;headerlink&#34; title=&#34;Algorithms for Instruction Selection&#34;&gt;&lt;/a&gt;Algorithms for Instruction Selection&lt;/h2&gt;&lt;h3 id=&#34;Maximal-Munch-Find-an-optimal-tiling&#34;&gt;&lt;a href=&#34;#Maximal-Munch-Find-an-optimal-tiling&#34; class=&#34;headerlink&#34; title=&#34;Maximal Munch: Find an optimal tiling&#34;&gt;&lt;/a&gt;Maximal Munch: Find an optimal tiling&lt;/h3&gt;&lt;p&gt;最大匹配：贪心算法、自顶向下&lt;br&gt;方法：从IR树的根节点开始，用&amp;#x3D;&amp;#x3D;最大的&amp;#x3D;&amp;#x3D;tile覆盖当前节点（包含最多节点的），然后在子树中重复此过程&lt;/p&gt;
&lt;h3 id=&#34;DP&#34;&gt;&lt;a href=&#34;#DP&#34; class=&#34;headerlink&#34; title=&#34;DP&#34;&gt;&lt;/a&gt;DP&lt;/h3&gt;&lt;p&gt;动态规划：自底向上&lt;br&gt;方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;递归计算每个子树的最优平铺成本&lt;/li&gt;
&lt;li&gt;对于每个节点，考虑所有可能的匹配平铺&lt;/li&gt;
&lt;li&gt;对于每个匹配平铺，计算其成本如下：cost &amp;#x3D; tile_cost + sum（costs_of_children）&lt;/li&gt;
&lt;li&gt;选择成本最低的平铺&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;对于$CONST i$，它的代价为1( ADD r1, r0, i)&lt;/li&gt;
&lt;li&gt;对于这棵树，有三种匹配方法&lt;br&gt;&lt;img data-src=&#34;/f4.jpg&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/f5.jpg&#34;&gt;&lt;br&gt;因为2&amp;lt;3，所以我们从cost&amp;#x3D;2的两个任选一个&lt;br&gt;接下来对于MEM，用的都是LOAD，代价都是1，2&amp;lt;3所以选cost&amp;#x3D;2的&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;指令发射&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function &lt;span class=&#34;title function_&#34;&gt;Emission&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(node n)&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    For each leaf l_i of the tile selected at node n:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;Emission&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(l_i)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Emit the instruction matched at node n&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;最大匹配-vs-动态规划&#34;&gt;&lt;a href=&#34;#最大匹配-vs-动态规划&#34; class=&#34;headerlink&#34; title=&#34;最大匹配 vs 动态规划&#34;&gt;&lt;/a&gt;最大匹配 vs 动态规划&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;T&lt;/strong&gt; - tile的总种类数  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;K&lt;/strong&gt; - 一个matching tile平均覆盖的节点数  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;K’&lt;/strong&gt; - 需要检查的最大tile尺寸（即最大的瓦片包含的节点数）  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T’&lt;/strong&gt; - 每个树节点平均能匹配上的tile数量  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;N&lt;/strong&gt; - 输入的中间表示IR Tree中的总节点数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两种算法的运行时间复杂度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;最大匹配（Maximal Munch）&lt;/strong&gt; - 其时间复杂度与&lt;br&gt;$$&lt;br&gt;\frac{(K’ + T’) * K}{K} * N &amp;#x3D; (K’ + T’) * N&lt;br&gt;$$&lt;br&gt;成正比&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;动态规划（Dynamic Programming）&lt;/strong&gt; - 其时间复杂度与&lt;br&gt;$$&lt;br&gt;(K’ + T’) * N&lt;br&gt;$$&lt;br&gt;成正比&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Tree-Grammar-树文法&#34;&gt;&lt;a href=&#34;#Tree-Grammar-树文法&#34; class=&#34;headerlink&#34; title=&#34;Tree Grammar 树文法&#34;&gt;&lt;/a&gt;Tree Grammar 树文法&lt;/h2&gt;&lt;p&gt;问题：对于具有复杂指令集和多种寄存器类型及寻址模式的机器，难以使用简单的tree pattern和tiling算法。&lt;br&gt;用一种文法来描述tiles，代替手写过程式匹配代码，支持自动化的指令选择，增强了可移植性&lt;br&gt;图没看懂，后面再回来研究&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/16/computer-science/compile-principles/ch7/</guid>
            <title>IR</title>
            <link>http://example.com/2025/06/16/computer-science/compile-principles/ch7/</link>
            <category>中间代码</category>
            <pubDate>Mon, 16 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;IR&#34;&gt;&lt;a href=&#34;#IR&#34; class=&#34;headerlink&#34; title=&#34;IR&#34;&gt;&lt;/a&gt;IR&lt;/h1&gt;&lt;p&gt;Intermediate Representation&lt;br&gt;解决高级语言和目标机器汇编语言之间的转化&lt;br&gt;为什么需要IR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更模块化、可迁移&lt;/li&gt;
&lt;li&gt;分层分析和优化&lt;br&gt;IR可以有好多层：IR1-&amp;gt;IR2-&amp;gt;…-&amp;gt;IRn&lt;br&gt;+++info 编译流程划分&lt;br&gt;前端：源代码-&amp;gt;词法分析-&amp;gt;语法分析-&amp;gt;语义分析（IR之前的都是）&lt;br&gt;中端：基于IR的分析与变换（可能生成新IR，可以做一些机器无关优化比如循环展开等）&lt;br&gt;后端：指令选择-&amp;gt;寄存器分配-&amp;gt;指令调度-&amp;gt;机器码（IR之后的）&lt;br&gt;+++&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Three-Address-Code&#34;&gt;&lt;a href=&#34;#Three-Address-Code&#34; class=&#34;headerlink&#34; title=&#34;Three-Address Code&#34;&gt;&lt;/a&gt;Three-Address Code&lt;/h2&gt;&lt;p&gt;最多有三个操作数&lt;br&gt;x &amp;#x3D; y op z&lt;br&gt;“地址”可以具有如下形式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源程序中的名字(name)&lt;/li&gt;
&lt;li&gt;常量 (constant)&lt;/li&gt;
&lt;li&gt;临时变量(temporary)&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;br&gt;最常见的实现方法是将三地址代码作为四元组实现&lt;br&gt;+++info example&lt;br&gt;t1&amp;#x3D;x&amp;gt;0                  (gt, x, 0, t1)&lt;br&gt;if_false t1 goto L1     (if_f, t1, L1, _)&lt;br&gt;fact&amp;#x3D;1                  (asn, 1, fact, _)&lt;br&gt;label L2                (lab, L2, _, _)&lt;br&gt;+++&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;IR-Tree&#34;&gt;&lt;a href=&#34;#IR-Tree&#34; class=&#34;headerlink&#34; title=&#34;IR Tree&#34;&gt;&lt;/a&gt;IR Tree&lt;/h2&gt;&lt;p&gt;两大类节点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;表达式Exp&lt;/li&gt;
&lt;li&gt;语句Stmt&lt;br&gt;文法：&lt;br&gt;&lt;img data-src=&#34;/f2.jpg&#34;&gt;&lt;br&gt;表达式：&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Node&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;CONST(i)&lt;/td&gt;
&lt;td&gt;整数常量i&lt;/td&gt;
&lt;td&gt;CONST(42) → the value 42&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NAME(n)&lt;/td&gt;
&lt;td&gt;符号常量n，通常是一个label，值是label的地址&lt;/td&gt;
&lt;td&gt;NAME(L1) → address of label L1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TEMP(t)&lt;/td&gt;
&lt;td&gt;临时变量t (like register)&lt;/td&gt;
&lt;td&gt;TEMP(t123) → contents of temporary t123&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BINOP(o,e1,e2)&lt;/td&gt;
&lt;td&gt;对e1和e2执行二元操作o&lt;/td&gt;
&lt;td&gt;BINOP(PLUS,TEMP(t1),CONST(1)) → t1+1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEM(e)&lt;/td&gt;
&lt;td&gt;Memory access&lt;/td&gt;
&lt;td&gt;MEM(CONST(100)) → contents at address 100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CALL(f,l)&lt;/td&gt;
&lt;td&gt;Function call, l是参数列表&lt;/td&gt;
&lt;td&gt;CALL(NAME(print),[TEMP(t1)]) → call print(t1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESEQ(s,e)&lt;/td&gt;
&lt;td&gt;先执行语句s，再求值表达式e并返回e的结果&lt;/td&gt;
&lt;td&gt;ESEQ(MOVE(TEMP(t),CONST(1)),TEMP(t)) → (t&amp;#x3D;1; t)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语句：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Node&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;MOVE(TEMP t, e)&lt;/td&gt;
&lt;td&gt;将表达式e的值赋给临时变量t&lt;/td&gt;
&lt;td&gt;MOVE(TEMP(t1), CONST(42)) → t1 &amp;#x3D; 42&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MOVE(MEM(e1), e2)&lt;/td&gt;
&lt;td&gt;将表达式e2的值存储到由e1指定的内存地址中&lt;/td&gt;
&lt;td&gt;MOVE(MEM(TEMP(t1)), CONST(42)) → *t1 &amp;#x3D; 42&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EXP(e)&lt;/td&gt;
&lt;td&gt;计算表达式e的值但不返回结果，通常用于有副作用的操作（如函数调用）&lt;/td&gt;
&lt;td&gt;EXP(CALL(NAME(print), …)) → 调用print()函数以产生效果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JUMP(e, labs)&lt;/td&gt;
&lt;td&gt;无条件跳转到由e指定的地址&lt;/td&gt;
&lt;td&gt;JUMP(NAME(L1), [L1]) → goto L1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CJUMP(o,e1,e2,t,f)&lt;/td&gt;
&lt;td&gt;条件跳转，根据操作o对e1和e2的结果决定跳转到t或f&lt;/td&gt;
&lt;td&gt;CJUMP(LT, TEMP(t1), CONST(0), L1, L2) → 如果t1 &amp;lt; 0则跳转到L1，否则跳转到L2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SEQ(s1, s2)&lt;/td&gt;
&lt;td&gt;语句序列，先执行s1再执行s2&lt;/td&gt;
&lt;td&gt;SEQ(MOVE(…), JUMP(…)) → 先赋值再跳转&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LABEL(n)&lt;/td&gt;
&lt;td&gt;定义一个标签&lt;/td&gt;
&lt;td&gt;LABEL(L1) → L1:&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;例子：&lt;br&gt;&lt;img data-src=&#34;/f3.jpg&#34;&gt;&lt;br&gt;ADD那个地方写成BINOP的写法也可以&lt;/p&gt;
&lt;h2 id=&#34;翻译AST成IR-Tree&#34;&gt;&lt;a href=&#34;#翻译AST成IR-Tree&#34; class=&#34;headerlink&#34; title=&#34;翻译AST成IR Tree&#34;&gt;&lt;/a&gt;翻译AST成IR Tree&lt;/h2&gt;&lt;p&gt;把AST表达式分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ex: 有结果的AST表达式比如a+b&lt;/li&gt;
&lt;li&gt;Nx：无结果的语句的比如print&lt;/li&gt;
&lt;li&gt;Cx：条件语句，值为bool的AST表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;translate-Exp&#34;&gt;&lt;a href=&#34;#translate-Exp&#34; class=&#34;headerlink&#34; title=&#34;translate Exp&#34;&gt;&lt;/a&gt;translate Exp&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;翻译简单变量：&lt;br&gt;在函数中访问一个局部变量实际上是访问它在当前栈帧中的位置，所以访问一个距离fp的offset为k的局部变量v，其IR Tree表示为:&lt;br&gt;$$&lt;br&gt;MEM(BINOP(PLUS, TEMP fp, CONST k))&lt;br&gt;$$&lt;br&gt;&lt;img data-src=&#34;/f4.jpg&#34;&gt;&lt;br&gt;如果通过static link访问一个变量，就要嵌套好几层MEM和BINOP&lt;br&gt;比如这个访问嵌套两层外面的x&lt;br&gt;最内层使用 CONST(8)：是因为需要从 inner 函数的帧指针 FP 开始，偏移 8 字节来访问静态链，该静态链指向 middle 函数的帧。&lt;br&gt;中间层和最外层使用 CONST(0)：是因为它们分别通过静态链直接访问 outer 函数的帧和变量 x，不需要额外的偏移&lt;br&gt;&lt;img data-src=&#34;/f5.jpg&#34;&gt;&lt;br&gt;:::danger&lt;br&gt;这个地方为什么内层是8中层是0存疑&lt;br&gt;:::&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;左值和右值：&amp;#x3D;左右的&lt;br&gt;MEM(addr)可以是左值也可以是右值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scalar L-value(Tiger): 一个地址&lt;/li&gt;
&lt;li&gt;Structured L-value(Pascal&amp;#x2F;C): 一块内存&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;翻译算术运算&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;二元: BINOP(op, e1, e2)&lt;/li&gt;
&lt;li&gt;一元: &lt;ul&gt;
&lt;li&gt;-x &amp;#x3D;&amp;#x3D;&amp;gt; BINOP(MINUS, CONST(0), e_x)&lt;/li&gt;
&lt;li&gt;~x &amp;#x3D;&amp;#x3D;&amp;gt; BINOP(XOR, e_x, CONST(-1))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;数组访问&lt;br&gt;$$&lt;br&gt;MEM(BINOP(PLUS, MEM(e_a), BINOP(MUL, e_i, CONST(W))))&lt;br&gt;$$&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;e_a&lt;/code&gt; 是表示变量 &lt;code&gt;a&lt;/code&gt; 的表达式，通常是&amp;#x3D;&amp;#x3D; &lt;code&gt;MEM(+(TEMP(fp), CONST(k_a)))&lt;/code&gt;&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MEM(e_a)&lt;/code&gt;：&amp;#x3D;&amp;#x3D;获取存储在变量 &lt;code&gt;a&lt;/code&gt; 中的值，即数组基地址&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e_i&lt;/code&gt; 是计算索引 &lt;code&gt;i&lt;/code&gt; 的表达式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BINOP(MUL, e_i, CONST(W))&lt;/code&gt;：计算偏移&lt;br&gt;&lt;img data-src=&#34;/f6.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;记录字段r.f访问:&lt;br&gt;$$&lt;br&gt;MEM(BINOP(PLUS, MEM(e_r), BINOP(MUL, n, CONST(W))))&lt;br&gt;$$&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;翻译控制流&lt;br&gt;对于if e1 op e2 then stmt1 else stmt2翻译成&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;IR&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 6个SEQ&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SEQ(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CJUMP(op, e1, e2, t, f),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SEQ(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        LABEL(t),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        SEQ(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            stm1,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            SEQ(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                JUMP(NAME(end)),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                SEQ(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    LABEL(f),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    SEQ(stm2, LABEL(end))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Tiger的逻辑运算符&amp;amp;(and)和|(or)需要实现短路求值：只计算必要的操作数&lt;br&gt;每个Cx是一个Label&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑与 (a &amp;amp; b)的短路规则：&lt;ul&gt;
&lt;li&gt;计算a&lt;br&gt;  -若a为假，直接得到假结果（不计算b）&lt;br&gt;  -若a为真，继续计算b，最终结果即为b的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;逻辑或 (a | b)的短路规则：&lt;br&gt;  -计算a&lt;br&gt;  -若a为真，直接得到真结果（不计算b）&lt;ul&gt;
&lt;li&gt;若a为假，继续计算b，最终结果即为b的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;循环语句&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;tiger&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; a &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a := a - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;翻译成&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;IR&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;SEQ(LABEL test, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SEQ(CJUMP(GT, TEMP a, CONST &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, body, done), &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        SEQ(LABEL body, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            SEQ(MOVE(TEMP a, BINOP(MINUS, TEMP a, CONST &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)), &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                SEQ(JUMP(NAME(test), [test]), &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    LABEL done)))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;break翻译为直接跳转到done&lt;br&gt;for循环我懒得写了，也是一个道理&lt;br&gt;和汇编差不多意思&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;翻译函数&lt;br&gt;$$&lt;br&gt;CALL(NAME(l_f), [sl, a_1, …, a_n])&lt;br&gt;$$&lt;br&gt;sl是static link。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;translate-Declaration&#34;&gt;&lt;a href=&#34;#translate-Declaration&#34; class=&#34;headerlink&#34; title=&#34;translate Declaration&#34;&gt;&lt;/a&gt;translate Declaration&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Variable declaration&lt;/li&gt;
&lt;li&gt;Type declaration&lt;/li&gt;
&lt;li&gt;Function declaration&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;翻译变量声明&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;tiger&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var x := &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var y := x + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;in &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x + y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;IR&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ESEQ( &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SEQ( &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        MOVE(MEM(+(FP, CONST(x_offset))), CONST(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)), &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        MOVE(MEM(+(FP, CONST(y_offset))), &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        BINOP(PLUS, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        MEM(+(FP, CONST(x_offset))), &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CONST(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ), &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BINOP(PLUS, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    MEM(+(FP, CONST(x_offset))), &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    MEM(+(FP, CONST(y_offset)))) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;let body in e end翻译成ESEQ(body, e)&lt;br&gt;变量定义翻译成 MEM(+(FP, CONST(offset)))&lt;br&gt;初始化翻译成 MOVE(MEM(+(FP, CONST(offset))), CONST(value))&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;p&gt;类型声明&lt;br&gt;No need to generate any IR tree code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数声明&lt;br&gt; – Prologue（序言）&lt;br&gt; – Body（函数体）&lt;br&gt; – Epilogue（尾声）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Prologue&lt;ul&gt;
&lt;li&gt;pseudo-instructions to announce the beginning of a function&lt;/li&gt;
&lt;li&gt;定义函数标签用于跳转&amp;#x2F;调用&lt;/li&gt;
&lt;li&gt;修改栈指针（SP），为新栈帧分配空间，一般是$SP :&amp;#x3D; SP - frame_size$&lt;/li&gt;
&lt;li&gt;保存被调用者需要保存的寄存器（callee-save），如 $s0-$s7；保存返回地址（RA）&lt;/li&gt;
&lt;li&gt;保存函数参数到栈中（尤其是传值调用时）；保存静态链（static link）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/15/computer-science/compile-principles/ch6/</guid>
            <title>活动记录</title>
            <link>http://example.com/2025/06/15/computer-science/compile-principles/ch6/</link>
            <category>活动记录</category>
            <pubDate>Sun, 15 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Activation-Record-Stack-Frame&#34;&gt;&lt;a href=&#34;#Activation-Record-Stack-Frame&#34; class=&#34;headerlink&#34; title=&#34;Activation Record&amp;#x2F;Stack Frame&#34;&gt;&lt;/a&gt;Activation Record&amp;#x2F;Stack Frame&lt;/h1&gt;&lt;p&gt;函数的栈帧是栈上用来放函数的局部变量、参数、返回地址以及其他临时变量的区域&lt;br&gt;stack一般从高地址向低地址，heap从低地址向高地址&lt;br&gt;layout:&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;incoming arguments: 存储caller传递给callee的参数&lt;/li&gt;
&lt;li&gt;frame pointer: 帧指针，用来访问incoming arguments，从低向高是argument 1, argument 2, …&lt;/li&gt;
&lt;li&gt;local variables: 存储函数的局部变量（还有一些保存在寄存器里）&lt;/li&gt;
&lt;li&gt;return address: 存储需要返回caller的哪里；non-leaf过程会把return address写入栈帧里面&lt;/li&gt;
&lt;li&gt;temporaries: 存储临时变量，复杂表达式拆出来的中间变量放的地方&lt;/li&gt;
&lt;li&gt;saved registers&lt;/li&gt;
&lt;li&gt;outgoing arguments: 存储当前函数要传递给别的函数的参数&lt;/li&gt;
&lt;li&gt;stack pointer: 栈指针，从低向高&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;函数调用流程：&#34;&gt;&lt;a href=&#34;#函数调用流程：&#34; class=&#34;headerlink&#34; title=&#34;函数调用流程：&#34;&gt;&lt;/a&gt;函数调用流程：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;g调用f的时候&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;进入f的时候，保存旧的FP(g的FP)&lt;/li&gt;
&lt;li&gt;把FP设置为原来的SP，把SP &amp;#x3D; SP - frame size&lt;br&gt;&lt;img data-src=&#34;/f2.jpg&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;f返回的时候&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;让SP &amp;#x3D; FP(恢复g的SP)&lt;/li&gt;
&lt;li&gt;从内存中读出g的FP恢复回去&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果栈帧大小固定就只需要FP不需要SP了，因为FP &amp;#x3D; SP + frame size&lt;/p&gt;
&lt;h2 id=&#34;saved-register&#34;&gt;&lt;a href=&#34;#saved-register&#34; class=&#34;headerlink&#34; title=&#34;saved register&#34;&gt;&lt;/a&gt;saved register&lt;/h2&gt;&lt;p&gt;函数g调用f的时候，用到了寄存器r，调用f的时候要把r保存在saved register中，等调用结束再恢复回去&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;caller-saved register: 函数调用的时候用到的寄存器，调用结束后可以恢复&lt;/li&gt;
&lt;li&gt;callee-saved register: 函数调用的时候用不到的寄存器，调用结束后不能恢复&lt;br&gt;&amp;#x3D;&amp;#x3D;FP是由callee保存和恢复的&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参数传递&#34;&gt;&lt;a href=&#34;#参数传递&#34; class=&#34;headerlink&#34; title=&#34;参数传递&#34;&gt;&lt;/a&gt;参数传递&lt;/h2&gt;&lt;p&gt;一般约定把前k(4 or 6)个参数放在寄存器传递，剩下的参数放在栈中传递&lt;br&gt;四种传参方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不给叶过程 (leaf procedure) 分配栈帧&lt;br&gt;叶过程是指不调用其他过程的过程。在这种情况下，可以不为叶过程分配栈帧&lt;/li&gt;
&lt;li&gt;过程间寄存器分配 (interprocedural register allocation)&lt;br&gt;这种方法需要先分析代码中全部的函数，然后再根据分析结果来分配寄存器。&lt;br&gt;假设有一个程序包含多个函数，通过全局分析发现某些变量在多个函数之间频繁使用，可以为其分配固定的寄存器，避免频繁的内存读写&lt;/li&gt;
&lt;li&gt;若变量 x 不再被使用，可以直接写其寄存器，不需要再保存 x 到栈帧中&lt;br&gt;当一个变量在当前作用域内不再被使用时，可以直接将其值写入寄存器，而无需保存到栈帧中&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;exampleFunction&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y = x * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 使用x后，x不再被使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 直接将y的值写入寄存器，无需保存x到栈帧中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Result: %d\n&amp;quot;&lt;/span&gt;, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;寄存器窗口技术 (register windows)&lt;br&gt;在每次函数调用时，系统会自动切换到一组新的寄存器，称为寄存器窗口。这样，每个函数都可以独立地使用自己的寄存器，而不会影响其他函数的寄存器状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;functionA&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 使用寄存器窗口A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;functionB&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 使用寄存器窗口B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    functionA();  &lt;span class=&#34;comment&#34;&gt;// 调用functionA时，自动切换到寄存器窗口A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Frame-Resident-Variables&#34;&gt;&lt;a href=&#34;#Frame-Resident-Variables&#34; class=&#34;headerlink&#34; title=&#34;Frame-Resident Variables&#34;&gt;&lt;/a&gt;Frame-Resident Variables&lt;/h2&gt;&lt;p&gt;什么情况下要把变量写入栈帧里面？、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the varibles will be passed by reference 变量传地址&amp;#x2F;引用&lt;/li&gt;
&lt;li&gt;变量被嵌套在函数内部的函数访问（不绝对）&lt;/li&gt;
&lt;li&gt;变量太大了没法直接放寄存器&lt;/li&gt;
&lt;li&gt;变量是一个数组&lt;/li&gt;
&lt;li&gt;传递参数&lt;/li&gt;
&lt;li&gt;有太多局部变量和临时变量放不下了&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;escape 逃逸：如果一个变量需要传地址&amp;#x2F;取地址&amp;#x2F;被过程内部嵌套的函数访问，那么这个变量就会逃逸。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;static-links&#34;&gt;&lt;a href=&#34;#static-links&#34; class=&#34;headerlink&#34; title=&#34;static links&#34;&gt;&lt;/a&gt;static links&lt;/h2&gt;&lt;p&gt;在嵌套的函数声明中，内层函数是有可能用到外层函数的局部变量的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static links是指向上一层嵌套层级的栈帧的指针。内层嵌套函数调用外层定义的变量的时候需要用到static links，否则无法寻址。&lt;br&gt;&lt;img data-src=&#34;/f3.jpg&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/f4.jpg&#34;&gt;&lt;br&gt;只有调用自身的时候才传递自己的static link作为static link，其他的都是把外层函数的fp作为static link&lt;br&gt;如果要访问外层变量，就顺着static一层一层查上去直到找到了为止。&lt;br&gt;其他访问方法：&lt;/li&gt;
&lt;li&gt;嵌套层次显示表(display)&lt;br&gt;建立一个全局数组，位置i包含一个指针，指向最近一次进入的，其静态嵌套深度是i的过程的栈帧&lt;br&gt;&lt;img data-src=&#34;/f5.jpg&#34;&gt;&lt;br&gt;先给它们标上嵌套深度&lt;br&gt;直接把链表变成数组了，需要用到一个变量，就查看当前变量的嵌套深度i然后直接找那个数组i位置的座位fp地址来找&lt;/li&gt;
&lt;li&gt;lambda lifting&lt;br&gt;g调用f时，g中每一个实际（或被嵌套在f内的任意函数）访问了的变量，都将作为额外的参数传递给f&lt;br&gt;把内部的函数，从内往外进行改写，改写函数的参数实现lambda lifting&lt;br&gt;&lt;img data-src=&#34;/f6.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tiger编译器的栈帧&#34;&gt;&lt;a href=&#34;#tiger编译器的栈帧&#34; class=&#34;headerlink&#34; title=&#34;tiger编译器的栈帧&#34;&gt;&lt;/a&gt;tiger编译器的栈帧&lt;/h2&gt;&lt;p&gt;tiger不支持高阶函数&lt;br&gt;看不完了。。再说吧&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/05/14/computer-science/computer-organization/ch2/</guid>
            <title>Ch2</title>
            <link>http://example.com/2025/05/14/computer-science/computer-organization/ch2/</link>
            <category>数据的表示与运算</category>
            <pubDate>Wed, 14 May 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Ch2-数据的表示和运算&#34;&gt;&lt;a href=&#34;#Ch2-数据的表示和运算&#34; class=&#34;headerlink&#34; title=&#34;Ch2 数据的表示和运算&#34;&gt;&lt;/a&gt;Ch2 数据的表示和运算&lt;/h1&gt;&lt;h2 id=&#34;2-1-进位计数制及其相互转换&#34;&gt;&lt;a href=&#34;#2-1-进位计数制及其相互转换&#34; class=&#34;headerlink&#34; title=&#34;2.1 进位计数制及其相互转换&#34;&gt;&lt;/a&gt;2.1 进位计数制及其相互转换&lt;/h2&gt;&lt;h3 id=&#34;2-1-1&#34;&gt;&lt;a href=&#34;#2-1-1&#34; class=&#34;headerlink&#34; title=&#34;2.1.1&#34;&gt;&lt;/a&gt;2.1.1&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;十进制二进制八进制十六进制转换&lt;ul&gt;
&lt;li&gt;略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-1-2-定点数的编码表示&#34;&gt;&lt;a href=&#34;#2-1-2-定点数的编码表示&#34; class=&#34;headerlink&#34; title=&#34;2.1.2 定点数的编码表示&#34;&gt;&lt;/a&gt;2.1.2 定点数的编码表示&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定点数一般表示定点小数和定点整数，小数是符号位.xxx，整数是符号位xxxx.0&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;感觉不是什么重要的东西，浮点数表示比较重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;原码，反码，补码&lt;ul&gt;
&lt;li&gt;正数的原码反码补码相同&lt;/li&gt;
&lt;li&gt;原码表示的范围为 $-2^n+1 ~ 2^n-1$&lt;/li&gt;
&lt;li&gt;补码表示的范围为 $-2^n ~ 2^n-1$&lt;/li&gt;
&lt;li&gt;负数的原码是1+绝对值，反码是1+绝对值取反，补码是反码+1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移码：用来表示浮点数的阶码，只能表示整数&lt;ul&gt;
&lt;li&gt;一般用移码表示浮点数的阶码，用补码表示定点整数&lt;br&gt;$$ [x]_移 &amp;#x3D; 2^n + x $$&lt;br&gt;移码就是在真值x前面加一个offset，比如取offset为2^7，就在补码的第8位加上1&lt;/li&gt;
&lt;li&gt;比如正数10101，移码是10010101，负数-10101的补码是11101011，所以移码是01101011&lt;/li&gt;
&lt;li&gt;移码的作用是&amp;#x3D;&amp;#x3D;保持数据原有的大小顺序&amp;#x3D;&amp;#x3D;，移码大真值大，移码小真值小，所以可以直观地进行比较&lt;br&gt;:::warning&lt;br&gt;相同位数的补码和移码表示具有相同的数据表示范围，区别只是表示方法不同&lt;br&gt;补码与移码只差一个符号位。同一个数的补码和移码表示，其数值部分相同，而符号位相反。&lt;br&gt;:::&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-1-3-整数表示&#34;&gt;&lt;a href=&#34;#2-1-3-整数表示&#34; class=&#34;headerlink&#34; title=&#34;2.1.3 整数表示&#34;&gt;&lt;/a&gt;2.1.3 整数表示&lt;/h3&gt;&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&#34;2-1-4&#34;&gt;&lt;a href=&#34;#2-1-4&#34; class=&#34;headerlink&#34; title=&#34;2.1.4&#34;&gt;&lt;/a&gt;2.1.4&lt;/h3&gt;&lt;p&gt;c中的强制转换&lt;br&gt;short转成unsigned short直接把二进制看成unsigned short，比如-1变成65535&lt;br&gt;int变成short直接截断&lt;br&gt;小字长转大字长不会改变值，如果是unsigned就会在前面补0，如果是有符号数就在前面补符号位&lt;br&gt;short转unsigned int，先对short进行符号扩展到int，再把它当做unsigned int，如果是unsigned short转int，就进行零扩展再看成int……&lt;/p&gt;
&lt;p&gt;一些题目&lt;br&gt;+++info example&lt;br&gt;;;;id3 t1&lt;br&gt;若$[x]_补 &amp;#x3D; 1,x_1x_2x_3x_4x_5x_6$,其中$x_i$取0或1，若要x&amp;gt;-32，应当满足：&lt;br&gt;C. $x_1$为1，$x_2…x_6$中至少有一位为1&lt;br&gt;1100000是-32，要比-32大所以绝对值要小，所以数值部分要大，所以$x_1$必须是1,后面随便有个1就行&lt;br&gt;;;;&lt;br&gt;;;;id3 t2&lt;br&gt;设x为正数，$[x]_补 &amp;#x3D; 1,x_1x_2x_3x_4x_5$,若要x&amp;lt;-16，应当满足：&lt;br&gt;C. $x_1$必须为0，其它任意&lt;br&gt;110000是-16，要小于-16所以数值部分绝对值要小，所以只要$x_1$为0就比-16小&lt;br&gt;;;;&lt;br&gt;;;;id3 t3&lt;br&gt;一个8位的二进制整数由2个“0”和6个“1”组成，采用补码或者移码表示，则&lt;br&gt;若采用移码表示，偏置值为127，则此整数最小为-64（偏置为127需要在补码加上1111111，&amp;#x3D;&amp;#x3D;要让数值最小，应该把1放低位&amp;#x3D;&amp;#x3D;，所以移码是00111111，补码是10111111是-64）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;：前面说过，移码大真值大，移码小真值小，所以要让数值最小把1放低位就行了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;若采用补码表示，则此整数最小为-97（10011111&amp;#x3D;-97）&lt;br&gt;;;;&lt;br&gt;;;;id3 比较大小的方法&lt;br&gt;对于无符号数，数值大的数就大&lt;br&gt;对于有符号数的原码和反码比较大小：先看正负然后看数值，反码数值转成原码再比&lt;br&gt;对于补码比较大小，正数正常比较，负数数值部分越小，绝对值越大（前面1更多的数的绝对值越小，所以11111111是-1）&lt;br&gt;;;;&lt;br&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;2-2-运算方法和运算电路&#34;&gt;&lt;a href=&#34;#2-2-运算方法和运算电路&#34; class=&#34;headerlink&#34; title=&#34;2.2 运算方法和运算电路&#34;&gt;&lt;/a&gt;2.2 运算方法和运算电路&lt;/h2&gt;&lt;h3 id=&#34;2-2-1-基本运算部件&#34;&gt;&lt;a href=&#34;#2-2-1-基本运算部件&#34; class=&#34;headerlink&#34; title=&#34;2.2.1 基本运算部件&#34;&gt;&lt;/a&gt;2.2.1 基本运算部件&lt;/h3&gt;&lt;h4 id=&#34;一位全加器&#34;&gt;&lt;a href=&#34;#一位全加器&#34; class=&#34;headerlink&#34; title=&#34;一位全加器&#34;&gt;&lt;/a&gt;一位全加器&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;用真值表实现的：进位C，和S&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;A&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;B&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Cin&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Cout&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;S&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;可以用卡诺图或者直接理解(王道不写还好我本来就会，差点忘了。。。)&lt;br&gt;&lt;img data-src=&#34;/img2.jpg&#34;&gt;&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;S &amp;amp;&amp;#x3D; \overline{A} , \overline{B} , C_i + \overline{A} , B , \overline{C_i} + A , \overline{B} , \overline{C_i} + A , B , C_i \&lt;br&gt;&amp;amp;&amp;#x3D; A \oplus B \oplus C_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;Co &amp;amp;&amp;#x3D; AB + A \overline{B} C_i + \overline{A} B C_i \&lt;br&gt;&amp;amp;&amp;#x3D; AB + (A \oplus B) \cdot C_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;串行进位加法器&#34;&gt;&lt;a href=&#34;#串行进位加法器&#34; class=&#34;headerlink&#34; title=&#34;串行进位加法器&#34;&gt;&lt;/a&gt;串行进位加法器&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;把n个一位全加器连起来&lt;br&gt;&lt;img data-src=&#34;/img3.png&#34;&gt;&lt;br&gt;Carry Propagation &amp;amp; Delay&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;并行进位加法器&#34;&gt;&lt;a href=&#34;#并行进位加法器&#34; class=&#34;headerlink&#34; title=&#34;并行进位加法器&#34;&gt;&lt;/a&gt;并行进位加法器&lt;/h4&gt;&lt;p&gt;对Cin进行look ahead&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;前面提到：&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;Co &amp;amp;&amp;#x3D; AB + A \overline{B} C_i + \overline{A} B C_i \&lt;br&gt;   &amp;amp;&amp;#x3D; AB + (A \oplus B) \cdot C_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;下一位的Cin等于上一位的Cout，所以可以进行look ahead，这里让&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;G_i &amp;amp;&amp;#x3D; A_iB_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;P_i &amp;amp;&amp;#x3D; A_i \oplus B_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;所以&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;C_{i+1} &amp;amp;&amp;#x3D; G_i + P_iC_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;S_i &amp;amp;&amp;#x3D; P_i \oplus C_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;就能得到超前进位的效果&lt;/p&gt;
&lt;h4 id=&#34;带标志加法器&#34;&gt;&lt;a href=&#34;#带标志加法器&#34; class=&#34;headerlink&#34; title=&#34;带标志加法器&#34;&gt;&lt;/a&gt;带标志加法器&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;/img5.jpg&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;溢出标志 $OF &amp;#x3D; C_n  \oplus C_{n-1}$，只能判断有符号数是否溢出&lt;br&gt;-两个正数加起来变成负数或者两个负数加起来变成正数，就会溢出&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;A&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;B&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;$C_{n-1}$&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;F&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;$C_n$&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;OF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;第二行A&amp;#x3D;0, B&amp;#x3D;0, F&amp;#x3D;1，正+正&amp;#x3D;负&lt;br&gt;  第七行A&amp;#x3D;0, B&amp;#x3D;1, F&amp;#x3D;0，负+负&amp;#x3D;正&lt;br&gt;  所以OF&amp;#x3D;1，表示有溢出&lt;br&gt;  观察发现$OF &amp;#x3D; C_{n-1}  \oplus C_n$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;符号标志 $SF &amp;#x3D; F_{n-1}$，输出的最高位决定有符号数的正负&lt;/li&gt;
&lt;li&gt;进位&amp;#x2F;借位标志：用于判断无符号数的加减运算是否溢出&lt;ul&gt;
&lt;li&gt;$CF &amp;#x3D; Cin \oplus Cout$&lt;/li&gt;
&lt;li&gt;此处的Cin和Cout表示最开始的输入和最后的输出，还没理解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;零标志 当且仅当所有F&amp;#x3D;0时为1，否则为0（把所有F作或非）&lt;br&gt;具体可以看这篇：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dhYmJ5X19fXy9hcnRpY2xlL2RldGFpbHMvODA4MjU1NDk=&#34;&gt;https://blog.csdn.net/gabby____/article/details/80825549&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ALU&#34;&gt;&lt;a href=&#34;#ALU&#34; class=&#34;headerlink&#34; title=&#34;ALU&#34;&gt;&lt;/a&gt;ALU&lt;/h4&gt;&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&#34;2-2-2-定点数的移位运算&#34;&gt;&lt;a href=&#34;#2-2-2-定点数的移位运算&#34; class=&#34;headerlink&#34; title=&#34;2.2.2 定点数的移位运算&#34;&gt;&lt;/a&gt;2.2.2 定点数的移位运算&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;左移一位*2，右移一位&amp;#x2F;2&lt;/li&gt;
&lt;li&gt;逻辑移位：移完直接补0&lt;ul&gt;
&lt;li&gt;无符号数若高位的1移出，则发生溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;算数移位：有符号数右移时，补符号位，左移直接移，如果高位和符号位不同，则发生溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定点数的加减运算&#34;&gt;&lt;a href=&#34;#定点数的加减运算&#34; class=&#34;headerlink&#34; title=&#34;定点数的加减运算&#34;&gt;&lt;/a&gt;定点数的加减运算&lt;/h3&gt;&lt;p&gt;补码相加减，略&lt;br&gt;主要是溢出判断：符号相同的数相加或者符号相异的数相减会发生溢出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一位符号位（参考前面OF）&lt;/li&gt;
&lt;li&gt;双符号位（模4补码）&lt;ul&gt;
&lt;li&gt;符号位左边那一位表示正确的符号，0为正，1为负；右边那一位如果和左边的相同，如 “00”表示正且无溢出，”11”表示负且无溢出。如果右边那一位与左边那一位不一样，则表示有溢出&lt;/li&gt;
&lt;li&gt;溢出逻辑判断：若V为0则无溢出，V为1则溢出&lt;/li&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;存储的时候，模4补码只需要一位符号位&amp;#x3D;&amp;#x3D;，因为任何一个正确的数值它的两个符号位是相同的。它只是把两个模4补码的数送往ALU进行运算的时候，把符号位同时送入ALU的双符号位中，即&amp;#x3D;&amp;#x3D;只在ALU中采用双符号位&amp;#x3D;&amp;#x3D;&lt;br&gt;$$&lt;br&gt;V &amp;#x3D; S_{s1} \oplus S_{s2}&lt;br&gt;$$&lt;br&gt;例子看这篇写的挺清楚：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bl9ib3lfYm95X3N1bi9hcnRpY2xlL2RldGFpbHMvODc5MTcwMjA=&#34;&gt;https://blog.csdn.net/sun_boy_boy_sun/article/details/87917020&lt;/span&gt;&lt;br&gt;总之两位不同则有溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定点数的乘除运算&#34;&gt;&lt;a href=&#34;#定点数的乘除运算&#34; class=&#34;headerlink&#34; title=&#34;定点数的乘除运算&#34;&gt;&lt;/a&gt;定点数的乘除运算&lt;/h3&gt;&lt;p&gt;略，列竖式即可&lt;/p&gt;
&lt;h3 id=&#34;浮点数的表示与运算&#34;&gt;&lt;a href=&#34;#浮点数的表示与运算&#34; class=&#34;headerlink&#34; title=&#34;浮点数的表示与运算&#34;&gt;&lt;/a&gt;浮点数的表示与运算&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;浮点数的表示格式&lt;br&gt;$$&lt;br&gt;N &amp;#x3D; (-1)^s \cdot M \cdot R^E&lt;br&gt;$$&lt;br&gt;s符号，M尾数，E阶码，R基数&lt;/li&gt;
&lt;li&gt;浮点数的表示范围&lt;br&gt;范围关于原点对称，运算结果大于最大正数时成为正上溢，小遇绝对值最大负数是成为负上溢，统称上溢。运算结果在0-最小整数之间成为正下溢，负数同理，统称下溢（原因是精度不够）&lt;/li&gt;
&lt;li&gt;浮点数的规格化&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/05/13/computer-science/computer-network/ch1/</guid>
            <title>Ch1</title>
            <link>http://example.com/2025/05/13/computer-science/computer-network/ch1/</link>
            <category>计算机网络</category>
            <pubDate>Tue, 13 May 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/05/13/computer-science/computer-organization/ch1/</guid>
            <title>Ch1</title>
            <link>http://example.com/2025/05/13/computer-science/computer-organization/ch1/</link>
            <category>计算机组成</category>
            <pubDate>Tue, 13 May 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;王道计组考研复习笔记&lt;br&gt;怕学完忘了写个笔记保留一下顺便加深印象x&lt;br&gt;王道书写得好烂、、&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Ch1-计算机系统概述&#34;&gt;&lt;a href=&#34;#Ch1-计算机系统概述&#34; class=&#34;headerlink&#34; title=&#34;Ch1 计算机系统概述&#34;&gt;&lt;/a&gt;Ch1 计算机系统概述&lt;/h1&gt;&lt;h2 id=&#34;1-1-计算机发展历程&#34;&gt;&lt;a href=&#34;#1-1-计算机发展历程&#34; class=&#34;headerlink&#34; title=&#34;1.1 计算机发展历程&#34;&gt;&lt;/a&gt;1.1 计算机发展历程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;四代计算机：电子管-&amp;gt;晶体管-&amp;gt;集成电路-&amp;gt;超大规模集成电路&lt;/li&gt;
&lt;li&gt;摩尔定律：集成电路上可以容纳的晶体管数目在大约每经过18个月到24个月便会增加一倍&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-2-计算机系统层次结构&#34;&gt;&lt;a href=&#34;#1-2-计算机系统层次结构&#34; class=&#34;headerlink&#34; title=&#34;1.2 计算机系统层次结构&#34;&gt;&lt;/a&gt;1.2 计算机系统层次结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;计算机系统：硬件+软件&lt;/li&gt;
&lt;li&gt;对于某一功能，既能用软件实现又能用硬件实现，称为软、硬件在逻辑功能上是等价的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-2-硬件&#34;&gt;&lt;a href=&#34;#1-2-2-硬件&#34; class=&#34;headerlink&#34; title=&#34;1.2.2 硬件&#34;&gt;&lt;/a&gt;1.2.2 硬件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;冯·诺依曼机的特点：&lt;ul&gt;
&lt;li&gt;采用“存储程序”的工作方式&lt;/li&gt;
&lt;li&gt;冯·诺依曼计算机由五大部件组成：运算器、控制器、存储器、输入设备和输出设备&lt;/li&gt;
&lt;li&gt;指令和数据以同等地位存储在存储器中&lt;/li&gt;
&lt;li&gt;指令和数据均用二进制代码表示&lt;/li&gt;
&lt;li&gt;指令由操作码和地址码组成&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img1.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;计算机的功能部件：&lt;ul&gt;
&lt;li&gt;输入设备&lt;/li&gt;
&lt;li&gt;输出设备&lt;/li&gt;
&lt;li&gt;存储器：主存+外存&lt;ul&gt;
&lt;li&gt;CPU能直接访问的是主存&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img2.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;MAR位10位则最多有$2^{10}$个存储单元&lt;/li&gt;
&lt;li&gt;在现代计算机中MAR和MDR存在CPU中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;运算器：进行算术运算和逻辑运算&lt;ul&gt;
&lt;li&gt;核心是ALU：通用寄存器有&amp;#x3D;&amp;#x3D;累加器(ACC)，乘商寄存器(MQ)，操作数寄存器(X)&amp;#x3D;&amp;#x3D;，变址寄存器(IX)，基址寄存器(BR)等，前三个必备&lt;/li&gt;
&lt;li&gt;程序状态寄存器(PSW)&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img3.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制器：由PC, IR和control unit组成&lt;ul&gt;
&lt;li&gt;: RISCV控制器&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img4.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU由运算器、控制器和cache组成&lt;/li&gt;
&lt;li&gt;总线有地址总线、数据总线、控制总线&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-3-软件&#34;&gt;&lt;a href=&#34;#1-2-3-软件&#34; class=&#34;headerlink&#34; title=&#34;1.2.3 软件&#34;&gt;&lt;/a&gt;1.2.3 软件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;组成：系统软件(OS, DBMS, 编译器, …)+应用软件&lt;/li&gt;
&lt;li&gt;语言：汇编语言、机器语言、高级语言&lt;ul&gt;
&lt;li&gt;汇编器：把汇编语言翻译成机器语言&lt;/li&gt;
&lt;li&gt;编译器：把高级语言翻译成汇编语言或机器语言&lt;/li&gt;
&lt;li&gt;解释器：把高级语言翻译成&amp;#x3D;&amp;#x3D;机器语言&amp;#x3D;&amp;#x3D;(比如python)&lt;br&gt;  +++info example&lt;br&gt;  ;;;id3 题目&lt;br&gt;  :chestnut:&lt;br&gt;  将高级语言源程序转换为机器级目标代码文件的程序是 []。&lt;br&gt;  A. 汇编程序&lt;br&gt;  B. 链接程序&lt;br&gt;  C. 编译程序&lt;br&gt;  D. 解释程序&lt;br&gt;  ;;;&lt;br&gt;  ;;;id3 答案&lt;br&gt;  C. 编译程序&lt;br&gt;  因为解释程序不生成目标代码，编译器可以把高级语言翻译成汇编语言或者直接翻译成机器语言&lt;br&gt;  ;;;&lt;br&gt;  +++&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-4-计算机系统的层次结构&#34;&gt;&lt;a href=&#34;#1-2-4-计算机系统的层次结构&#34; class=&#34;headerlink&#34; title=&#34;1.2.4 计算机系统的层次结构&#34;&gt;&lt;/a&gt;1.2.4 计算机系统的层次结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;看看就好&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img5.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-5-计算机系统的工作原理&#34;&gt;&lt;a href=&#34;#1-2-5-计算机系统的工作原理&#34; class=&#34;headerlink&#34; title=&#34;1.2.5 计算机系统的工作原理&#34;&gt;&lt;/a&gt;1.2.5 计算机系统的工作原理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;程序执行前，需要把所含的指令和数据一起放入主存中&lt;/li&gt;
&lt;li&gt;五个阶段：IF-ID-EX-MEM-WB&lt;/li&gt;
&lt;li&gt;c程序怎么变成可执行文件的：直接看图&lt;ul&gt;
&lt;li&gt;&lt;img data-src=&#34;/img6.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;汇编器把指令打包成可重定位目标代码文件：使用相对地址和符号引用来表示各个代码段之间的关系（代码段、数据段、符号表、重定位表…）使得代码或数据能在内存中任意位置加载或运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指令执行过程：后面几章会具体讲&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-3-计算机的性能指标&#34;&gt;&lt;a href=&#34;#1-3-计算机的性能指标&#34; class=&#34;headerlink&#34; title=&#34;1.3 计算机的性能指标&#34;&gt;&lt;/a&gt;1.3 计算机的性能指标&lt;/h2&gt;&lt;h3 id=&#34;1-3-1-主要性能指标&#34;&gt;&lt;a href=&#34;#1-3-1-主要性能指标&#34; class=&#34;headerlink&#34; title=&#34;1.3.1 主要性能指标&#34;&gt;&lt;/a&gt;1.3.1 主要性能指标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;字长：一次整数运算所能处理的二进制数据的位数&lt;br&gt; :::info&lt;br&gt; 机器字长、指令字长和存储字长&lt;br&gt; :::&lt;/li&gt;
&lt;li&gt;带宽&lt;code&gt;bandwidth&lt;/code&gt;：总线一次能并行传送信息的位数&lt;/li&gt;
&lt;li&gt;主存容量&lt;/li&gt;
&lt;li&gt;运算速度&lt;ul&gt;
&lt;li&gt;吞吐量&lt;code&gt;throughput&lt;/code&gt;：一次输入数据所对应的输出数据个数&lt;/li&gt;
&lt;li&gt;响应时间&lt;code&gt;Response (Execution) time&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;主频&lt;/li&gt;
&lt;li&gt;clock cycle time( &amp;#x3D; 1&amp;#x2F;CPU frequency)&lt;/li&gt;
&lt;li&gt;MIPS: million instructions per second&lt;/li&gt;
&lt;li&gt;FLOPS: floating-point operations per second&lt;blockquote&gt;
&lt;p&gt;CPI: clock cycles per instruction(IPC: CPI的倒数)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ \begin{aligned}&lt;br&gt;    \text{CPU execution time} &amp;amp;&amp;#x3D; \text{CPU clock cycles} \times \text{Clock cycle time} \&lt;br&gt;    &amp;amp;&amp;#x3D; \frac{\text{CPU clock cycles}}{\text{Clock rate}}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;    \text{CPU clock cycles} &amp;amp;&amp;#x3D; \text{Instructions count} \times \text{Average cycles per instruction}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;    \text{CPU execution time} &amp;amp;&amp;#x3D; \text{CPU clock cycles} \times \text{Clock cycle time} \&lt;br&gt;    &amp;amp;&amp;#x3D; \frac{\text{CPU clock cycles}}{\text{Clock rate}}&lt;br&gt;\end{aligned} $$&lt;/p&gt;
&lt;p&gt;$$ \begin{aligned}&lt;br&gt;     \text{performance} &amp;amp;&amp;#x3D; \frac{1}{\text{CPU execution time}}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;“Processor X is n times fast than Y” is&lt;br&gt;$$ \begin{aligned}&lt;br&gt;    \text{n} &amp;amp;&amp;#x3D; \frac{\text{CPU execution time of Y}}{\text{CPU execution time of X}}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;IPS: instructions per second&lt;br&gt;$$ \begin{aligned}&lt;br&gt;    \text{IPS} &amp;amp;&amp;#x3D; \frac{\text{CPU frequency}}{\text{CPI}}&lt;br&gt;        &amp;amp;&amp;#x3D; \frac{1}{\text{CPU clock cycles} \times \text{CPU execution time}}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其他公式，，，用到再说吧&lt;/li&gt;
&lt;li&gt;兼容：软件或硬件的通用性&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在用于科学计算的计算机中，标志系统性能最有用的参数是浮点数运算相关的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MFLOPS 10^6&lt;/li&gt;
&lt;li&gt;GFLOPS 10^9&lt;/li&gt;
&lt;li&gt;TFLOPS 10^12&lt;/li&gt;
&lt;li&gt;PFLOPS 10^15&lt;/li&gt;
&lt;li&gt;EFLOPS 10^18&lt;/li&gt;
&lt;li&gt;ZFLOPS 10^21&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/03/30/computer-science/compile-principles/ch5/</guid>
            <title>语义分析</title>
            <link>http://example.com/2025/03/30/computer-science/compile-principles/ch5/</link>
            <category>语义分析</category>
            <pubDate>Sun, 30 Mar 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;语义分析&#34;&gt;&lt;a href=&#34;#语义分析&#34; class=&#34;headerlink&#34; title=&#34;语义分析&#34;&gt;&lt;/a&gt;语义分析&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;绑定，类型检查&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;symbol-table&#34;&gt;&lt;a href=&#34;#symbol-table&#34; class=&#34;headerlink&#34; title=&#34;symbol table&#34;&gt;&lt;/a&gt;symbol table&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Imperative style: 命令式风格&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modify $\sigma_1$ until it becomes $\sigma_2$. &lt;/li&gt;
&lt;li&gt;While $\sigma_2$ exists, we cannot look things up in $\sigma_1$. &lt;/li&gt;
&lt;li&gt;When done with $\sigma_2$, can undo the modification to get $\sigma_1$ back again.&lt;br&gt;+++info 方法：&lt;br&gt;Hashing&lt;br&gt;插入：找到哈希值然后插入链表的表头&lt;br&gt;查找：找到哈希值然后遍历链表&lt;br&gt;pop: 找到哈希值然后把链表表头删掉  table[hash(key)] &amp;#x3D; table[hash(key)].next&lt;br&gt;+++&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Functional style: 函数式风格&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To keep $\sigma_1$ in pristine condition while creating create $\sigma_2$ and $\sigma_3$&lt;br&gt;+++info 方法：&lt;br&gt;如果依旧用哈希，每次要复制一遍哈希表，开销太大了，不现实&lt;br&gt;&lt;img data-src=&#34;/f2.jpg&#34;&gt;&lt;br&gt;所以用persistent BST&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;br&gt;先遍历二叉搜索树找到要插入的位置，然后对于插入节点把它从根节点到它全都复制一遍然后插入&lt;br&gt;+++&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Tiger编译器中的符号&#34;&gt;&lt;a href=&#34;#Tiger编译器中的符号&#34; class=&#34;headerlink&#34; title=&#34;Tiger编译器中的符号&#34;&gt;&lt;/a&gt;Tiger编译器中的符号&lt;/h2&gt;&lt;p&gt;对链表进行lookup的时候每一次都要进行string compare，开销是很大的。所以使用新的数据结构将符号对象关联到一个整数上，因此对于任意给定字符串的所有不同出现，都会被转换成同一个符号对象。&lt;br&gt;Symbol的实现：通过hash函数将字符串映射到一个symbol对象上&lt;br&gt;SymbolTable的实现：beginScope()和endScope()的实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;beginScope()：添加一个marksym&lt;/li&gt;
&lt;li&gt;endScope()：从符号表中不断pop直到marksym&lt;/li&gt;
&lt;li&gt;引入一个 辅助栈(Auxiliary stack) 来维护&lt;ul&gt;
&lt;li&gt;符号入栈时，会将binding联动地插入对应bucket的链表头&lt;/li&gt;
&lt;li&gt;弹出栈顶符号时，对应bucket的链表头也会联动地被移除&lt;/li&gt;
&lt;li&gt;beginScope: 压入一个特殊标记到辅助栈中&lt;/li&gt;
&lt;li&gt;endScope: 一直弹出符号直到弹出了一个特殊标记&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;类型检查&#34;&gt;&lt;a href=&#34;#类型检查&#34; class=&#34;headerlink&#34; title=&#34;类型检查&#34;&gt;&lt;/a&gt;类型检查&lt;/h2&gt;&lt;h3 id=&#34;哪些类型表达式是合法-非法的&#34;&gt;&lt;a href=&#34;#哪些类型表达式是合法-非法的&#34; class=&#34;headerlink&#34; title=&#34;哪些类型表达式是合法&amp;#x2F;非法的&#34;&gt;&lt;/a&gt;哪些类型表达式是合法&amp;#x2F;非法的&lt;/h3&gt;&lt;p&gt;Tiger的类型系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两种primitive type: int, string&lt;/li&gt;
&lt;li&gt;两种constructed type: records, arrays&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;typec → type type-id &amp;#x3D; ty&lt;ul&gt;
&lt;li&gt;这表示定义一个类型。&lt;code&gt;typec&lt;/code&gt; 是一个类型定义的开始，它由关键字 &lt;code&gt;type&lt;/code&gt;、一个类型标识符 &lt;code&gt;type-id&lt;/code&gt; 和一个等号 &lt;code&gt;=&lt;/code&gt; 后跟类型定义 &lt;code&gt;ty&lt;/code&gt; 组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ty → type-id&lt;ul&gt;
&lt;li&gt;这表示类型 &lt;code&gt;ty&lt;/code&gt; 可以直接是一个已定义的类型标识符 &lt;code&gt;type-id&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ty → ‘{’ tyfields ‘}’&lt;ul&gt;
&lt;li&gt;这表示类型 &lt;code&gt;ty&lt;/code&gt; 可以是一个记录（record），由花括号 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt; 包围的一系列字段 &lt;code&gt;tyfields&lt;/code&gt; 定义。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ty → array of type-id&lt;ul&gt;
&lt;li&gt;这表示类型 &lt;code&gt;ty&lt;/code&gt; 可以是一个数组，由关键字 &lt;code&gt;array of&lt;/code&gt; 后跟一个类型标识符 &lt;code&gt;type-id&lt;/code&gt; 定义。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tyfields → ε&lt;ul&gt;
&lt;li&gt;这表示字段列表 &lt;code&gt;tyfields&lt;/code&gt; 可以为空（ε 表示空串）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tyfields → id: type-id {, id:type-id}&lt;ul&gt;
&lt;li&gt;这表示字段列表 &lt;code&gt;tyfields&lt;/code&gt; 由一个或多个字段组成，每个字段由一个标识符 &lt;code&gt;id&lt;/code&gt; 和冒号 &lt;code&gt;:&lt;/code&gt; 后跟一个类型标识符 &lt;code&gt;type-id&lt;/code&gt; 定义，多个字段之间用逗号 &lt;code&gt;,&lt;/code&gt; 分隔。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let type a = &amp;#123;x: int; y: int&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    type b = a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var i : a := ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var j : b := ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;in i := j&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&#34;类型等价&#34;&gt;&lt;a href=&#34;#类型等价&#34; class=&#34;headerlink&#34; title=&#34;类型等价&#34;&gt;&lt;/a&gt;类型等价&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Name equivalence (NE): 必须声明是同一个类型才是同一类型&lt;/li&gt;
&lt;li&gt;Structure equivalence (SE): 如果两个类型的结构完全相同（即它们由相同的构造器以相同的顺序组成），那么它们就被认为是等价的，即使它们的名字不同&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;type A = &amp;#123;x: int; y: int&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;type B = &amp;#123;x: int; y: int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Tiger用的是NE&lt;br&gt;在Tiger编程语言中，存在两个独立的命名空间：一个用于类型（Types），另一个用于函数和变量（Functions and Variables）。所以类型和函数&amp;#x2F;变量可以存在相同的名字，但是函数和变量不能存在相同的名字。&lt;br&gt;所以需要两个env&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type env&lt;ul&gt;
&lt;li&gt;symbol -&amp;gt; Ty_ty&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Value env&lt;ul&gt;
&lt;li&gt;对于变量，symbol -&amp;gt; Ty_ty&lt;/li&gt;
&lt;li&gt;对于函数，symbol -&amp;gt; struct{Ty_tyList formals, Ty_ty results}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类型检查的rule&#34;&gt;&lt;a href=&#34;#类型检查的rule&#34; class=&#34;headerlink&#34; title=&#34;类型检查的rule&#34;&gt;&lt;/a&gt;类型检查的rule&lt;/h3&gt;&lt;p&gt;类型检查分为两部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type-checking expressions: 对于每个表达式，根据当前的Type和Value环境来确定其类型，并检查是否符合语言的类型规则&lt;/li&gt;
&lt;li&gt;Type-checking declarations: 在Tiger语言中声明只可能在let语句中出现&lt;br&gt;好像就是讲了transExp, transDec, transVar，AST递归检查每个节点的类型然后一层一层往上传再检查&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/03/29/computer-science/compile-principles/ch4/</guid>
            <title>抽象语法</title>
            <link>http://example.com/2025/03/29/computer-science/compile-principles/ch4/</link>
            <category>抽象语法</category>
            <pubDate>Sat, 29 Mar 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/03/23/computer-science/compile-principles/ch3/</guid>
            <title>语法分析</title>
            <link>http://example.com/2025/03/23/computer-science/compile-principles/ch3/</link>
            <category>语法分析</category>
            <pubDate>Sun, 23 Mar 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;语法分析&#34;&gt;&lt;a href=&#34;#语法分析&#34; class=&#34;headerlink&#34; title=&#34;语法分析&#34;&gt;&lt;/a&gt;语法分析&lt;/h1&gt;&lt;h2 id=&#34;CFG&#34;&gt;&lt;a href=&#34;#CFG&#34; class=&#34;headerlink&#34; title=&#34;CFG&#34;&gt;&lt;/a&gt;CFG&lt;/h2&gt;&lt;p&gt;见计算理论&lt;br&gt;Parse tree&lt;/p&gt;
&lt;h3 id=&#34;Ambiguous-grammars&#34;&gt;&lt;a href=&#34;#Ambiguous-grammars&#34; class=&#34;headerlink&#34; title=&#34;Ambiguous grammars&#34;&gt;&lt;/a&gt;Ambiguous grammars&lt;/h3&gt;&lt;h2 id&gt;&lt;a href=&#34;#&#34; class=&#34;headerlink&#34; title&gt;&lt;/a&gt;&lt;/h2&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/03/22/computer-science/compile-principles/ch2/</guid>
            <title>词法分析</title>
            <link>http://example.com/2025/03/22/computer-science/compile-principles/ch2/</link>
            <category>词法分析</category>
            <pubDate>Sat, 22 Mar 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Ch2-词法分析&#34;&gt;&lt;a href=&#34;#Ch2-词法分析&#34; class=&#34;headerlink&#34; title=&#34;Ch2 词法分析&#34;&gt;&lt;/a&gt;Ch2 词法分析&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;把input分解成一个个token&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;Regular-Expression&#34;&gt;&lt;a href=&#34;#Regular-Expression&#34; class=&#34;headerlink&#34; title=&#34;Regular Expression&#34;&gt;&lt;/a&gt;Regular Expression&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Language: a set of strings&lt;/li&gt;
&lt;li&gt;String: a finite sequence of characters&lt;blockquote&gt;
&lt;p&gt;Regular Experssion Notations:&lt;br&gt;&lt;img data-src=&#34;/image-1.png&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::info&lt;br&gt;DFA, NFA相关 见计算理论&lt;br&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;RE转NFA&#34;&gt;&lt;a href=&#34;#RE转NFA&#34; class=&#34;headerlink&#34; title=&#34;RE转NFA&#34;&gt;&lt;/a&gt;RE转NFA&lt;/h2&gt;&lt;p&gt;:::info 方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;画出初始态和终态&lt;/li&gt;
&lt;li&gt;分裂规则：&lt;br&gt;&lt;img data-src=&#34;/image-2.jpg&#34;&gt;&lt;br&gt;:::&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;NFA转DFA&#34;&gt;&lt;a href=&#34;#NFA转DFA&#34; class=&#34;headerlink&#34; title=&#34;NFA转DFA&#34;&gt;&lt;/a&gt;NFA转DFA&lt;/h2&gt;&lt;p&gt;从初始状态的闭包开始，每次根据\epsilon和当前状态的闭包，得到下一个状态的闭包，直到得到终态的闭包。&lt;/p&gt;
&lt;p&gt;+++info example&lt;br&gt;;;;id3 题目&lt;br&gt;:chestnut:&lt;br&gt;把这个NFA转成等价的DFA&lt;br&gt;&lt;img data-src=&#34;/image-3.png&#34;&gt;&lt;br&gt;;;;&lt;br&gt;;;;id3 答案&lt;br&gt;初态的闭包是1、2、6，1、2、6经过a可以转移到3、7，因为有\epsilon转移，所以3、7的闭包是3、4、7、8，同理3、4、7、8经过b可以到5、8，由于8是终态，把所有包含8的圆圈画成终态的环。&lt;br&gt;&lt;img data-src=&#34;/image-4.png&#34;&gt;&lt;br&gt;;;;&lt;br&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;最小化DFA&#34;&gt;&lt;a href=&#34;#最小化DFA&#34; class=&#34;headerlink&#34; title=&#34;最小化DFA&#34;&gt;&lt;/a&gt;最小化DFA&lt;/h2&gt;&lt;p&gt;含义：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没有多余状态：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;从这个状态没有通路到达终态&lt;/li&gt;
&lt;li&gt;从开始状态出发，任何输入串也不能到达的那个状态&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;没有两个状态相互等价&lt;br&gt;:::info 方法：&lt;/li&gt;
&lt;li&gt;多余状态直接删除&lt;br&gt;&lt;img data-src=&#34;/image-5.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;合并等价状态&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;将状态分为终态和非终态两个集合&lt;/li&gt;
&lt;li&gt;遍历每个集合，如果经过转换到达的状态都在当前集合里，则不用分，否则划分子集，直到划分不了为止&lt;/li&gt;
&lt;li&gt;:chestnut: 例子&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/image-6.png&#34;&gt;&lt;br&gt;:::&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/03/21/computer-science/compile-principles/ch1/</guid>
            <title>Introduction</title>
            <link>http://example.com/2025/03/21/computer-science/compile-principles/ch1/</link>
            <category>编译原理</category>
            <pubDate>Fri, 21 Mar 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;ZJU 2025春夏编译原理 学习笔记&lt;/p&gt;
&lt;p&gt;主要基于虎书（&lt;em&gt;Modern Compiler Implementation in C&lt;/em&gt;, Andrew W. Appel）和好多老师的ppt（ldm, yps），还有lzx的智云&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;CH1-Introduction&#34;&gt;&lt;a href=&#34;#CH1-Introduction&#34; class=&#34;headerlink&#34; title=&#34;CH1 Introduction&#34;&gt;&lt;/a&gt;CH1 Introduction&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Two Important Concepts&lt;ul&gt;
&lt;li&gt;Phases（阶段）&lt;/li&gt;
&lt;li&gt;Interfaces（接口）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方框里的是phase，中间的是interface&lt;br&gt;&lt;img data-src=&#34;/image.png&#34;&gt;&lt;br&gt;各个阶段的描述&lt;br&gt;&lt;img data-src=&#34;/image-1.png&#34;&gt;&lt;img data-src=&#34;/image-2.png&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
