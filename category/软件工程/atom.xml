<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>NoResponse&#39;s Blog • Posts by &#34;软件工程&#34; category</title>
    <link href="http://example.com" />
    <updated>2025-06-18T16:00:00.000Z</updated>
    <category term="人工智能" />
    <category term="软件工程" />
    <category term="自监督学习" />
    <category term="操作系统" />
    <category term="线性表" />
    <category term="数据结构" />
    <category term="编译原理" />
    <category term="Register Allocation" />
    <category term="语法分析" />
    <category term="词法分析" />
    <category term="Liveness Analysis" />
    <category term="抽象语法" />
    <category term="语义分析" />
    <category term="活动记录" />
    <category term="中间代码" />
    <category term="指令选择" />
    <category term="Basic Blocks and Traces" />
    <category term="计算机组成" />
    <category term="计算机网络" />
    <category term="数据的表示与运算" />
    <category term="存储系统" />
    <category term="总线" />
    <category term="CPU" />
    <category term="I/O" />
    <category term="指令系统" />
    <category term="错题" />
    <entry>
        <id>http://example.com/2025/06/19/SE/diagram/</id>
        <title>画图题</title>
        <link rel="alternate" href="http://example.com/2025/06/19/SE/diagram/"/>
        <content type="html">&lt;ol&gt;
&lt;li&gt;用例图 Use Case Diagram&lt;br&gt;Use-Cases: A collection of user scenarios that describe the thread of usage of a system&lt;br&gt;主要包含涉及的角色，角色对应的行为，第三方参与部分&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;参与者：与系统交互的用户或其他软硬件系统，用小人形表示&lt;/li&gt;
&lt;li&gt;用例：系统中执行的一系列动作，用椭圆表示。&lt;/li&gt;
&lt;li&gt;关系参与者与用例、参与者之间、用例之间的联系。连线&lt;/li&gt;
&lt;li&gt;边界：一组用例描述的系统或子系统，用矩形框表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+++primary example: SafeHome&lt;br&gt;;;;id3 题目&lt;br&gt;Our research indicates that the market for home security systems is growing at a rate of 40% per year. We would like to enter this market by building a &amp;#x3D;&amp;#x3D;microprocessor-based&amp;#x3D;&amp;#x3D; home security system that would protect against and&amp;#x2F;or recognize a variety of &amp;#x3D;&amp;#x3D;undesirable situations&amp;#x3D;&amp;#x3D; such as illegal entry, fire, flooding, and others. The product will use appropriate &amp;#x3D;&amp;#x3D;sensors&amp;#x3D;&amp;#x3D; to detect each situation, can be programmed by the &amp;#x3D;&amp;#x3D;homeowner&amp;#x3D;&amp;#x3D;, and will automatically telephone a monitoring agency when a situation is detected.&lt;br&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id3 答案&lt;br&gt;&lt;img data-src=&#34;/useCase.jpg&#34;&gt;&lt;br&gt;我的理解是找到里面的人(onwer, monitoring agency, 然后可以加个administrator)，物件(sensor)，中间的框是个系统，然后里面的椭圆写上对应的交互行为，连上线，感觉比较主观&lt;br&gt;;;;&lt;br&gt;+++&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;p&gt;CRC Card&lt;br&gt;每个卡片应该包含：类名，类的描述信息，职责，合作类&lt;br&gt;+++primary example&lt;br&gt;&lt;img data-src=&#34;/CRC.jpg&#34;&gt;&lt;br&gt;+++&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类图 class diagram&lt;br&gt;主要的信息：类名，属性(name: type)，方法(name(parameter): return type)&lt;br&gt;+++primary example&lt;br&gt;;;;id4 例子1&lt;br&gt;&lt;img data-src=&#34;/class.jpg&#34;&gt;&lt;br&gt;;;;&lt;br&gt;;;;id4 例子2&lt;br&gt;&lt;img data-src=&#34;/class2.jpg&#34;&gt;&lt;br&gt;;;;&lt;br&gt;+++&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;状态图 state diagram&lt;br&gt;&lt;strong&gt;节点&lt;/strong&gt;：开始状态，结束状态，状态&lt;br&gt;&lt;strong&gt;边&lt;/strong&gt;：行为&lt;br&gt;状态：圆角矩形 state name, state variables, state activities&lt;br&gt;转移：带有标记的箭头&lt;br&gt;初始状态：实心圆&lt;br&gt;终止状态：实心环&lt;br&gt;分支：菱形&lt;br&gt;+++primary example&lt;br&gt;;;;id5 状态图&lt;br&gt;&lt;img data-src=&#34;/state.png&#34;&gt;&lt;br&gt;;;;&lt;br&gt;;;;id5 状态图&lt;br&gt;&lt;img data-src=&#34;/state2.jpg&#34;&gt;&lt;br&gt;;;;&lt;br&gt;+++&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;时序图 sequence diagram&lt;br&gt;对象（参与者上面要画个人）、生命线（对象下面的虚线）、控制焦点、消息&lt;br&gt;&lt;img data-src=&#34;/seq.jpg&#34;&gt;&lt;br&gt;实心箭头表示同步消息：一个对象向另一个对象发出同步消息后，将处于阻塞状态，一直等到另一个对象的回应（图里面的请求是同步的）&lt;br&gt;简单箭头表示异步&lt;br&gt;:::warning&lt;br&gt;箭头的画法存疑&lt;br&gt;:::&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据流图 data flow diagram&lt;br&gt;外部实体（数据的原点和终点）：软件系统外部环境中的实体（包括人、组织或其他软件系统），用&amp;#x3D;&amp;#x3D;方框&amp;#x3D;&amp;#x3D;&lt;br&gt;加工Process：对数据进行处理的单元，比如内部的xx系统，用&amp;#x3D;&amp;#x3D;圆角矩形&amp;#x3D;&amp;#x3D;或椭圆&lt;br&gt;数据存储：数据库，用&amp;#x3D;&amp;#x3D;右侧开口的矩形或者左右开口的矩形&amp;#x3D;&amp;#x3D;&lt;br&gt;数据流：箭头方向即数据流动方向，数据流名标在数据流线上面&lt;br&gt;看例子：&lt;br&gt;&lt;img data-src=&#34;/dataflow.jpg&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;软件架构图 architecture&lt;br&gt;以前后端分离的系统为例（前端，后端，数据库）&lt;br&gt;&lt;img data-src=&#34;/arch.jpg&#34;&gt;&lt;br&gt;三个大框分别是客户端、服务器、数据库层&lt;br&gt;里面小框，前端就是Web app和移动app，后端就是各种系统，数据库就是各种数据库（表？）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;泳道图 Swimlane Diagram&lt;br&gt;跨职能流程图。旨在展示工作流中每个步骤涉及的流程和职能部门。在表示use-case的同时，描述对活动负责的actor&amp;#x2F;analysis class&lt;br&gt;最上面放实体，然后分成一列一列，其他的和流程图一样&lt;br&gt;&lt;img data-src=&#34;/swim.jpg&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="软件工程" />
        <updated>2025-06-18T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2025/06/19/SE/note/</id>
        <title>SE note</title>
        <link rel="alternate" href="http://example.com/2025/06/19/SE/note/"/>
        <content type="html">&lt;h1 id=&#34;Ch2-Software-Engineering&#34;&gt;&lt;a href=&#34;#Ch2-Software-Engineering&#34; class=&#34;headerlink&#34; title=&#34;Ch2 Software Engineering&#34;&gt;&lt;/a&gt;Ch2 Software Engineering&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Definition: The application of a &amp;#x3D;&amp;#x3D;systematic&amp;#x3D;&amp;#x3D;, &amp;#x3D;&amp;#x3D;disciplined&amp;#x3D;&amp;#x3D;, &amp;#x3D;&amp;#x3D;quantifiable（可量化）&amp;#x3D;&amp;#x3D; approach to the &amp;#x3D;&amp;#x3D;development&amp;#x3D;&amp;#x3D;, &amp;#x3D;&amp;#x3D;operation&amp;#x3D;&amp;#x3D;, and &amp;#x3D;&amp;#x3D;maintenance&amp;#x3D;&amp;#x3D; of software&lt;/li&gt;
&lt;li&gt;软件工程是一个多层次的技术体系(a layered technology)&lt;ul&gt;
&lt;li&gt;从下往上是a “quality” focus, process model, methods, tools, 反映了构建高质量软件产品的逻辑流程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件过程（The Software Process）中的两个重要概念：通用过程框架（Common Process Framework）和 伞形活动（Umbrella Activities）&lt;ul&gt;
&lt;li&gt;通用过程框架（Common Process Framework）： 软件开发过程中的一些基本要素&lt;ul&gt;
&lt;li&gt;工作任务（work tasks）：指在软件开发的不同阶段中需要完成的具体任务。&lt;/li&gt;
&lt;li&gt;工作产品（work products）：指在执行工作任务过程中产生的各种文档、代码等成果物。&lt;/li&gt;
&lt;li&gt;里程碑与交付物（milestones &amp;amp; deliverables）：里程碑是项目进展的重要节点，而交付物是在这些节点上需要提交的成果。&lt;/li&gt;
&lt;li&gt;质量保证检查点（QA checkpoints）：在整个开发过程中设置的检查点，用于评估和确保软件产品的质量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;伞形活动（Umbrella Activities）：软件开发过程中需要执行的活动&lt;ul&gt;
&lt;li&gt;项目管理（Project management）：负责项目的规划、组织、协调和控制，确保项目按计划进行。&lt;/li&gt;
&lt;li&gt;质量保证（Quality assurance）：通过一系列措施确保软件产品的质量符合预定标准。&lt;/li&gt;
&lt;li&gt;工作产品生产（Work product production）：涉及创建和维护软件开发过程中产生的各种工作产品。&lt;/li&gt;
&lt;li&gt;测量（Measurement）：收集和分析数据以评估项目的状态和进度。&lt;/li&gt;
&lt;li&gt;正式技术评审（Formal technical reviews）：对软件的技术设计和实现进行系统性的审查。&lt;/li&gt;
&lt;li&gt;配置管理（Configuration management）：管理软件开发过程中各种配置项的变化，确保版本的一致性和可追溯性。&lt;/li&gt;
&lt;li&gt;重用管理（Reusability management）：促进软件组件和模块的重用，提高开发效率和软件质量。&lt;/li&gt;
&lt;li&gt;风险管理（Risk management）：识别、评估和应对可能影响项目成功的各种风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generic Process Framework&lt;/strong&gt; 通用的软件开发过程框架&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Communication&lt;/strong&gt;: 与客户协作并收集需求&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Planning&lt;/strong&gt;: establishes engineering work plan, describes technical risks, lists resource requirements, work products produced, and defines work schedule&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modeling&lt;/strong&gt;: 创建模型以帮助开发者和客户理解需求和设计&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Construction&lt;/strong&gt;: code &amp;amp; test&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deployment&lt;/strong&gt;: 交付软件供客户评估和反馈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Process Adaptation&lt;/strong&gt; 过程适配: 根据项目的具体需求、限制条件和特点，对软件开发过程进行定制和调整&lt;ul&gt;
&lt;li&gt;overall &amp;#x3D;&amp;#x3D;flow&amp;#x3D;&amp;#x3D; of activities, actions, and tasks and the interdependencies among them&lt;/li&gt;
&lt;li&gt;degree to which &amp;#x3D;&amp;#x3D;actions and tasks&amp;#x3D;&amp;#x3D; are defined within each framework activity&lt;/li&gt;
&lt;li&gt;degree to which &amp;#x3D;&amp;#x3D;work products&amp;#x3D;&amp;#x3D; are identified and required&lt;/li&gt;
&lt;li&gt;manner which &amp;#x3D;&amp;#x3D;quality assurance&amp;#x3D;&amp;#x3D; activities are applied&lt;/li&gt;
&lt;li&gt;manner in which &amp;#x3D;&amp;#x3D;project tracking and control&amp;#x3D;&amp;#x3D; activities are applied&lt;/li&gt;
&lt;li&gt;overall degree of &amp;#x3D;&amp;#x3D;detail and rigor&amp;#x3D;&amp;#x3D; with which the process is described&lt;/li&gt;
&lt;li&gt;degree to which the &amp;#x3D;&amp;#x3D;customer and other stakeholders&amp;#x3D;&amp;#x3D; are involved with the project&lt;/li&gt;
&lt;li&gt;level of autonomy given to the &amp;#x3D;&amp;#x3D;software team&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;li&gt;degree to which &amp;#x3D;&amp;#x3D;team organization and roles&amp;#x3D;&amp;#x3D; are prescribed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Essence of Practice&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Understand the problem&lt;/strong&gt; (communication and analysis).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plan a solution&lt;/strong&gt; (modeling and software design).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Carry out the plan&lt;/strong&gt; (code generation).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Examine the result for accuracy&lt;/strong&gt; (testing and quality assurance).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;General Principles 通用原则：软件开发过程中应遵循的一些核心指导思想或基本原则&lt;ul&gt;
&lt;li&gt;The reason it all exists — Provide Value to users&lt;/li&gt;
&lt;li&gt;KISS — Keep It Simple, Stupid!&lt;/li&gt;
&lt;li&gt;Maintain the Vision&lt;/li&gt;
&lt;li&gt;What you produce, others will consume&lt;/li&gt;
&lt;li&gt;Be open to the future&lt;/li&gt;
&lt;li&gt;Plan ahead for reuse&lt;/li&gt;
&lt;li&gt;Think!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Software Development Myths 软件开发管理中常见的误解（Myth）及其背后的现实情况（Reality）&lt;ul&gt;
&lt;li&gt;Management myths&lt;ul&gt;
&lt;li&gt;标准和流程的有效性依赖于团队的理解和接受程度。&lt;/li&gt;
&lt;li&gt;软件开发是一个高度协作和复杂的创造性过程，简单地增加人力并不能解决进度问题。&lt;/li&gt;
&lt;li&gt;外包项目同样需要良好的管理和沟通能力，不能因为外包就忽视了对项目的控制和监督&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Customer myths&lt;ul&gt;
&lt;li&gt;详细的需求分析和规划&lt;/li&gt;
&lt;li&gt;充分的沟通与确认&lt;/li&gt;
&lt;li&gt;合理的进度评估&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Practitioner’s myths&lt;ul&gt;
&lt;li&gt;错误：一旦我们编写好程序并使其正常运行，我们的工作就完成了&lt;/li&gt;
&lt;li&gt;过早进入编码阶段可能会导致更多的返工和调整，从而延长项目周期&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Ch3-Software-Process-Structure&#34;&gt;&lt;a href=&#34;#Ch3-Software-Process-Structure&#34; class=&#34;headerlink&#34; title=&#34;Ch3 Software Process Structure&#34;&gt;&lt;/a&gt;Ch3 Software Process Structure&lt;/h1&gt;&lt;p&gt;Umbrella Activities是贯穿整个软件开发过程的活动，Framework Activity是软件开发的核心阶段，如沟通、计划、建模、构建和部署，每个框架活动下都有具体的task set，每个task set中又包含多个具体的action&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Process flow&lt;/strong&gt; 过程流（对于之前提到的Generic Process Framework的五步）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;线性过程流（Linear process flow）&lt;/li&gt;
&lt;li&gt;迭代过程流（Iterative process flow）&lt;/li&gt;
&lt;li&gt;演化过程流（Evolutionary process flow）&lt;/li&gt;
&lt;li&gt;并行过程流（Parallel process flow）&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Process Patterns&lt;/strong&gt; 过程模式&lt;br&gt;Process patterns define a set of activities, actions, work tasks, work products and&amp;#x2F;or related behaviors&lt;br&gt;提供了一种&lt;code&gt;template&lt;/code&gt;用于定义模式&lt;br&gt;&lt;strong&gt;Generic software pattern elements&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pattern name &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Intent (objective of pattern) &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type (Task pattern, Stage pattern, Phase pattern)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initial context&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Solution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Resulting context&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Related patterns&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Known uses&amp;#x2F;examples&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Process Assessment&lt;/strong&gt;&lt;br&gt;几种评估软件过程的方法：&lt;br&gt;SCAMPI (Standard CMMI Appraisal Method for Process Improvement)&lt;br&gt;SPICE (ISO&amp;#x2F;IEC 15504)&lt;br&gt;CBA IPI (Capability Benchmarking Appraisal using the Integrated Process Improvement method)&lt;br&gt;ISO 9001:2000 for Software&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Capability Maturity Model Integration 能力成熟度模型集成（CMMI）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Level 0: Incomplete &lt;/li&gt;
&lt;li&gt;Level 1: Performed &lt;/li&gt;
&lt;li&gt;Level 2: Managed&lt;/li&gt;
&lt;li&gt;Level 3: Defined&lt;/li&gt;
&lt;li&gt;Level 4: Quantitatively Managed 定量管理&lt;/li&gt;
&lt;li&gt;Level 5: Optimizing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Ch4-Process-Models&#34;&gt;&lt;a href=&#34;#Ch4-Process-Models&#34; class=&#34;headerlink&#34; title=&#34;Ch4 Process Models&#34;&gt;&lt;/a&gt;Ch4 Process Models&lt;/h1&gt;&lt;h2 id=&#34;Prescriptive-Models&#34;&gt;&lt;a href=&#34;#Prescriptive-Models&#34; class=&#34;headerlink&#34; title=&#34;Prescriptive Models&#34;&gt;&lt;/a&gt;Prescriptive Models&lt;/h2&gt;&lt;p&gt;Prescriptive(规范的) process models advocate an orderly approach to software engineering&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Waterfall Model: A reasonable approach when requirements are well defined&lt;br&gt;&lt;img data-src=&#34;/4-1.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;The V Model&lt;br&gt;&lt;img data-src=&#34;/4-2.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;Incremental Process Models 增量过程模型&lt;ul&gt;
&lt;li&gt;The Incremental Model 增量模型: 将整个系统划分为多个可交付的“增量”部分，每个增量都作为一个独立的小项目进行五步流程: A good approach when a working core product is required quickly&lt;br&gt; &lt;img data-src=&#34;/4-3.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;The Rapid Application Development (RAD) Model 快速应用开发模型: 短时间内交付功能完善的系统，communication和planning之后分成好几个team进行modeling和construction，最后合并deployment&lt;br&gt; &lt;img data-src=&#34;/4-4.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Evolutionary Process Models 进化式过程模型&lt;ul&gt;
&lt;li&gt;Prototyping 原型化方法: 当客户有明确的需求但不清楚具体细节时，通过原型，客户可以直观地看到系统的雏形并提出修改意见；原型通常是“抛弃型”的，即在验证概念后会被丢弃，而不是直接作为最终产品的一部分&lt;ul&gt;
&lt;li&gt;Prototype Model: Communication, Quick Plan, Modeling &amp;amp; Quick Design, Construction of prototype, Deployment Delivery &amp;amp; Feedback&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Spiral Model 螺旋模型: 螺旋模型将整个开发过程视为一个逐渐扩大的螺旋线，每个环代表一个开发阶段或迭代周期，在每一次迭代中都进行风险分析（Risk Analysis）&lt;br&gt; &lt;img data-src=&#34;/4-5.jpg&#34;&gt; &lt;/li&gt;
&lt;li&gt;The Concurrent Development Model 并行开发模型&lt;ul&gt;
&lt;li&gt;并行开发模型定义了一系列&lt;code&gt;事件&lt;/code&gt;，这些事件将触发每个活动、动作或任务&lt;code&gt;从一个状态到另一个状态的转换&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Especially good for client&amp;#x2F;server applications&lt;/li&gt;
&lt;li&gt;并行开发模型定义了一个活动网络，而不是简单的线性事件序列&lt;/li&gt;
&lt;li&gt;需要在Flexibility, Extensibility, Speed of development 和 high quality 中权衡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Specialized-Process-Models-专业化的软件过程模型&#34;&gt;&lt;a href=&#34;#Specialized-Process-Models-专业化的软件过程模型&#34; class=&#34;headerlink&#34; title=&#34;Specialized Process Models 专业化的软件过程模型&#34;&gt;&lt;/a&gt;Specialized Process Models 专业化的软件过程模型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Component-Based Development （强调reuse）&lt;/li&gt;
&lt;li&gt;Formal methods （形式化方法强调使用数学手段来精确地描述需求）&lt;/li&gt;
&lt;li&gt;Aspect-Oriented Software Development （面向切面，切面指那些横跨多个模块或功能的通用关注点）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;The-Unified-Process-统一过程&#34;&gt;&lt;a href=&#34;#The-Unified-Process-统一过程&#34; class=&#34;headerlink&#34; title=&#34;The Unified Process 统一过程&#34;&gt;&lt;/a&gt;The Unified Process 统一过程&lt;/h2&gt;&lt;p&gt;统一过程是一种“用例驱动、以架构为中心、迭代和增量”的软件开发过程&lt;br&gt;A &amp;#x3D;&amp;#x3D;“use-case driven, architecture-centric, iterative and incremental”&amp;#x3D;&amp;#x3D; software process closely aligned with the Unified Modeling Language (UML)&lt;br&gt;&lt;img data-src=&#34;/4-6.png&#34;&gt;&lt;br&gt;五个阶段: &amp;#x3D;&amp;#x3D;Inception, Elaboration, Construction, Transition, Production&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;h3 id=&#34;统一过程（Unified-Process-UP）在各个阶段产生的工作产品（Work-Products）&#34;&gt;&lt;a href=&#34;#统一过程（Unified-Process-UP）在各个阶段产生的工作产品（Work-Products）&#34; class=&#34;headerlink&#34; title=&#34;统一过程（Unified Process, UP）在各个阶段产生的工作产品（Work Products）&#34;&gt;&lt;/a&gt;统一过程（Unified Process, UP）在各个阶段产生的工作产品（&lt;code&gt;Work Products&lt;/code&gt;）&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Inception Phase（启动阶段）&lt;br&gt;Vision Document（愿景文档）：概述项目的总体目标、范围和预期结果。&lt;br&gt;Initial Use-case Model（初始用例模型）：描述系统的主要功能和用户交互场景。&lt;br&gt;Initial Project Glossary（初始项目术语表）：定义项目中使用的专业术语和缩写。&lt;br&gt;Initial Business Case（初始商业案例）：分析项目的商业价值和可行性。&lt;br&gt;Initial Risk Assessment（初始风险评估）：识别和评估项目可能面临的风险。&lt;br&gt;Project Plan Phases and Iterations（项目计划阶段和迭代）：制定项目的整体计划，包括阶段划分和迭代安排。&lt;br&gt;Business Model（业务模型）：描述项目的业务流程和商业模式。&lt;br&gt;Prototypes（原型）：创建系统的初步原型，用于验证需求和设计。&lt;/li&gt;
&lt;li&gt;Elaboration Phase（细化阶段）&lt;br&gt;Use-case Model（用例模型）：进一步完善和细化用例模型，明确系统功能。&lt;br&gt;Functional and Non-functional Requirements（功能性与非功能性需求）：详细描述系统需要满足的功能性和非功能性要求。&lt;br&gt;Analysis Model（分析模型）：基于需求分析建立的系统逻辑模型。&lt;br&gt;Software Architecture Description（软件架构描述）：定义系统的整体架构和关键组件。&lt;br&gt;Executable Architectural Prototype（可执行架构原型）：实现一个可运行的架构原型，验证架构的可行性和性能。&lt;br&gt;Preliminary Design Model（初步设计模型）：基于架构描述进行初步的设计。&lt;br&gt;Revise Risk List（修订风险列表）：根据新的信息和发现更新风险评估。&lt;br&gt;Project Plan Iteration Plan, Workflow, Milestones（项目计划迭代计划、工作流、里程碑）：细化项目计划，包括具体的迭代安排、工作流程和关键里程碑。&lt;br&gt;Preliminary User Manual（初步用户手册）：编写系统的初步使用说明。&lt;/li&gt;
&lt;li&gt;Construction Phase（构建阶段）&lt;br&gt;Design Model（设计模型）：完成详细的系统设计，包括模块设计和接口设计。&lt;br&gt;Software Components（软件组件）：开发和实现各个软件组件。&lt;br&gt;Integrated Software Increment（集成软件增量）：将各个组件集成在一起，形成可运行的软件增量。&lt;br&gt;Test Plan（测试计划）：制定详细的测试计划，包括测试策略和资源安排。&lt;br&gt;Test Cases（测试用例）：编写具体的测试用例，用于验证系统功能和质量。&lt;br&gt;Support Documentation User Installation Increment（支持文档用户安装增量）：编写用户安装和操作指南，帮助用户正确安装和使用系统。&lt;/li&gt;
&lt;li&gt;Transition Phase（过渡阶段）&lt;br&gt;Delivered Software Increment（交付的软件增量）：向用户交付经过测试和验证的软件增量。&lt;br&gt;Beta Test Reports（Beta测试报告）：收集和整理Beta测试期间的反馈和问题报告。&lt;br&gt;User Feedback（用户反馈）：收集用户的实际使用反馈，为后续改进提供依据。&lt;/li&gt;
&lt;li&gt;Production&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;个人软件过程（Personal-Software-Process-PSP）&#34;&gt;&lt;a href=&#34;#个人软件过程（Personal-Software-Process-PSP）&#34; class=&#34;headerlink&#34; title=&#34;个人软件过程（Personal Software Process, PSP）&#34;&gt;&lt;/a&gt;个人软件过程（Personal Software Process, PSP）&lt;/h3&gt;&lt;p&gt;Five Framework Activities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Planning&lt;/li&gt;
&lt;li&gt;High-Level Design&lt;/li&gt;
&lt;li&gt;High-Level Design Review&lt;/li&gt;
&lt;li&gt;Development&lt;/li&gt;
&lt;li&gt;Postmortem（事后分析）&lt;br&gt;Stresses the Need for Error Identification and Understanding&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;团队软件过程（Team-Software-Process-TSP）&#34;&gt;&lt;a href=&#34;#团队软件过程（Team-Software-Process-TSP）&#34; class=&#34;headerlink&#34; title=&#34;团队软件过程（Team Software Process, TSP）&#34;&gt;&lt;/a&gt;团队软件过程（Team Software Process, TSP）&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Each project is “launched” using a “script” that defines the tasks to be accomplished&lt;/li&gt;
&lt;li&gt;Teams are self-directed&lt;/li&gt;
&lt;li&gt;Measurement is encouraged&lt;/li&gt;
&lt;li&gt;Measures are analyzed with the intent of improving the team process&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;Ch5-Agile-Development-敏捷开发&#34;&gt;&lt;a href=&#34;#Ch5-Agile-Development-敏捷开发&#34; class=&#34;headerlink&#34; title=&#34;Ch5 Agile Development 敏捷开发&#34;&gt;&lt;/a&gt;Ch5 Agile Development 敏捷开发&lt;/h1&gt;&lt;p&gt;What is Agility?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Effective (rapid and adaptive) response to change&lt;/li&gt;
&lt;li&gt;Effective communication among all stakeholders&lt;/li&gt;
&lt;li&gt;Drawing the customer onto the team&lt;/li&gt;
&lt;li&gt;Organizing a team so that it is in control of the work performed&lt;/li&gt;
&lt;li&gt;Rapid, incremental delivery of software&lt;br&gt;An Agile Process&lt;/li&gt;
&lt;li&gt;Is driven by customer descriptions of what is required (scenarios)&lt;/li&gt;
&lt;li&gt;Recognizes that plans are short-lived&lt;/li&gt;
&lt;li&gt;Develops software iteratively with a heavy emphasis on construction activities&lt;/li&gt;
&lt;li&gt;Delivers multiple ‘software increments’&lt;/li&gt;
&lt;li&gt;Adapts as changes occur&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Extreme Programming 极限编程(XP): &amp;#x3D;&amp;#x3D;planning, design, coding, testing&amp;#x3D;&amp;#x3D;&lt;br&gt;XP plan:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;begin with user stories&lt;/li&gt;
&lt;li&gt;assigns a cost&lt;/li&gt;
&lt;li&gt;Stories are grouped to for a deliverable increment&lt;/li&gt;
&lt;li&gt;commitment&lt;/li&gt;
&lt;li&gt;project velocity&lt;br&gt;&lt;img data-src=&#34;/5-1.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Industrial XP (IXP)&lt;br&gt;IXP incorporates six new practices: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Readiness assessment 准备评估&lt;/li&gt;
&lt;li&gt;Project community 项目社区&lt;/li&gt;
&lt;li&gt;Project chartering 项目章程制定&lt;/li&gt;
&lt;li&gt;Test driven management 测试驱动管理&lt;/li&gt;
&lt;li&gt;Retrospectives 团队自省&lt;/li&gt;
&lt;li&gt;Continuous learning  持续学习&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scrum 一种流行的敏捷开发框架&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Development work is partitioned into “packets”&lt;/li&gt;
&lt;li&gt;Testing and documentation are on-going (测试和文档贯穿开发流程)&lt;/li&gt;
&lt;li&gt;Work occurs in “sprints” and is derived from a “backlog” (Sprint 是 Scrum 的核心时间单位，通常为 1 到 4 周)&lt;/li&gt;
&lt;li&gt;Meetings are very short 高效沟通（三个问题：What did you do since the last meeting&amp;#x2F; What do you plan to accomplish by the next team meeting&amp;#x2F;What obstacles are you encountering）&lt;/li&gt;
&lt;li&gt;“demos” are delivered to the customer with the time-box allocated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dynamic Systems Development Method  - DSDM&lt;br&gt;帕累托原则（Pareto Principle），也称为 80&amp;#x2F;20 法则&lt;br&gt;“80% 的价值来自 20% 的功能”，或者 “80% 的系统可以在 20% 的时间内交付”&lt;br&gt;DSDM 的核心理念之一就是：优先交付最有价值的功能&lt;/p&gt;
&lt;p&gt;Agile Modeling (&lt;code&gt;AM&lt;/code&gt;) principals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model with a purpose&lt;/li&gt;
&lt;li&gt;Use multiple models &lt;/li&gt;
&lt;li&gt;Travel light &lt;/li&gt;
&lt;li&gt;Content is more important than representation&lt;/li&gt;
&lt;li&gt;Know the models and the tools you use to create them&lt;/li&gt;
&lt;li&gt;Adapt locally&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Agile Unified Process (&lt;code&gt;AUP&lt;/code&gt;) 敏捷统一流程：一个精简的软件开发过程&lt;br&gt;Each AUP iteration addresses these activities: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modeling&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Deployment &lt;/li&gt;
&lt;li&gt;Configuration and project management &lt;/li&gt;
&lt;li&gt;Environment management&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Ch6-Human-Aspects-of-Software-Engineering&#34;&gt;&lt;a href=&#34;#Ch6-Human-Aspects-of-Software-Engineering&#34; class=&#34;headerlink&#34; title=&#34;Ch6 Human Aspects of Software Engineering&#34;&gt;&lt;/a&gt;Ch6 Human Aspects of Software Engineering&lt;/h1&gt;&lt;p&gt;Traits of Successful Software Engineers: 责任感、对需求敏感、直言不讳、有弹性(Resilient under pressure)、公平意识、注重细节、务实(Pragmatic)&lt;br&gt;The Psychology Of Software Engineering 没看懂不管了&lt;br&gt;Effective Software Team Attributes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sense of purpose&lt;/li&gt;
&lt;li&gt;Sense of involvement&lt;/li&gt;
&lt;li&gt;Sense of trust&lt;/li&gt;
&lt;li&gt;Sense of improvement&lt;/li&gt;
&lt;li&gt;Diversity of team member skill sets&lt;br&gt;Avoid Team “Toxicity” 毒性&lt;br&gt;A frenzied work atmosphere, high frustication, Fragmented or poorly coordinated procedures(或者定义不当的模型), Unclear definition of roles, Continuous and repeated exposure to failure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Factors Affecting Team Structure&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;difficulty of the problem&lt;/li&gt;
&lt;li&gt;size of the resultant program(s)&lt;/li&gt;
&lt;li&gt;the time that the team will stay together&lt;/li&gt;
&lt;li&gt;the degree to which the problem can be modularized&lt;/li&gt;
&lt;li&gt;the required quality and reliability of the system&lt;/li&gt;
&lt;li&gt;the rigidity of the delivery date 交付日期是不是很死&lt;/li&gt;
&lt;li&gt;the degree of sociability required&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Organizational Paradigms 组织范式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Closed paradigm&lt;/li&gt;
&lt;li&gt;Random paradigm&lt;/li&gt;
&lt;li&gt;Open paradigm&lt;/li&gt;
&lt;li&gt;Synchronous paradigm&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;范式&lt;/th&gt;
&lt;th&gt;组织方式&lt;/th&gt;
&lt;th&gt;控制程度&lt;/th&gt;
&lt;th&gt;创新程度&lt;/th&gt;
&lt;th&gt;沟通频率&lt;/th&gt;
&lt;th&gt;适用项目类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Closed&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;层级权威&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;td&gt;自上而下&lt;/td&gt;
&lt;td&gt;传统行业、安全关键系统&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Random&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;松散自由&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;无固定模式&lt;/td&gt;
&lt;td&gt;初创项目、探索性任务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Open&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;半结构化&lt;/td&gt;
&lt;td&gt;中等&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;高频协作&lt;/td&gt;
&lt;td&gt;敏捷开发、创新型项目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Synchronous&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;模块化分工&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;中等&lt;/td&gt;
&lt;td&gt;极少&lt;/td&gt;
&lt;td&gt;分布式系统、大型项目&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Generic Agile Teams（通用敏捷团队）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;individual competency coupled with group collaboration&lt;/li&gt;
&lt;li&gt;People trump process and politics can trump people&lt;/li&gt;
&lt;li&gt;self-organizing and have many structures&lt;/li&gt;
&lt;li&gt;Planning is kept to a minimum 不反对规划，但强调“轻量级规划”比如Sprint&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XP Team Values&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Communication&lt;/li&gt;
&lt;li&gt;Simplicity: design for immediate needs nor future needs&lt;/li&gt;
&lt;li&gt;Feedback&lt;/li&gt;
&lt;li&gt;Courage&lt;/li&gt;
&lt;li&gt;Respect&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Impact of Social Media &lt;/p&gt;
&lt;p&gt;Software Engineering using the Cloud&lt;/p&gt;
&lt;p&gt;协作工具：Services of collaborative development environments(CDEs)&lt;br&gt;Namespace, Calendar, Template, Metrics support(Metrics 应用于过程改进，而不是人员奖惩), Communication analysis, Artifact clustering归类&lt;/p&gt;
&lt;p&gt;Team Decisions Making Complications&lt;br&gt;&lt;img data-src=&#34;/6-1.jpg&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;Ch7-Principles-that-Guide-Practice&#34;&gt;&lt;a href=&#34;#Ch7-Principles-that-Guide-Practice&#34; class=&#34;headerlink&#34; title=&#34;Ch7 Principles that Guide Practice&#34;&gt;&lt;/a&gt;Ch7 Principles that Guide Practice&lt;/h1&gt;&lt;p&gt;Software development knowledgehave about a three year half-life, Software engineering principles 是永久的&lt;/p&gt;
&lt;p&gt;Principles that Guide Process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Be agile&lt;/li&gt;
&lt;li&gt;Focus on quality at every step&lt;/li&gt;
&lt;li&gt;Be ready to adapt&lt;/li&gt;
&lt;li&gt;Build an effective team&lt;/li&gt;
&lt;li&gt;Establish mechanisms for communication and coordination&lt;/li&gt;
&lt;li&gt;Manage change&lt;/li&gt;
&lt;li&gt;Assess risk&lt;/li&gt;
&lt;li&gt;Create work products that provide value for others&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Principles that Guide Practice:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Divide and conquer&lt;/li&gt;
&lt;li&gt;Understand the use of abstraction&lt;/li&gt;
&lt;li&gt;Strive for consistency&lt;/li&gt;
&lt;li&gt;Focus on the transfer of information 注意接口的设计&lt;/li&gt;
&lt;li&gt;Build software that exhibits effective modularity&lt;/li&gt;
&lt;li&gt;Look for patterns&lt;/li&gt;
&lt;li&gt;When possible, represent the problem and its solution from a number of different perspectives&lt;/li&gt;
&lt;li&gt;Remember that someone will maintain the software&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Communication Principle： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Listen&lt;/li&gt;
&lt;li&gt;Prepare before you communicate&lt;/li&gt;
&lt;li&gt;Someone should facilitate the activity&lt;/li&gt;
&lt;li&gt;Face-to-face communication is best&lt;/li&gt;
&lt;li&gt;Take notes and document decisions&lt;/li&gt;
&lt;li&gt;Strive for collaboration&lt;/li&gt;
&lt;li&gt;Stay focused, modularize your discussion&lt;/li&gt;
&lt;li&gt;If something is unclear, draw a picture&lt;/li&gt;
&lt;li&gt;不管怎样, Move on&lt;/li&gt;
&lt;li&gt;Nigotiation(谈判) works best when both parties win&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Planning Principles：&lt;br&gt;懒得写了考了我吃&lt;/p&gt;
&lt;p&gt;Modeling Principles： 创建两类模型&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Requirements models (also called analysis models) 需求模型&lt;/li&gt;
&lt;li&gt;Design models 设计模型&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Agile Modeling Principles 记不住，懒得写了再说&lt;/p&gt;
&lt;p&gt;Requirements Modeling Principles&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The information domain of a problem must be represented and understood  对问题领域内信息的全面了解是构建有效软件的基础&lt;/li&gt;
&lt;li&gt;The functions that the software performs must be defined  定义软件的功能，明确描述软件应提供的功能和服务&lt;/li&gt;
&lt;li&gt;The behavior of the software (as a consequence of external events) must be represented  定义软件的行为，如何响应外界事件或输入&lt;/li&gt;
&lt;li&gt;The models that depict information, function, and behavior must be partitioned in a manner that uncovers detail in a layered (or hierarchical) fashion  使用结构化的、分层次的方法来组织模型&lt;/li&gt;
&lt;li&gt;The analysis task should move from essential information toward implementation detail  先关注核心需求和架构设计，再细化到具体的实现方案&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Design Modeling Principles&lt;br&gt;太多了懒得看&lt;/p&gt;
&lt;p&gt;Living Modeling Principles&lt;br&gt;懒得看&lt;/p&gt;
&lt;p&gt;Construction Principles&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The construction activity encompasses a set of coding and testing tasks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Coding principles and concepts&lt;/code&gt; are closely aligned programming style, programming languages, and programming methods&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Testing principles and concepts&lt;/code&gt; lead to the design of tests that systematically uncover different classes of errors and to do so with a minimum amount of time and effort&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…..一堆principle，看了也记不住，不看了&lt;/p&gt;
&lt;h1 id=&#34;Ch8-Understanding-Requirements&#34;&gt;&lt;a href=&#34;#Ch8-Understanding-Requirements&#34; class=&#34;headerlink&#34; title=&#34;Ch8 Understanding Requirements&#34;&gt;&lt;/a&gt;Ch8 Understanding Requirements&lt;/h1&gt;&lt;p&gt;Requirements Engineering:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Inception: ask a set of questions – basic understanding of the problem, the people who want a solution, the nature of the solution, the effectiveness of preliminary communication and collaboration&lt;/li&gt;
&lt;li&gt;Elicitation: elicit requirements&lt;/li&gt;
&lt;li&gt;Elaboration: create an analysis model&lt;/li&gt;
&lt;li&gt;Negotiation: agree on a deliverable system&lt;/li&gt;
&lt;li&gt;Specification: written document&amp;#x2F;set of models&amp;#x2F;formal mathematical&amp;#x2F;use-cases&amp;#x2F;prototype&lt;/li&gt;
&lt;li&gt;Validation: a review mechanism that looks for – errors in content or interpretation&amp;#x2F;areas where clarification may be required&amp;#x2F;missing information&amp;#x2F;inconsistencies&amp;#x2F;conflicting or unrealistic (unachievable) requirements&lt;/li&gt;
&lt;li&gt;Requirements management&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Elicitation Work Products:&lt;br&gt;feasibility, scope, stakeholders, description of environment, constraints, usage scenarios, prototypes&lt;/p&gt;
&lt;p&gt;Negotiating Requirements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Identify the key stakeholders&lt;/li&gt;
&lt;li&gt;Determine each of the stakeholders “win conditions”&lt;/li&gt;
&lt;li&gt;Negotiate&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Requirements Monitoring:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Distributed debugging&lt;/li&gt;
&lt;li&gt;Run-time verification&lt;/li&gt;
&lt;li&gt;Run-time validation&lt;/li&gt;
&lt;li&gt;Business activity monitoring&lt;/li&gt;
&lt;li&gt;Evolution and co-design&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Validating Requirements:&lt;br&gt;consistent, 是否在level of abstraction规定了, 是否essential, unambiguous, 每个要求注明来源, requirements 之间是否 conflict, achievable, testable, properly reflect the information, function and behavior, partitioned方式, …&lt;/p&gt;
&lt;p&gt;Quality Function Deployment (QFD):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Function deployment&lt;/li&gt;
&lt;li&gt;Information deployment&lt;/li&gt;
&lt;li&gt;Task deployment&lt;/li&gt;
&lt;li&gt;Value analysis&lt;/li&gt;
&lt;li&gt;identifies three types of requirements: Normal&amp;#x2F;Expected&amp;#x2F;Exciting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Non-Functional Requirement (NFR): quality attribute, performance attribute, security attribute, or general system constraint&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The first phase is to create a matrix using each NFR&lt;/li&gt;
&lt;li&gt;The second phase is for the team to prioritize each NFR using a set of decision rules&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;Ch9-Requirements-Modeling：Scenario-Based-Methods-基于场景的需求建模方法&#34;&gt;&lt;a href=&#34;#Ch9-Requirements-Modeling：Scenario-Based-Methods-基于场景的需求建模方法&#34; class=&#34;headerlink&#34; title=&#34;Ch9 Requirements Modeling：Scenario-Based Methods 基于场景的需求建模方法&#34;&gt;&lt;/a&gt;Ch9 Requirements Modeling：Scenario-Based Methods 基于场景的需求建模方法&lt;/h1&gt;&lt;p&gt;需求分析的目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述客户所需的内容 Describe what the customer requires&lt;/li&gt;
&lt;li&gt;为软件设计提供基础 Establish a basis for the creation of a software design&lt;/li&gt;
&lt;li&gt;定义一组可以验证的需求 Define a set of requirements that can be validated&lt;br&gt;Rules of Thumb（基本原则）：&lt;/li&gt;
&lt;li&gt;The model should focus on requirements that are visible within the problem or business domain. The level of abstraction should be relatively high.&lt;/li&gt;
&lt;li&gt;Each element of the analysis model should add to an overall understanding of software requirements and provide insight into the information domain, function and behavior of the system.&lt;/li&gt;
&lt;li&gt;Delay consideration of infrastructure and other non-functional models until design.&lt;/li&gt;
&lt;li&gt;Minimize coupling throughout the system.&lt;/li&gt;
&lt;li&gt;Be certain that the analysis model provides value to all stakeholders.&lt;/li&gt;
&lt;li&gt;Keep the model as simple as it can be.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;system description -&amp;gt; analysis model -&amp;gt; design model&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/9-1.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Domain Analysis（领域分析）：&lt;br&gt;Software domain analysis is the identification, analysis, and specification of common requirements from a specific application domain, typically for &lt;code&gt;reuse&lt;/code&gt; on multiple projects within that application domain…&lt;/p&gt;
&lt;p&gt;Use-Case Diagram, Activity Diagrams, Swim Lane Diagrams&lt;/p&gt;
&lt;p&gt;In structured analysis, models focus on data flow and functional decomposition of the system;&lt;br&gt;In object-oriented analysis, models focus on the structure of the classes defined for a system along with their interactions&lt;/p&gt;
&lt;p&gt;Each primary scenario should be &lt;code&gt;reviewed&lt;/code&gt; and &lt;code&gt;refined&lt;/code&gt; to see ifalternative interactions are possible&lt;/p&gt;
&lt;h1 id=&#34;Ch10-Requirements-Modeling-Class-Based-Methods&#34;&gt;&lt;a href=&#34;#Ch10-Requirements-Modeling-Class-Based-Methods&#34; class=&#34;headerlink&#34; title=&#34;Ch10 Requirements Modeling: Class-Based Methods&#34;&gt;&lt;/a&gt;Ch10 Requirements Modeling: Class-Based Methods&lt;/h1&gt;&lt;p&gt;Class-Based需求建模的方法：structured analysis(数据对象和数据的转换), object- oriented analysis(类和类的协作)&lt;br&gt;the broad categories used to classify operations: computation, data manipulation, event monitors&lt;br&gt;Class-Based Modeling: objects, operations, relationships, collaborations&lt;br&gt;类图&lt;br&gt;CRC Cards&lt;br&gt;见画图题&lt;/p&gt;
&lt;h1 id=&#34;Ch11-Requirements-Modeling-Behavior-Patterns-and-Web-Mobile-Apps&#34;&gt;&lt;a href=&#34;#Ch11-Requirements-Modeling-Behavior-Patterns-and-Web-Mobile-Apps&#34; class=&#34;headerlink&#34; title=&#34;Ch11 Requirements Modeling: Behavior, Patterns, and Web&amp;#x2F;Mobile Apps&#34;&gt;&lt;/a&gt;Ch11 Requirements Modeling: Behavior, Patterns, and Web&amp;#x2F;Mobile Apps&lt;/h1&gt;&lt;p&gt;For purposes of behavior modeling a state is any observable mode of behavior&lt;br&gt;Analysis patterns are discovered, they are not explicitly created&lt;br&gt;行为建模: use-cases, events, sequences, state diagram, 审查&lt;br&gt;行为建模三种图：state diagram, sequence diagram, data-flow diagram&lt;br&gt;The state transition diagram indicates system reactions to external events.&lt;br&gt;events由系统外部的参与者触发&lt;/p&gt;
&lt;h2 id=&#34;Requirements-Modeling-for-WebApps&#34;&gt;&lt;a href=&#34;#Requirements-Modeling-for-WebApps&#34; class=&#34;headerlink&#34; title=&#34;Requirements Modeling for WebApps:&#34;&gt;&lt;/a&gt;Requirements Modeling for WebApps:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;内容分析 Content Analysis：描述文本、图形和图像、视频、音频等。&lt;/li&gt;
&lt;li&gt;交互分析 Interaction Analysis：使用案例。&lt;/li&gt;
&lt;li&gt;功能分析 Functional Analysis：定义应用于WebApp内容的操作，暗示其他处理功能。&lt;/li&gt;
&lt;li&gt;配置分析 Configuration Analysis：环境和基础设施。&lt;/li&gt;
&lt;li&gt;导航分析 Navigation Analysis：关注总体要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置模型 Configuration Model&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器端 Server-side：必须指定服务器硬件和操作系统环境、考虑服务器端互操作性、指定适当的接口、通信协议及相关协作信息。&lt;/li&gt;
&lt;li&gt;客户端 Client-side：必须识别浏览器配置问题、定义测试要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;导航建模 Navigation Modeling&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;考虑哪些元素应更容易到达（需要更少的导航步骤），优先级如何？&lt;/li&gt;
&lt;li&gt;如何处理导航错误？&lt;/li&gt;
&lt;li&gt;是否应该通过链接、基于搜索的访问或其他方式完成导航？&lt;/li&gt;
&lt;li&gt;是否应根据之前导航动作的上下文向用户展示某些元素？&lt;/li&gt;
&lt;li&gt;是否应维护用户的导航日志？&lt;br&gt; WebApps interaction model: use-cases, sequence diagrams, state diagrams, interface prototype&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Ch12-Design-Concepts&#34;&gt;&lt;a href=&#34;#Ch12-Design-Concepts&#34; class=&#34;headerlink&#34; title=&#34;Ch12 Design Concepts&#34;&gt;&lt;/a&gt;Ch12 Design Concepts&lt;/h1&gt;&lt;p&gt;好的软件设计应该具备：坚固性 Firmness, 实用性 Commodity, 愉悦感 Delight&lt;br&gt;Software Engineering Design：设计原则与质量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data&amp;#x2F;Class design&lt;/li&gt;
&lt;li&gt;Architectural design&lt;/li&gt;
&lt;li&gt;Interface design&lt;/li&gt;
&lt;li&gt;Component-level design&lt;br&gt;自上而下是金字塔，见下图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/12-1.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Analysis Model -&amp;gt; Design Model（需求模型到设计模型）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计必须实施分析模型中包含的所有显式需求(explicit requirements)，并适应客户希望的所有隐式需求。&lt;/li&gt;
&lt;li&gt;设计应当是可读且易于理解(readable, understandable guide)的指南，帮助编写代码的人以及测试和支持软件的人。&lt;/li&gt;
&lt;li&gt;设计应该提供软件的完整画面(a complete picture)，从实现的角度解决数据、功能和行为领域的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;质量指南 Quality Guidelines&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计应展示一种使用公认的架构风格创建的架构。&lt;/li&gt;
&lt;li&gt;设计应由展现良好设计特性的组件组成。&lt;/li&gt;
&lt;li&gt;设计可以逐步实现。&lt;/li&gt;
&lt;li&gt;设计应模块化，即将软件逻辑划分为元素或子系统。&lt;/li&gt;
&lt;li&gt;设计应包含数据、架构、接口和组件的不同表示形式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设计原则 Design Principles&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计过程不应有“隧道视野”，即应全面考虑各种因素。&lt;/li&gt;
&lt;li&gt;设计应可追溯到分析模型。&lt;/li&gt;
&lt;li&gt;设计不应重新发明轮子（即不应重复已有的解决方案）。&lt;/li&gt;
&lt;li&gt;设计应“最小化软件与现实世界中存在的问题之间的智力距离”。&lt;/li&gt;
&lt;li&gt;设计应统一且整合。&lt;/li&gt;
&lt;li&gt;设计应能够适应变化。&lt;/li&gt;
&lt;li&gt;设计应以温和的方式降级，即使遇到异常数据、事件或操作条件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OO Design Concepts: Design classes(&lt;code&gt;Entity classes&lt;/code&gt;, &lt;code&gt;Boundary classes&lt;/code&gt;, &lt;code&gt;Controller classes&lt;/code&gt;), Inheritance, Messages, Polymorphism&lt;br&gt;:::warning&lt;br&gt;后面看不下去先不管了&lt;br&gt;:::&lt;/p&gt;
&lt;h1 id=&#34;Ch13-Architectural-Design&#34;&gt;&lt;a href=&#34;#Ch13-Architectural-Design&#34; class=&#34;headerlink&#34; title=&#34;Ch13 Architectural Design&#34;&gt;&lt;/a&gt;Ch13 Architectural Design&lt;/h1&gt;&lt;p&gt;架构风格：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data-centered architectures&lt;/li&gt;
&lt;li&gt;Data flow architectures &lt;/li&gt;
&lt;li&gt;Call and return architectures&lt;/li&gt;
&lt;li&gt;Object-oriented architectures&lt;/li&gt;
&lt;li&gt;Layered architectures&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Ch14-Component-Level-Design&#34;&gt;&lt;a href=&#34;#Ch14-Component-Level-Design&#34; class=&#34;headerlink&#34; title=&#34;Ch14 Component-Level Design&#34;&gt;&lt;/a&gt;Ch14 Component-Level Design&lt;/h1&gt;&lt;p&gt;Component: a modular, deployable, and replaceable part of a system&lt;br&gt;OO角度：一个组件包含一组协作类&lt;br&gt;传统角度：数据结构和接口&lt;br&gt;Basic Design Principles：OCP, LSP, DIP, ISP, REP, CCP, CRP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open-Closed Principle: 开放扩展，关闭修改&lt;/li&gt;
&lt;li&gt;Liskov Substitution Principle: 子类可被父类替换&lt;/li&gt;
&lt;li&gt;Dependency Inversion Principles: 依赖抽象，不要依赖具体实现&lt;/li&gt;
&lt;li&gt;Interface Segregation Principle: 多个特定于客户端的接口比一个通用接口更好&lt;/li&gt;
&lt;li&gt;Release Reuse Equivalency Principle: 发布的粒度是重用的粒度&lt;/li&gt;
&lt;li&gt;Common Closure Principle: 一起变化的类应该放在一起&lt;/li&gt;
&lt;li&gt;Common Reuse Principle: 不一起重用的类不应放在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本设计原则（Basic Design Principles）:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;命名约定 Components &lt;/li&gt;
&lt;li&gt;接口 Interfaces&lt;/li&gt;
&lt;li&gt;依赖关系和继承：建议从左到右建模依赖关系，从底向上（派生类）到底部（基类）建模继承关系&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;设计指南（Design Guidelines）:&lt;br&gt;内聚性 Cohension&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &amp;#x3D;&amp;#x3D;“single-mindedness”&amp;#x3D;&amp;#x3D; of a module&lt;/li&gt;
&lt;li&gt;OO view: – cohesion implies that a component or class encapsulates only attributes and operations that are closely related to one another and to the class or component itself&lt;/li&gt;
&lt;li&gt;Levels of cohesion： Functional – Layer – Communicational – Sequential – Procedural – Temporal – Utility&lt;br&gt;耦合度级别：内容耦合、公共耦合、控制耦合等 Coupling&lt;/li&gt;
&lt;li&gt;The degree to which a component is &amp;#x3D;&amp;#x3D;connected to other components and to the external world&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;li&gt;OO观点: 衡量classes are connected to one another的程度&lt;/li&gt;
&lt;li&gt;Level of coupling: Content – Common – Control – Stamp – Data – Routine call – Type use – Inclusion or import – External&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WebApps 组件设计：通常包含content design and functional design&lt;br&gt;……&lt;/p&gt;
&lt;h1 id=&#34;Ch15-User-Interface-Design&#34;&gt;&lt;a href=&#34;#Ch15-User-Interface-Design&#34; class=&#34;headerlink&#34; title=&#34;Ch15 User Interface Design&#34;&gt;&lt;/a&gt;Ch15 User Interface Design&lt;/h1&gt;&lt;p&gt;Golden Rule：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Place the user in control&lt;/li&gt;
&lt;li&gt;Reduce the user’s memory load&lt;/li&gt;
&lt;li&gt;Make the interface consistent&lt;br&gt;User Interface Design Model:&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模型名称&lt;/th&gt;
&lt;th&gt;中文解释&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;User Model&lt;/td&gt;
&lt;td&gt;用户模型&lt;/td&gt;
&lt;td&gt;描述用户是谁、他们的需求和行为&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Design Model&lt;/td&gt;
&lt;td&gt;设计模型&lt;/td&gt;
&lt;td&gt;将用户模型转化为界面设计方案&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mental Model&lt;/td&gt;
&lt;td&gt;心理模型&lt;/td&gt;
&lt;td&gt;用户对界面的主观理解和预期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Implementation Model&lt;/td&gt;
&lt;td&gt;实现模型&lt;/td&gt;
&lt;td&gt;开发者实际构建的界面及其交互逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;User Interface Design Process: 螺旋模型&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Interface Analysis&lt;br&gt;Interface Analysis旨在理解以下几点：people(user), task, content, environment&lt;/p&gt;
&lt;h1 id=&#34;Ch16-Pattern-Based-Design&#34;&gt;&lt;a href=&#34;#Ch16-Pattern-Based-Design&#34; class=&#34;headerlink&#34; title=&#34;Ch16 Pattern-Based Design&#34;&gt;&lt;/a&gt;Ch16 Pattern-Based Design&lt;/h1&gt;&lt;p&gt;A design pattern is a three-part rule which expresses a relation between a certain &amp;#x3D;&amp;#x3D;context&amp;#x3D;&amp;#x3D;, a &amp;#x3D;&amp;#x3D;problem&amp;#x3D;&amp;#x3D;, and a &amp;#x3D;&amp;#x3D;solution&amp;#x3D;&amp;#x3D;.&lt;/p&gt;
&lt;p&gt;Describing a Pattern: By detailing various dimensions such as pattern name, problem, motivation, context, forces, solution, intent, collaborations, consequences, implementation, known uses, related patterns, etc. &lt;/p&gt;
&lt;h1 id=&#34;Ch17-WebApp-Design&#34;&gt;&lt;a href=&#34;#Ch17-WebApp-Design&#34; class=&#34;headerlink&#34; title=&#34;Ch17 WebApp Design&#34;&gt;&lt;/a&gt;Ch17 WebApp Design&lt;/h1&gt;&lt;p&gt;two basic approaches to design: 1. artistic ideal of designers; 2. the requirements of customers&lt;/p&gt;
&lt;p&gt;Design &amp;amp; WebApp Quality的几个关键：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Security: 抵御攻击、排除未经授权的访问、保护用户隐私&lt;/li&gt;
&lt;li&gt;Availability: 确保系统在需要的时候可用 The measure of the percentage of time that a WebApp is available for use&lt;/li&gt;
&lt;li&gt;Scalability（可扩展性）: Can the WebApp and the systems with which it is interfaced handle significant variation in user or transaction volume 系统在用户数量或交易量增加时，仍能保持良好的性能和响应速度的能力&lt;/li&gt;
&lt;li&gt;Time to Market（上市时间）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Quality Dimensions for End-Users:&lt;br&gt;对于用户而言&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Time: 网站更新的频率和程度&lt;/li&gt;
&lt;li&gt;Structural: 网站的结构、链接、图片正常显示、组件连接&lt;/li&gt;
&lt;li&gt;Content: 关键页面的内容、关键短语、关键页面的不同版本、动态生成页面的质量和一致性&lt;/li&gt;
&lt;li&gt;Accuracy and Consistency: &lt;/li&gt;
&lt;li&gt;Response Time and Latency: 响应、加载速度&lt;/li&gt;
&lt;li&gt;Performance: 站点连接速度、负载&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;WebApp Design Goals：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Consistency: Content, Graphic design (aesthetics), Architectural design, Interface design, Navigation mechanisms&lt;/li&gt;
&lt;li&gt;Identity: Web应用需要有一个清晰且与业务目标相匹配的品牌形象或身份&lt;/li&gt;
&lt;li&gt;Robustness: Web应用的内容和功能的质量和可靠性&lt;/li&gt;
&lt;li&gt;Navigability: Designed in a manner that is intuitive and predictable（以直观和可预测的方式设计）&lt;/li&gt;
&lt;li&gt;Visual appeal&lt;/li&gt;
&lt;li&gt;Compatibility 兼容性&lt;br&gt;&lt;img data-src=&#34;/17-1.jpg&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Interface Design需要回答: Where am I? What can I do now? Where have I been, where am I going?&lt;/p&gt;
&lt;p&gt;Interface Design Principles 太多了懒得写&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;Aesthetic Design&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don’t be afraid of white space.&lt;/li&gt;
&lt;li&gt;Emphasize content.&lt;/li&gt;
&lt;li&gt;Organize layout elements from top-left to bottom right.&lt;/li&gt;
&lt;li&gt;Group navigation, content, and function geographically within the page.&lt;/li&gt;
&lt;li&gt;Don’t extend your real estate with the scrolling bar.&lt;/li&gt;
&lt;li&gt;Consider resolution and browser window size when designing layout.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Content Design&lt;/p&gt;
&lt;p&gt;Architecture Design&lt;br&gt;Content architecture focuses on &amp;#x3D;&amp;#x3D;the manner in which content objects (or composite objects such as Web pages) are structured&amp;#x3D;&amp;#x3D; for presentation and navigation.&lt;br&gt;WebApp architecture addresses &amp;#x3D;&amp;#x3D;the manner in which the application is structured&amp;#x3D;&amp;#x3D; to manage user interaction, handle internal processing tasks, effect navigation, and presentcontent.&lt;br&gt;Architecture design is conducted in parallel with &lt;code&gt;interface design&lt;/code&gt;, &lt;code&gt;aesthetic design&lt;/code&gt; and &lt;code&gt;content design&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;MVC（Model-View-Controller）架构，一种广泛应用于软件工程中的设计模式&lt;br&gt;MVC将应用程序分为三个主要部分：模型（Model）、视图（View）和控制器（Controller）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;model: all application specific content and processing logic&lt;/li&gt;
&lt;li&gt;view: The view contains all interface specific functions and enables&lt;/li&gt;
&lt;li&gt;controller: The controller manages access to the model and the view and coordinates the &amp;#x3D;&amp;#x3D;flow of data&amp;#x3D;&amp;#x3D; between them&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Navigation Design&lt;br&gt;Navigation Syntax&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Individual navigation link（独立导航链接）&lt;br&gt;指单个用于跳转的元素，如文字链接、图标、按钮或开关。&lt;/li&gt;
&lt;li&gt;Horizontal navigation bar（水平导航栏）&lt;br&gt;水平排列的主要内容或功能分类链接。&lt;br&gt;通常包含4到7个选项，适合展示网站的核心栏目。&lt;/li&gt;
&lt;li&gt;Vertical navigation column（垂直导航列）&lt;br&gt;垂直排列的导航结构，常用于侧边栏。&lt;br&gt;可以列出主要内容类别或几乎所有的内容对象。&lt;/li&gt;
&lt;li&gt;Tabs（标签页）&lt;br&gt;类似浏览器的多标签页设计，是导航栏或列的一种变体。&lt;br&gt;每个标签代表一个内容区域或功能模块，点击切换。&lt;/li&gt;
&lt;li&gt;Site maps（站点地图）&lt;br&gt;提供整个Web应用内容与功能的完整目录，帮助用户全面了解和访问所有页面。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Component-Level Design&lt;/p&gt;
&lt;h1 id=&#34;Ch18-MobileApp-Design&#34;&gt;&lt;a href=&#34;#Ch18-MobileApp-Design&#34; class=&#34;headerlink&#34; title=&#34;Ch18 MobileApp Design&#34;&gt;&lt;/a&gt;Ch18 MobileApp Design&lt;/h1&gt;&lt;p&gt;MobileApp Design需要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiple hardware and software platforms&lt;/li&gt;
&lt;li&gt;Many development frameworks and programming languages&lt;/li&gt;
&lt;li&gt;Many app stores&lt;/li&gt;
&lt;li&gt;Short development cycles&lt;/li&gt;
&lt;li&gt;User interface limitations&lt;/li&gt;
&lt;li&gt;Complex camera&amp;#x2F;sensor interaction&lt;/li&gt;
&lt;li&gt;Effective use of context&lt;/li&gt;
&lt;li&gt;Power management&lt;/li&gt;
&lt;li&gt;Security and privacy models&amp;#x2F;policies&lt;/li&gt;
&lt;li&gt;Device limitations (computation and storage)&lt;/li&gt;
&lt;li&gt;Integration of external services&lt;/li&gt;
&lt;li&gt;Texting complexities&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MobileApp Development Process Model：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Formulation&lt;/li&gt;
&lt;li&gt;Planning&lt;/li&gt;
&lt;li&gt;Analysis&lt;/li&gt;
&lt;li&gt;Engineering&lt;/li&gt;
&lt;li&gt;Implementation and testing&lt;/li&gt;
&lt;li&gt;User evaluation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MobileApp Quality Checklist 略&lt;/p&gt;
&lt;p&gt;MobileApp User Interface Design Considerations&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define user interface brand signatures&lt;/li&gt;
&lt;li&gt;Focus the portfolio of products&lt;/li&gt;
&lt;li&gt;Identify core user stories&lt;/li&gt;
&lt;li&gt;Optimize UI flows and elements&lt;/li&gt;
&lt;li&gt;Define scaling rules 适应屏幕尺寸&lt;/li&gt;
&lt;li&gt;Create user performance dashboard 收集和分析用户行为数据&lt;/li&gt;
&lt;li&gt;Rely on dedicated champion with user interface engineering skills 在项目中设立一名专门负责用户界面设计和开发的角色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MobileApp Design Mistakes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kitchen sink 功能堆砌&lt;/li&gt;
&lt;li&gt;Inconsistency&lt;/li&gt;
&lt;li&gt;Overdesigning 过度设计&lt;/li&gt;
&lt;li&gt;Lack of speed&lt;/li&gt;
&lt;li&gt;Verbiage 过多、过于正式或复杂的文字描述&lt;/li&gt;
&lt;li&gt;Non-standard interaction&lt;/li&gt;
&lt;li&gt;Help-and–FAQ-itis 应用本身不好用，于是靠大量的帮助提示、FAQ、引导流程来弥补&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MobileApp Design Best Practices&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identify the audience 识别目标用户&lt;/li&gt;
&lt;li&gt;Design for context of use 根据使用场景来设计&lt;/li&gt;
&lt;li&gt;Recognize line between simplicity is not laziness 简化 ≠ 懒惰&lt;/li&gt;
&lt;li&gt;Use the platform to its advantage&lt;/li&gt;
&lt;li&gt;Allow for discoverability of advanced functionality 让高级功能易于被发现&lt;/li&gt;
&lt;li&gt;Use clear and consistent labels&lt;/li&gt;
&lt;li&gt;Cleaver icons should never be developed at the expense of user understanding&lt;/li&gt;
&lt;li&gt;Long scrolling forms trump multiple screens 长滚动表单优于多页面跳转&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Assessing Mobile Interactive Development Environments&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;General productivity features 指开发工具是否提供提高效率的功能&lt;/li&gt;
&lt;li&gt;Third-party SDK integration 是否支持主流的第三方服务和库（SDK）&lt;/li&gt;
&lt;li&gt;Post-compilation tools&lt;/li&gt;
&lt;li&gt;Over the air development support&lt;/li&gt;
&lt;li&gt;End-to-end mobile application development&lt;/li&gt;
&lt;li&gt;Documentation and tutorials&lt;/li&gt;
&lt;li&gt;Graphical user interface builders&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MobileApp Middleware 介于操作系统、网络服务与应用程序之间的一层软件，用于简化复杂的分布式系统之间的通信和数据管理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Facilitates communication and coordination of distributed components&lt;/li&gt;
&lt;li&gt;Allows developers to rely on abstractions and hide mobile environment details&lt;/li&gt;
&lt;li&gt;Helps MobileApps to achieve context awareness as required&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Ch19-Quality-Concepts&#34;&gt;&lt;a href=&#34;#Ch19-Quality-Concepts&#34; class=&#34;headerlink&#34; title=&#34;Ch19 Quality Concepts&#34;&gt;&lt;/a&gt;Ch19 Quality Concepts&lt;/h1&gt;&lt;h1 id=&#34;Ch20-Review-Techniques&#34;&gt;&lt;a href=&#34;#Ch20-Review-Techniques&#34; class=&#34;headerlink&#34; title=&#34;Ch20 Review Techniques&#34;&gt;&lt;/a&gt;Ch20 Review Techniques&lt;/h1&gt;&lt;p&gt;Reviews: 由技术人员为技术人员进行的会议，是对软件工程过程中产生的工作产品的技术评估，是软件质量保证机制之一，并作为培训场所&lt;br&gt;Errors(软件发布前发现的问题) and defects(软件发布后发现的问题)&lt;/p&gt;
&lt;p&gt;Defect Amplification Model 描述了开发步骤中的错误如何从前一步骤传递到下一步骤以及如何被检测出来&lt;br&gt;缺陷放大模型&lt;br&gt;&lt;img data-src=&#34;/20-1.jpg&#34;&gt;&lt;br&gt;$$&lt;br&gt;E_{review} &amp;#x3D; E_p + E_a + E_r&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;Err_{tot} &amp;#x3D; Err_{minor} + Err_{major}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;Defect\ density &amp;#x3D; Err_{tot} &amp;#x2F; WPS&lt;br&gt;$$&lt;/p&gt;
</content>
        <category term="软件工程" />
        <updated>2025-06-18T16:00:00.000Z</updated>
    </entry>
</feed>
