{
    "version": "https://jsonfeed.org/version/1",
    "title": "NoResponse's Blog • All posts by \"软件工程\" category",
    "description": "成分复杂的CSer from ZJU",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/06/19/SE/diagram/",
            "url": "http://example.com/2025/06/19/SE/diagram/",
            "title": "画图题",
            "date_published": "2025-06-18T16:00:00.000Z",
            "content_html": "<ol>\n<li>用例图 Use Case Diagram<br>\nUse-Cases: A collection of user scenarios that describe the thread of usage of a system<br>\n 主要包含涉及的角色，角色对应的行为，第三方参与部分</li>\n</ol>\n<ul>\n<li>参与者：与系统交互的用户或其他软硬件系统，用小人形表示</li>\n<li>用例：系统中执行的一系列动作，用椭圆表示。</li>\n<li>关系参与者与用例、参与者之间、用例之间的联系。连线</li>\n<li>边界：一组用例描述的系统或子系统，用矩形框表示。</li>\n</ul>\n<details class=\"primary\"><summary>example: SafeHome</summary><div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"题目\">\n<p>Our research indicates that the market for home security systems is growing at a rate of 40% per year. We would like to enter this market by building a <mark>microprocessor-based</mark> home security system that would protect against and/or recognize a variety of <mark>undesirable situations</mark> such as illegal entry, fire, flooding, and others. The product will use appropriate <mark>sensors</mark> to detect each situation, can be programmed by the <mark>homeowner</mark>, and will automatically telephone a monitoring agency when a situation is detected.</p>\n</div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"答案\">\n<p><img data-src=\"useCase.jpg\" alt><br>\n我的理解是找到里面的人 (onwer, monitoring agency, 然后可以加个 administrator)，物件 (sensor)，中间的框是个系统，然后里面的椭圆写上对应的交互行为，连上线，感觉比较主观</p>\n</div>\n</div></details>\n<ol start=\"2\">\n<li>CRC Card<br>\n 每个卡片应该包含：类名，类的描述信息，职责，合作类</li>\n</ol>\n<details class=\"primary\"><summary>example</summary><div>\n<p><img data-src=\"CRC.jpg\" alt></p>\n</div></details>\n<ol start=\"3\">\n<li>类图 class diagram<br>\n 主要的信息：类名，属性 (name: type)，方法 (name (parameter): return type)</li>\n</ol>\n<details class=\"primary\"><summary>example</summary><div>\n<div class=\"tab\" data-id=\"id4\" data-title=\"例子1\">\n<p><img data-src=\"class.jpg\" alt></p>\n</div>\n<div class=\"tab\" data-id=\"id4\" data-title=\"例子2\">\n<p><img data-src=\"class2.jpg\" alt></p>\n</div>\n</div></details>\n<ol start=\"4\">\n<li>状态图 state diagram<br>\n<strong> 节点</strong>：开始状态，结束状态，状态<br>\n<strong>边</strong>：行为<br>\n状态：圆角矩形<br>\n转移：带有标记的箭头<br>\n初始状态：实心圆<br>\n终止状态：实心环<br>\n分支：菱形</li>\n</ol>\n<details class=\"primary\"><summary>example</summary><div>\n<p><img data-src=\"state.jpg\" alt></p>\n</div></details>\n<ol start=\"5\">\n<li>时序图 sequence diagram<br>\n 对象（参与者上面要画个人）、生命线（对象下面的虚线）、控制焦点、消息<br>\n<img data-src=\"seq.jpg\" alt><br>\n实心箭头表示同步消息：一个对象向另一个对象发出同步消息后，将处于阻塞状态，一直等到另一个对象的回应（图里面的请求是同步的）<br>\n简单箭头表示异步</li>\n</ol>\n<div class=\"note warning\">\n<p>箭头的画法存疑</p>\n</div>\n<ol start=\"6\">\n<li>\n<p>数据流图 data flow diagram<br>\n 外部实体（数据的原点和终点）：软件系统外部环境中的实体（包括人、组织或其他软件系统），用<mark>方框</mark><br>\n加工 Process：对数据进行处理的单元，比如内部的 xx 系统，用<mark>圆角矩形</mark>或椭圆<br>\n数据存储：数据库，用<mark>右侧开口的矩形或者左右开口的矩形</mark><br>\n数据流：箭头方向即数据流动方向，数据流名标在数据流线上面<br>\n看例子：<br>\n<img data-src=\"dataflow.jpg\" alt></p>\n</li>\n<li>\n<p>软件架构图 architecture<br>\n 以前后端分离的系统为例（前端，后端，数据库）<br>\n<img data-src=\"arch.jpg\" alt><br>\n三个大框分别是客户端、服务器、数据库层<br>\n里面小框，前端就是 Web app 和移动 app，后端就是各种系统，数据库就是各种数据库（表？）</p>\n</li>\n<li>\n<p>泳道图 Swimlane Diagram<br>\n 跨职能流程图。旨在展示工作流中每个步骤涉及的流程和职能部门。在表示 use-case 的同时，描述对活动负责的 actor/analysis class<br>\n 最上面放实体，然后分成一列一列，其他的和流程图一样<br>\n<img data-src=\"swim.jpg\" alt></p>\n</li>\n</ol>\n",
            "tags": [
                "软件工程"
            ]
        },
        {
            "id": "http://example.com/2025/06/19/SE/note/",
            "url": "http://example.com/2025/06/19/SE/note/",
            "title": "SE note",
            "date_published": "2025-06-18T16:00:00.000Z",
            "content_html": "<h1 id=\"ch2-software-engineering\"><a class=\"markdownIt-Anchor\" href=\"#ch2-software-engineering\">#</a> Ch2 Software Engineering</h1>\n<ul>\n<li>Definition: The application of a <mark>systematic</mark>, <mark>disciplined</mark>, <mark>quantifiable（可量化）</mark> approach to the <mark>development</mark>, <mark>operation</mark>, and <mark>maintenance</mark> of software</li>\n<li>软件工程是一个多层次的技术体系 (a layered technology)\n<ul>\n<li>从下往上是 a “quality” focus, process model, methods, tools, 反映了构建高质量软件产品的逻辑流程</li>\n</ul>\n</li>\n<li>软件过程（The Software Process）中的两个重要概念：通用过程框架（Common Process Framework）和 伞形活动（Umbrella Activities）\n<ul>\n<li>通用过程框架（Common Process Framework）： 软件开发过程中的一些基本要素\n<ul>\n<li>工作任务（work tasks）：指在软件开发的不同阶段中需要完成的具体任务。</li>\n<li>工作产品（work products）：指在执行工作任务过程中产生的各种文档、代码等成果物。</li>\n<li>里程碑与交付物（milestones &amp; deliverables）：里程碑是项目进展的重要节点，而交付物是在这些节点上需要提交的成果。</li>\n<li>质量保证检查点（QA checkpoints）：在整个开发过程中设置的检查点，用于评估和确保软件产品的质量。</li>\n</ul>\n</li>\n<li>伞形活动（Umbrella Activities）：软件开发过程中需要执行的活动\n<ul>\n<li>项目管理（Project management）：负责项目的规划、组织、协调和控制，确保项目按计划进行。</li>\n<li>质量保证（Quality assurance）：通过一系列措施确保软件产品的质量符合预定标准。</li>\n<li>工作产品生产（Work product production）：涉及创建和维护软件开发过程中产生的各种工作产品。</li>\n<li>测量（Measurement）：收集和分析数据以评估项目的状态和进度。</li>\n<li>正式技术评审（Formal technical reviews）：对软件的技术设计和实现进行系统性的审查。</li>\n<li>配置管理（Configuration management）：管理软件开发过程中各种配置项的变化，确保版本的一致性和可追溯性。</li>\n<li>重用管理（Reusability management）：促进软件组件和模块的重用，提高开发效率和软件质量。</li>\n<li>风险管理（Risk management）：识别、评估和应对可能影响项目成功的各种风险。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Generic Process Framework</strong> 通用的软件开发过程框架\n<ul>\n<li><strong>Communication</strong>: 与客户协作并收集需求</li>\n<li><strong>Planning</strong>: establishes engineering work plan, describes technical risks, lists resource requirements, work products produced, and defines work schedule</li>\n<li><strong>Modeling</strong>: 创建模型以帮助开发者和客户理解需求和设计</li>\n<li><strong>Construction</strong>: code &amp; test</li>\n<li><strong>Deployment</strong>: 交付软件供客户评估和反馈</li>\n</ul>\n</li>\n<li><strong>Process Adaptation</strong> 过程适配：根据项目的具体需求、限制条件和特点，对软件开发过程进行定制和调整\n<ul>\n<li>overall <mark>flow</mark> of activities, actions, and tasks and the interdependencies among them</li>\n<li>degree to which <mark>actions and tasks</mark> are defined within each framework activity</li>\n<li>degree to which <mark>work products</mark> are identified and required</li>\n<li>manner which <mark>quality assurance</mark> activities are applied</li>\n<li>manner in which <mark>project tracking and control</mark> activities are applied</li>\n<li>overall degree of <mark>detail and rigor</mark> with which the process is described</li>\n<li>degree to which the <mark>customer and other stakeholders</mark> are involved with the project</li>\n<li>level of autonomy given to the <mark>software team</mark></li>\n<li>degree to which <mark>team organization and roles</mark> are prescribed</li>\n</ul>\n</li>\n<li>The Essence of Practice\n<ul>\n<li><strong>Understand the problem</strong> (communication and analysis).</li>\n<li><strong>Plan a solution</strong> (modeling and software design).</li>\n<li><strong>Carry out the plan</strong> (code generation).</li>\n<li><strong>Examine the result for accuracy</strong> (testing and quality assurance).</li>\n</ul>\n</li>\n<li>General Principles 通用原则：软件开发过程中应遵循的一些核心指导思想或基本原则\n<ul>\n<li>The reason it all exists — Provide Value to users</li>\n<li>KISS — Keep It Simple, Stupid!</li>\n<li>Maintain the Vision</li>\n<li>What you produce, others will consume</li>\n<li>Be open to the future</li>\n<li>Plan ahead for reuse</li>\n<li>Think!</li>\n</ul>\n</li>\n<li>Software Development Myths 软件开发管理中常见的误解（Myth）及其背后的现实情况（Reality）\n<ul>\n<li>Management myths\n<ul>\n<li>标准和流程的有效性依赖于团队的理解和接受程度。</li>\n<li>软件开发是一个高度协作和复杂的创造性过程，简单地增加人力并不能解决进度问题。</li>\n<li>外包项目同样需要良好的管理和沟通能力，不能因为外包就忽视了对项目的控制和监督</li>\n</ul>\n</li>\n<li>Customer myths\n<ul>\n<li>详细的需求分析和规划</li>\n<li>充分的沟通与确认</li>\n<li>合理的进度评估</li>\n</ul>\n</li>\n<li>Practitioner’s myths\n<ul>\n<li>错误：一旦我们编写好程序并使其正常运行，我们的工作就完成了</li>\n<li>过早进入编码阶段可能会导致更多的返工和调整，从而延长项目周期</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"ch3-software-process-structure\"><a class=\"markdownIt-Anchor\" href=\"#ch3-software-process-structure\">#</a> Ch3 Software Process Structure</h1>\n<p>Umbrella Activities 是贯穿整个软件开发过程的活动，Framework Activity 是软件开发的核心阶段，如沟通、计划、建模、构建和部署，每个框架活动下都有具体的 task set，每个 task set 中又包含多个具体的 action</p>\n<ul>\n<li>\n<p><strong>Process flow</strong> 过程流（对于之前提到的 Generic Process Framework 的五步）</p>\n<ol>\n<li>线性过程流（Linear process flow）</li>\n<li>迭代过程流（Iterative process flow）</li>\n<li>演化过程流（Evolutionary process flow）</li>\n<li>并行过程流（Parallel process flow）<br>\n<img data-src=\"f1.jpg\" alt></li>\n</ol>\n</li>\n<li>\n<p><strong>Process Patterns</strong> 过程模式<br>\n Process patterns define a set of activities, actions, work tasks, work products and/or related behaviors<br>\n 提供了一种 <code>template</code>  用于定义模式<br>\n<strong> Generic software pattern elements</strong>:</p>\n</li>\n<li>\n<p>pattern name</p>\n</li>\n<li>\n<p>Intent (objective of pattern)</p>\n</li>\n<li>\n<p>Type (Task pattern, Stage pattern, Phase pattern)</p>\n</li>\n<li>\n<p>Initial context</p>\n</li>\n<li>\n<p>Solution</p>\n</li>\n<li>\n<p>Resulting context</p>\n</li>\n<li>\n<p>Related patterns</p>\n</li>\n<li>\n<p>Known uses/examples</p>\n</li>\n<li>\n<p><strong>Process Assessment</strong><br>\n 几种评估软件过程的方法：<br>\nSCAMPI (Standard CMMI Appraisal Method for Process Improvement)<br>\nSPICE (ISO/IEC 15504)<br>\nCBA IPI (Capability Benchmarking Appraisal using the Integrated Process Improvement method)<br>\nISO 9001:2000 for Software</p>\n</li>\n<li>\n<p>The Capability Maturity Model Integration 能力成熟度模型集成（CMMI）</p>\n<ul>\n<li>Level 0: Incomplete</li>\n<li>Level 1: Performed</li>\n<li>Level 2: Managed</li>\n<li>Level 3: Defined</li>\n<li>Level 4: Quantitatively Managed 定量管理</li>\n<li>Level 5: Optimizing</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"ch4-process-models\"><a class=\"markdownIt-Anchor\" href=\"#ch4-process-models\">#</a> Ch4 Process Models</h1>\n",
            "tags": [
                "软件工程"
            ]
        }
    ]
}