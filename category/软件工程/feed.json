{
    "version": "https://jsonfeed.org/version/1",
    "title": "NoResponse's Blog • All posts by \"软件工程\" category",
    "description": "成分复杂的CSer from ZJU",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/06/19/SE/diagram/",
            "url": "http://example.com/2025/06/19/SE/diagram/",
            "title": "画图题",
            "date_published": "2025-06-18T16:00:00.000Z",
            "content_html": "<ol>\n<li>用例图 Use Case Diagram<br>Use-Cases: A collection of user scenarios that describe the thread of usage of a system<br>主要包含涉及的角色，角色对应的行为，第三方参与部分</li>\n</ol>\n<ul>\n<li>参与者：与系统交互的用户或其他软硬件系统，用小人形表示</li>\n<li>用例：系统中执行的一系列动作，用椭圆表示。</li>\n<li>关系参与者与用例、参与者之间、用例之间的联系。连线</li>\n<li>边界：一组用例描述的系统或子系统，用矩形框表示。</li>\n</ul>\n<p>+++primary example: SafeHome<br>;;;id3 题目<br>Our research indicates that the market for home security systems is growing at a rate of 40% per year. We would like to enter this market by building a &#x3D;&#x3D;microprocessor-based&#x3D;&#x3D; home security system that would protect against and&#x2F;or recognize a variety of &#x3D;&#x3D;undesirable situations&#x3D;&#x3D; such as illegal entry, fire, flooding, and others. The product will use appropriate &#x3D;&#x3D;sensors&#x3D;&#x3D; to detect each situation, can be programmed by the &#x3D;&#x3D;homeowner&#x3D;&#x3D;, and will automatically telephone a monitoring agency when a situation is detected.<br>;;;</p>\n<p>;;;id3 答案<br><img data-src=\"/useCase.jpg\"><br>我的理解是找到里面的人(onwer, monitoring agency, 然后可以加个administrator)，物件(sensor)，中间的框是个系统，然后里面的椭圆写上对应的交互行为，连上线，感觉比较主观<br>;;;<br>+++</p>\n<ol start=\"2\">\n<li><p>CRC Card<br>每个卡片应该包含：类名，类的描述信息，职责，合作类<br>+++primary example<br><img data-src=\"/CRC.jpg\"><br>+++</p>\n</li>\n<li><p>类图 class diagram<br>主要的信息：类名，属性(name: type)，方法(name(parameter): return type)<br>+++primary example<br>;;;id4 例子1<br><img data-src=\"/class.jpg\"><br>;;;<br>;;;id4 例子2<br><img data-src=\"/class2.jpg\"><br>;;;<br>+++</p>\n</li>\n<li><p>状态图 state diagram<br><strong>节点</strong>：开始状态，结束状态，状态<br><strong>边</strong>：行为<br>状态：圆角矩形<br>转移：带有标记的箭头<br>初始状态：实心圆<br>终止状态：实心环<br>分支：菱形<br>+++primary example<br><img data-src=\"/state.jpg\"><br>+++</p>\n</li>\n<li><p>时序图 sequence diagram<br>对象（参与者上面要画个人）、生命线（对象下面的虚线）、控制焦点、消息<br><img data-src=\"/seq.jpg\"><br>实心箭头表示同步消息：一个对象向另一个对象发出同步消息后，将处于阻塞状态，一直等到另一个对象的回应（图里面的请求是同步的）<br>简单箭头表示异步<br>:::warning<br>箭头的画法存疑<br>:::</p>\n</li>\n<li><p>数据流图 data flow diagram<br>外部实体（数据的原点和终点）：软件系统外部环境中的实体（包括人、组织或其他软件系统），用&#x3D;&#x3D;方框&#x3D;&#x3D;<br>加工Process：对数据进行处理的单元，比如内部的xx系统，用&#x3D;&#x3D;圆角矩形&#x3D;&#x3D;或椭圆<br>数据存储：数据库，用&#x3D;&#x3D;右侧开口的矩形或者左右开口的矩形&#x3D;&#x3D;<br>数据流：箭头方向即数据流动方向，数据流名标在数据流线上面<br>看例子：<br><img data-src=\"/dataflow.jpg\"></p>\n</li>\n<li><p>软件架构图 architecture<br>以前后端分离的系统为例（前端，后端，数据库）<br><img data-src=\"/arch.jpg\"><br>三个大框分别是客户端、服务器、数据库层<br>里面小框，前端就是Web app和移动app，后端就是各种系统，数据库就是各种数据库（表？）</p>\n</li>\n<li><p>泳道图 Swimlane Diagram<br>跨职能流程图。旨在展示工作流中每个步骤涉及的流程和职能部门。在表示use-case的同时，描述对活动负责的actor&#x2F;analysis class<br>最上面放实体，然后分成一列一列，其他的和流程图一样<br><img data-src=\"/swim.jpg\"></p>\n</li>\n</ol>\n",
            "tags": [
                "软件工程"
            ]
        },
        {
            "id": "http://example.com/2025/06/19/SE/note/",
            "url": "http://example.com/2025/06/19/SE/note/",
            "title": "SE note",
            "date_published": "2025-06-18T16:00:00.000Z",
            "content_html": "<h1 id=\"Ch2-Software-Engineering\"><a href=\"#Ch2-Software-Engineering\" class=\"headerlink\" title=\"Ch2 Software Engineering\"></a>Ch2 Software Engineering</h1><ul>\n<li>Definition: The application of a &#x3D;&#x3D;systematic&#x3D;&#x3D;, &#x3D;&#x3D;disciplined&#x3D;&#x3D;, &#x3D;&#x3D;quantifiable（可量化）&#x3D;&#x3D; approach to the &#x3D;&#x3D;development&#x3D;&#x3D;, &#x3D;&#x3D;operation&#x3D;&#x3D;, and &#x3D;&#x3D;maintenance&#x3D;&#x3D; of software</li>\n<li>软件工程是一个多层次的技术体系(a layered technology)<ul>\n<li>从下往上是a “quality” focus, process model, methods, tools, 反映了构建高质量软件产品的逻辑流程</li>\n</ul>\n</li>\n<li>软件过程（The Software Process）中的两个重要概念：通用过程框架（Common Process Framework）和 伞形活动（Umbrella Activities）<ul>\n<li>通用过程框架（Common Process Framework）： 软件开发过程中的一些基本要素<ul>\n<li>工作任务（work tasks）：指在软件开发的不同阶段中需要完成的具体任务。</li>\n<li>工作产品（work products）：指在执行工作任务过程中产生的各种文档、代码等成果物。</li>\n<li>里程碑与交付物（milestones &amp; deliverables）：里程碑是项目进展的重要节点，而交付物是在这些节点上需要提交的成果。</li>\n<li>质量保证检查点（QA checkpoints）：在整个开发过程中设置的检查点，用于评估和确保软件产品的质量。</li>\n</ul>\n</li>\n<li>伞形活动（Umbrella Activities）：软件开发过程中需要执行的活动<ul>\n<li>项目管理（Project management）：负责项目的规划、组织、协调和控制，确保项目按计划进行。</li>\n<li>质量保证（Quality assurance）：通过一系列措施确保软件产品的质量符合预定标准。</li>\n<li>工作产品生产（Work product production）：涉及创建和维护软件开发过程中产生的各种工作产品。</li>\n<li>测量（Measurement）：收集和分析数据以评估项目的状态和进度。</li>\n<li>正式技术评审（Formal technical reviews）：对软件的技术设计和实现进行系统性的审查。</li>\n<li>配置管理（Configuration management）：管理软件开发过程中各种配置项的变化，确保版本的一致性和可追溯性。</li>\n<li>重用管理（Reusability management）：促进软件组件和模块的重用，提高开发效率和软件质量。</li>\n<li>风险管理（Risk management）：识别、评估和应对可能影响项目成功的各种风险。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Generic Process Framework</strong> 通用的软件开发过程框架<ul>\n<li><strong>Communication</strong>: 与客户协作并收集需求</li>\n<li><strong>Planning</strong>: establishes engineering work plan, describes technical risks, lists resource requirements, work products produced, and defines work schedule</li>\n<li><strong>Modeling</strong>: 创建模型以帮助开发者和客户理解需求和设计</li>\n<li><strong>Construction</strong>: code &amp; test</li>\n<li><strong>Deployment</strong>: 交付软件供客户评估和反馈</li>\n</ul>\n</li>\n<li><strong>Process Adaptation</strong> 过程适配: 根据项目的具体需求、限制条件和特点，对软件开发过程进行定制和调整<ul>\n<li>overall &#x3D;&#x3D;flow&#x3D;&#x3D; of activities, actions, and tasks and the interdependencies among them</li>\n<li>degree to which &#x3D;&#x3D;actions and tasks&#x3D;&#x3D; are defined within each framework activity</li>\n<li>degree to which &#x3D;&#x3D;work products&#x3D;&#x3D; are identified and required</li>\n<li>manner which &#x3D;&#x3D;quality assurance&#x3D;&#x3D; activities are applied</li>\n<li>manner in which &#x3D;&#x3D;project tracking and control&#x3D;&#x3D; activities are applied</li>\n<li>overall degree of &#x3D;&#x3D;detail and rigor&#x3D;&#x3D; with which the process is described</li>\n<li>degree to which the &#x3D;&#x3D;customer and other stakeholders&#x3D;&#x3D; are involved with the project</li>\n<li>level of autonomy given to the &#x3D;&#x3D;software team&#x3D;&#x3D;</li>\n<li>degree to which &#x3D;&#x3D;team organization and roles&#x3D;&#x3D; are prescribed</li>\n</ul>\n</li>\n<li>The Essence of Practice<ul>\n<li><strong>Understand the problem</strong> (communication and analysis).</li>\n<li><strong>Plan a solution</strong> (modeling and software design).</li>\n<li><strong>Carry out the plan</strong> (code generation).</li>\n<li><strong>Examine the result for accuracy</strong> (testing and quality assurance).</li>\n</ul>\n</li>\n<li>General Principles 通用原则：软件开发过程中应遵循的一些核心指导思想或基本原则<ul>\n<li>The reason it all exists — Provide Value to users</li>\n<li>KISS — Keep It Simple, Stupid!</li>\n<li>Maintain the Vision</li>\n<li>What you produce, others will consume</li>\n<li>Be open to the future</li>\n<li>Plan ahead for reuse</li>\n<li>Think!</li>\n</ul>\n</li>\n<li>Software Development Myths 软件开发管理中常见的误解（Myth）及其背后的现实情况（Reality）<ul>\n<li>Management myths<ul>\n<li>标准和流程的有效性依赖于团队的理解和接受程度。</li>\n<li>软件开发是一个高度协作和复杂的创造性过程，简单地增加人力并不能解决进度问题。</li>\n<li>外包项目同样需要良好的管理和沟通能力，不能因为外包就忽视了对项目的控制和监督</li>\n</ul>\n</li>\n<li>Customer myths<ul>\n<li>详细的需求分析和规划</li>\n<li>充分的沟通与确认</li>\n<li>合理的进度评估</li>\n</ul>\n</li>\n<li>Practitioner’s myths<ul>\n<li>错误：一旦我们编写好程序并使其正常运行，我们的工作就完成了</li>\n<li>过早进入编码阶段可能会导致更多的返工和调整，从而延长项目周期</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Ch3-Software-Process-Structure\"><a href=\"#Ch3-Software-Process-Structure\" class=\"headerlink\" title=\"Ch3 Software Process Structure\"></a>Ch3 Software Process Structure</h1><p>Umbrella Activities是贯穿整个软件开发过程的活动，Framework Activity是软件开发的核心阶段，如沟通、计划、建模、构建和部署，每个框架活动下都有具体的task set，每个task set中又包含多个具体的action</p>\n<ul>\n<li><p><strong>Process flow</strong> 过程流（对于之前提到的Generic Process Framework的五步）</p>\n<ol>\n<li>线性过程流（Linear process flow）</li>\n<li>迭代过程流（Iterative process flow）</li>\n<li>演化过程流（Evolutionary process flow）</li>\n<li>并行过程流（Parallel process flow）<br><img data-src=\"/f1.jpg\"></li>\n</ol>\n</li>\n<li><p><strong>Process Patterns</strong> 过程模式<br>Process patterns define a set of activities, actions, work tasks, work products and&#x2F;or related behaviors<br>提供了一种<code>template</code>用于定义模式<br><strong>Generic software pattern elements</strong>:</p>\n</li>\n<li><p>pattern name </p>\n</li>\n<li><p>Intent (objective of pattern) </p>\n</li>\n<li><p>Type (Task pattern, Stage pattern, Phase pattern)</p>\n</li>\n<li><p>Initial context</p>\n</li>\n<li><p>Solution</p>\n</li>\n<li><p>Resulting context</p>\n</li>\n<li><p>Related patterns</p>\n</li>\n<li><p>Known uses&#x2F;examples</p>\n</li>\n<li><p><strong>Process Assessment</strong><br>几种评估软件过程的方法：<br>SCAMPI (Standard CMMI Appraisal Method for Process Improvement)<br>SPICE (ISO&#x2F;IEC 15504)<br>CBA IPI (Capability Benchmarking Appraisal using the Integrated Process Improvement method)<br>ISO 9001:2000 for Software</p>\n</li>\n<li><p>The Capability Maturity Model Integration 能力成熟度模型集成（CMMI）</p>\n<ul>\n<li>Level 0: Incomplete </li>\n<li>Level 1: Performed </li>\n<li>Level 2: Managed</li>\n<li>Level 3: Defined</li>\n<li>Level 4: Quantitatively Managed 定量管理</li>\n<li>Level 5: Optimizing</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Ch4-Process-Models\"><a href=\"#Ch4-Process-Models\" class=\"headerlink\" title=\"Ch4 Process Models\"></a>Ch4 Process Models</h1><h2 id=\"Prescriptive-Models\"><a href=\"#Prescriptive-Models\" class=\"headerlink\" title=\"Prescriptive Models\"></a>Prescriptive Models</h2><p>Prescriptive(规范的) process models advocate an orderly approach to software engineering</p>\n<ul>\n<li>The Waterfall Model<br><img data-src=\"/4-1.jpg\"></li>\n<li>The V Model<br><img data-src=\"/4-2.jpg\"></li>\n<li>Incremental Process Models 增量过程模型<ul>\n<li>The Incremental Model 增量模型: 将整个系统划分为多个可交付的“增量”部分，每个增量都作为一个独立的小项目进行五步流程<br> <img data-src=\"/4-3.jpg\"></li>\n<li>The Rapid Application Development (RAD) Model 快速应用开发模型: 短时间内交付功能完善的系统，communication和planning之后分成好几个team进行modeling和construction，最后合并deployment<br> <img data-src=\"/4-4.jpg\"></li>\n</ul>\n</li>\n<li>Evolutionary Process Models 进化式过程模型<ul>\n<li>Prototyping 原型化方法: 当客户有明确的需求但不清楚具体细节时，通过原型，客户可以直观地看到系统的雏形并提出修改意见；原型通常是“抛弃型”的，即在验证概念后会被丢弃，而不是直接作为最终产品的一部分<ul>\n<li>Prototype Model: Communication, Quick Plan, Modeling &amp; Quick Design, Construction of prototype, Deployment Delivery &amp; Feedback</li>\n</ul>\n</li>\n<li>The Spiral Model 螺旋模型: 螺旋模型将整个开发过程视为一个逐渐扩大的螺旋线，每个环代表一个开发阶段或迭代周期<br> <img data-src=\"/4-5.jpg\"> </li>\n<li>The Concurrent Development Model 并行开发模型<ul>\n<li>并行开发模型定义了一系列事件，这些事件将触发每个活动、动作或任务从一个状态到另一个状态的转换</li>\n<li>Especially good for client&#x2F;server applications</li>\n<li>并行开发模型定义了一个活动网络，而不是简单的线性事件序列</li>\n<li>需要在Flexibility, Extensibility, Speed of development 和 high quality 中权衡</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Specialized-Process-Models-专业化的软件过程模型\"><a href=\"#Specialized-Process-Models-专业化的软件过程模型\" class=\"headerlink\" title=\"Specialized Process Models 专业化的软件过程模型\"></a>Specialized Process Models 专业化的软件过程模型</h2><ol>\n<li>Component-Based Development （强调reuse）</li>\n<li>Formal methods （形式化方法强调使用数学手段来精确地描述需求）</li>\n<li>Aspect-Oriented Software Development （面向切面，切面指那些横跨多个模块或功能的通用关注点）</li>\n</ol>\n<h2 id=\"The-Unified-Process-统一过程\"><a href=\"#The-Unified-Process-统一过程\" class=\"headerlink\" title=\"The Unified Process 统一过程\"></a>The Unified Process 统一过程</h2><p>统一过程是一种“用例驱动、以架构为中心、迭代和增量”的软件开发过程<br>A &#x3D;&#x3D;“use-case driven, architecture-centric, iterative and incremental”&#x3D;&#x3D; software process closely aligned with the Unified Modeling Language (UML)<br><img data-src=\"/4-6.png\"><br>五个阶段: &#x3D;&#x3D;Inception, Elaboration, Construction, Transition, Production&#x3D;&#x3D;</p>\n<h3 id=\"统一过程（Unified-Process-UP）在各个阶段产生的工作产品（Work-Products）\"><a href=\"#统一过程（Unified-Process-UP）在各个阶段产生的工作产品（Work-Products）\" class=\"headerlink\" title=\"统一过程（Unified Process, UP）在各个阶段产生的工作产品（Work Products）\"></a>统一过程（Unified Process, UP）在各个阶段产生的工作产品（<code>Work Products</code>）</h3><ol>\n<li>Inception Phase（启动阶段）<br>Vision Document（愿景文档）：概述项目的总体目标、范围和预期结果。<br>Initial Use-case Model（初始用例模型）：描述系统的主要功能和用户交互场景。<br>Initial Project Glossary（初始项目术语表）：定义项目中使用的专业术语和缩写。<br>Initial Business Case（初始商业案例）：分析项目的商业价值和可行性。<br>Initial Risk Assessment（初始风险评估）：识别和评估项目可能面临的风险。<br>Project Plan Phases and Iterations（项目计划阶段和迭代）：制定项目的整体计划，包括阶段划分和迭代安排。<br>Business Model（业务模型）：描述项目的业务流程和商业模式。<br>Prototypes（原型）：创建系统的初步原型，用于验证需求和设计。</li>\n<li>Elaboration Phase（细化阶段）<br>Use-case Model（用例模型）：进一步完善和细化用例模型，明确系统功能。<br>Functional and Non-functional Requirements（功能性与非功能性需求）：详细描述系统需要满足的功能性和非功能性要求。<br>Analysis Model（分析模型）：基于需求分析建立的系统逻辑模型。<br>Software Architecture Description（软件架构描述）：定义系统的整体架构和关键组件。<br>Executable Architectural Prototype（可执行架构原型）：实现一个可运行的架构原型，验证架构的可行性和性能。<br>Preliminary Design Model（初步设计模型）：基于架构描述进行初步的设计。<br>Revise Risk List（修订风险列表）：根据新的信息和发现更新风险评估。<br>Project Plan Iteration Plan, Workflow, Milestones（项目计划迭代计划、工作流、里程碑）：细化项目计划，包括具体的迭代安排、工作流程和关键里程碑。<br>Preliminary User Manual（初步用户手册）：编写系统的初步使用说明。</li>\n<li>Construction Phase（构建阶段）<br>Design Model（设计模型）：完成详细的系统设计，包括模块设计和接口设计。<br>Software Components（软件组件）：开发和实现各个软件组件。<br>Integrated Software Increment（集成软件增量）：将各个组件集成在一起，形成可运行的软件增量。<br>Test Plan（测试计划）：制定详细的测试计划，包括测试策略和资源安排。<br>Test Cases（测试用例）：编写具体的测试用例，用于验证系统功能和质量。<br>Support Documentation User Installation Increment（支持文档用户安装增量）：编写用户安装和操作指南，帮助用户正确安装和使用系统。</li>\n<li>Transition Phase（过渡阶段）<br>Delivered Software Increment（交付的软件增量）：向用户交付经过测试和验证的软件增量。<br>Beta Test Reports（Beta测试报告）：收集和整理Beta测试期间的反馈和问题报告。<br>User Feedback（用户反馈）：收集用户的实际使用反馈，为后续改进提供依据。</li>\n<li>Production</li>\n</ol>\n<h3 id=\"个人软件过程（Personal-Software-Process-PSP）\"><a href=\"#个人软件过程（Personal-Software-Process-PSP）\" class=\"headerlink\" title=\"个人软件过程（Personal Software Process, PSP）\"></a>个人软件过程（Personal Software Process, PSP）</h3><p>Five Framework Activities:</p>\n<ol>\n<li>Planning</li>\n<li>High-Level Design</li>\n<li>High-Level Design Review</li>\n<li>Development</li>\n<li>Postmortem（事后分析）<br>Stresses the Need for Error Identification and Understanding</li>\n</ol>\n<h3 id=\"团队软件过程（Team-Software-Process-TSP）\"><a href=\"#团队软件过程（Team-Software-Process-TSP）\" class=\"headerlink\" title=\"团队软件过程（Team Software Process, TSP）\"></a>团队软件过程（Team Software Process, TSP）</h3><ol>\n<li>Each project is “launched” using a “script” that defines the tasks to be accomplished</li>\n<li>Teams are self-directed</li>\n<li>Measurement is encouraged</li>\n<li>Measures are analyzed with the intent of improving the team process</li>\n</ol>\n<h1 id=\"Ch5-Agile-Development-敏捷开发\"><a href=\"#Ch5-Agile-Development-敏捷开发\" class=\"headerlink\" title=\"Ch5 Agile Development 敏捷开发\"></a>Ch5 Agile Development 敏捷开发</h1><p>What is Agility?</p>\n<ul>\n<li>Effective (rapid and adaptive) response to change</li>\n<li>Effective communication among all stakeholders</li>\n<li>Drawing the customer onto the team</li>\n<li>Organizing a team so that it is in control of the work performed</li>\n<li>Rapid, incremental delivery of software<br>An Agile Process</li>\n<li>Is driven by customer descriptions of what is required (scenarios)</li>\n<li>Recognizes that plans are short-lived</li>\n<li>Develops software iteratively with a heavy emphasis on construction activities</li>\n<li>Delivers multiple ‘software increments’</li>\n<li>Adapts as changes occur</li>\n</ul>\n<p>Extreme Programming 极限编程(XP)<br>XP plan:</p>\n<ul>\n<li>begin with user stories</li>\n<li>assigns a cost</li>\n<li>Stories are grouped to for a deliverable increment</li>\n<li>commitment</li>\n<li>project velocity<br><img data-src=\"/5-1.png\"></li>\n</ul>\n<p>Industrial XP (IXP)<br>IXP incorporates six new practices: </p>\n<ul>\n<li>Readiness assessment 准备评估</li>\n<li>Project community 项目社区</li>\n<li>Project chartering 项目章程制定</li>\n<li>Test driven management 测试驱动管理</li>\n<li>Retrospectives 团队自省</li>\n<li>Continuous learning  持续学习</li>\n</ul>\n<p>Scrum 一种流行的敏捷开发框架</p>\n<ul>\n<li>Development work is partitioned into “packets”</li>\n<li>Testing and documentation are on-going (测试和文档贯穿开发流程)</li>\n<li>Work occurs in “sprints” and is derived from a “backlog” (Sprint 是 Scrum 的核心时间单位，通常为 1 到 4 周)</li>\n<li>Meetings are very short 高效沟通</li>\n<li>“demos” are delivered to the customer with the time-box allocated</li>\n</ul>\n<p>Dynamic Systems Development Method  - DSDM</p>\n<p>Agile Modeling (<code>AM</code>) principals:</p>\n<ul>\n<li>Model with a purpose</li>\n<li>Use multiple models </li>\n<li>Travel light </li>\n<li>Content is more important than representation</li>\n<li>Know the models and the tools you use to create them</li>\n<li>Adapt locally</li>\n</ul>\n<p>Agile Unified Process (<code>AUP</code>) 敏捷统一流程：一个精简的软件开发过程<br>Each AUP iteration addresses these activities: </p>\n<ul>\n<li>Modeling</li>\n<li>Implementation</li>\n<li>Testing</li>\n<li>Deployment </li>\n<li>Configuration and project management </li>\n<li>Environment management</li>\n</ul>\n<h1 id=\"Ch6-Human-Aspects-of-Software-Engineering\"><a href=\"#Ch6-Human-Aspects-of-Software-Engineering\" class=\"headerlink\" title=\"Ch6 Human Aspects of Software Engineering\"></a>Ch6 Human Aspects of Software Engineering</h1><p>Traits of Successful Software Engineers: 责任感、对需求敏感、直言不讳、有弹性(Resilient under pressure)、公平意识、注重细节、务实(Pragmatic)<br>The Psychology Of Software Engineering 没看懂不管了<br>Effective Software Team Attributes</p>\n<ul>\n<li>Sense of purpose</li>\n<li>Sense of involvement</li>\n<li>Sense of trust</li>\n<li>Sense of improvement</li>\n<li>Diversity of team member skill sets<br>Avoid Team “Toxicity” 毒性<br>A frenzied work atmosphere, high frustication, Fragmented or poorly coordinated procedures(或者定义不当的模型), Unclear definition of roles, Continuous and repeated exposure to failure</li>\n</ul>\n<p>Factors Affecting Team Structure</p>\n<ul>\n<li>difficulty of the problem</li>\n<li>size of the resultant program(s)</li>\n<li>the time that the team will stay together</li>\n<li>the degree to which the problem can be modularized</li>\n<li>the required quality and reliability of the system</li>\n<li>the rigidity of the delivery date 交付日期是不是很死</li>\n<li>the degree of sociability required</li>\n</ul>\n<p>Organizational Paradigms 组织范式</p>\n<ul>\n<li>Closed paradigm</li>\n<li>Random paradigm</li>\n<li>Open paradigm</li>\n<li>Synchronous paradigm<table>\n<thead>\n<tr>\n<th>范式</th>\n<th>组织方式</th>\n<th>控制程度</th>\n<th>创新程度</th>\n<th>沟通频率</th>\n<th>适用项目类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Closed</strong></td>\n<td>层级权威</td>\n<td>高</td>\n<td>低</td>\n<td>自上而下</td>\n<td>传统行业、安全关键系统</td>\n</tr>\n<tr>\n<td><strong>Random</strong></td>\n<td>松散自由</td>\n<td>低</td>\n<td>高</td>\n<td>无固定模式</td>\n<td>初创项目、探索性任务</td>\n</tr>\n<tr>\n<td><strong>Open</strong></td>\n<td>半结构化</td>\n<td>中等</td>\n<td>高</td>\n<td>高频协作</td>\n<td>敏捷开发、创新型项目</td>\n</tr>\n<tr>\n<td><strong>Synchronous</strong></td>\n<td>模块化分工</td>\n<td>高</td>\n<td>中等</td>\n<td>极少</td>\n<td>分布式系统、大型项目</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<p>Generic Agile Teams（通用敏捷团队）</p>\n<ul>\n<li>individual competency coupled with group collaboration</li>\n<li>People trump process and politics can trump people</li>\n<li>self-organizing and have many structures</li>\n<li>Planning is kept to a minimum 不反对规划，但强调“轻量级规划”比如Sprint</li>\n</ul>\n<p>XP Team Values</p>\n<ul>\n<li>Communication</li>\n<li>Simplicity: design for immediate needs nor future needs</li>\n<li>Feedback</li>\n<li>Courage</li>\n<li>Respect</li>\n</ul>\n<p>Impact of Social Media </p>\n<p>Software Engineering using the Cloud</p>\n<p>协作工具：Services of collaborative development environments(CDEs)<br>Namespace, Calendar, Template, Metrics support, Communication analysis, Artifact clustering归类</p>\n<p>Team Decisions Making Complications<br><img data-src=\"/6-1.jpg\"></p>\n<h1 id=\"Ch7-Principles-that-Guide-Practice\"><a href=\"#Ch7-Principles-that-Guide-Practice\" class=\"headerlink\" title=\"Ch7 Principles that Guide Practice\"></a>Ch7 Principles that Guide Practice</h1><p>Principles that Guide Process:</p>\n<ol>\n<li>Be agile</li>\n<li>Focus on quality at every step</li>\n<li>Be ready to adapt</li>\n<li>Build an effective team</li>\n<li>Establish mechanisms for communication and coordination</li>\n<li>Manage change</li>\n<li>Assess risk</li>\n<li>Create work products that provide value for others</li>\n</ol>\n<p>Principles that Guide Practice:</p>\n<ol>\n<li>Divide and conquer</li>\n<li>Understand the use of abstraction</li>\n<li>Strive for consistency</li>\n<li>Focus on the transfer of information 注意接口的设计</li>\n<li>Build software that exhibits effective modularity</li>\n<li>Look for patterns</li>\n<li>When possible, represent the problem and its solution from a number of different perspectives</li>\n<li>Remember that someone will maintain the software</li>\n</ol>\n<p>Communication Principle： </p>\n<ol>\n<li>Listen</li>\n<li>Prepare before you communicate</li>\n<li>Someone should facilitate the activity</li>\n<li>Face-to-face communication is best</li>\n<li>Take notes and document decisions</li>\n<li>Strive for collaboration</li>\n<li>Stay focused, modularize your discussion</li>\n<li>If something is unclear, draw a picture</li>\n<li>不管怎样, Move on</li>\n<li>Nigotiation(谈判) works best when both parties win</li>\n</ol>\n<p>Planning Principles：<br>懒得写了考了我吃</p>\n<p>Modeling Principles： 创建两类模型</p>\n<ol>\n<li>Requirements models (also called analysis models) 需求模型</li>\n<li>Design models 设计模型</li>\n</ol>\n<p>Agile Modeling Principles 记不住，懒得写了再说</p>\n<p>Requirements Modeling Principles</p>\n<ol>\n<li>The information domain of a problem must be represented and understood  对问题领域内信息的全面了解是构建有效软件的基础</li>\n<li>The functions that the software performs must be defined  定义软件的功能，明确描述软件应提供的功能和服务</li>\n<li>The behavior of the software (as a consequence of external events) must be represented  定义软件的行为，如何响应外界事件或输入</li>\n<li>The models that depict information, function, and behavior must be partitioned in a manner that uncovers detail in a layered (or hierarchical) fashion  使用结构化的、分层次的方法来组织模型</li>\n<li>The analysis task should move from essential information toward implementation detail  先关注核心需求和架构设计，再细化到具体的实现方案</li>\n</ol>\n<p>Design Modeling Principles<br>太多了懒得看</p>\n<p>Living Modeling Principles<br>懒得看</p>\n<p>Construction Principles</p>\n<ul>\n<li>The construction activity encompasses a set of coding and testing tasks</li>\n<li><code>Coding principles and concepts</code> are closely aligned programming style, programming languages, and programming methods</li>\n<li><code>Testing principles and concepts</code> lead to the design of tests that systematically uncover different classes of errors and to do so with a minimum amount of time and effort</li>\n</ul>\n<p>…..一堆principle，看了也记不住，不看了</p>\n<h1 id=\"Ch8-Understanding-Requirements\"><a href=\"#Ch8-Understanding-Requirements\" class=\"headerlink\" title=\"Ch8 Understanding Requirements\"></a>Ch8 Understanding Requirements</h1><p>Requirements Engineering:</p>\n<ol>\n<li>Inception </li>\n<li>Elicitation</li>\n<li>Elaboration</li>\n<li>Negotiation</li>\n<li>Specification</li>\n<li>Validation</li>\n<li>Requirements management</li>\n</ol>\n<p>Negotiating Requirements:</p>\n<ol>\n<li>Identify the key stakeholders</li>\n<li>Determine each of the stakeholders “win conditions”</li>\n<li>Negotiate</li>\n</ol>\n<p>Requirements Monitoring:</p>\n<ol>\n<li>Distributed debugging</li>\n<li>Run-time verification</li>\n<li>Run-time validation</li>\n<li>Business activity monitoring</li>\n<li>Evolution and co-design</li>\n</ol>\n<p>Validating Requirements:<br>consistent, 是否在level of abstraction规定了, 是否essential, unambiguous, 每个要求注明来源, requirements 之间是否 conflict, achievable, testable, properly reflect the information, function and behavior, partitioned方式, …</p>\n<h1 id=\"Ch9-Requirements-Modeling：Scenario-Based-Methods-基于场景的需求建模方法\"><a href=\"#Ch9-Requirements-Modeling：Scenario-Based-Methods-基于场景的需求建模方法\" class=\"headerlink\" title=\"Ch9 Requirements Modeling：Scenario-Based Methods 基于场景的需求建模方法\"></a>Ch9 Requirements Modeling：Scenario-Based Methods 基于场景的需求建模方法</h1><p>需求分析的目标：</p>\n<ul>\n<li>描述客户所需的内容 Describe what the customer requires</li>\n<li>为软件设计提供基础 Establish a basis for the creation of a software design</li>\n<li>定义一组可以验证的需求 Define a set of requirements that can be validated<br>Rules of Thumb（基本原则）：</li>\n<li>The model should focus on requirements that are visible within the problem or business domain. The level of abstraction should be relatively high.</li>\n<li>Each element of the analysis model should add to an overall understanding of software requirements and provide insight into the information domain, function and behavior of the system.</li>\n<li>Delay consideration of infrastructure and other non-functional models until design.</li>\n<li>Minimize coupling throughout the system.</li>\n<li>Be certain that the analysis model provides value to all stakeholders.</li>\n<li>Keep the model as simple as it can be.</li>\n</ul>\n<p>Domain Analysis（领域分析）：<br>Software domain analysis is the identification, analysis, and specification of common requirements from a specific application domain, typically for reuse on multiple projects within that application domain…</p>\n<p>Use-Case Diagram, Activity Diagrams, Swim Lane Diagrams</p>\n<h1 id=\"Ch10-Requirements-Modeling-Class-Based-Methods\"><a href=\"#Ch10-Requirements-Modeling-Class-Based-Methods\" class=\"headerlink\" title=\"Ch10 Requirements Modeling: Class-Based Methods\"></a>Ch10 Requirements Modeling: Class-Based Methods</h1><p>Class-Based需求建模的方法：structured analysis, object- oriented analysis<br>Class-Based Modeling: objects, operations, relationships, collaborations<br>类图<br>CRC Cards<br>见画图题</p>\n<h1 id=\"Ch11-Requirements-Modeling-Behavior-Patterns-and-Web-Mobile-Apps\"><a href=\"#Ch11-Requirements-Modeling-Behavior-Patterns-and-Web-Mobile-Apps\" class=\"headerlink\" title=\"Ch11 Requirements Modeling: Behavior, Patterns, and Web&#x2F;Mobile Apps\"></a>Ch11 Requirements Modeling: Behavior, Patterns, and Web&#x2F;Mobile Apps</h1><p>行为建模: use-cases, events, sequences, state diagram, 审查<br>行为建模三种图：state diagram, sequence diagram, data-flow diagram</p>\n<h2 id=\"Requirements-Modeling-for-WebApps\"><a href=\"#Requirements-Modeling-for-WebApps\" class=\"headerlink\" title=\"Requirements Modeling for WebApps:\"></a>Requirements Modeling for WebApps:</h2><ul>\n<li>内容分析 Content Analysis：描述文本、图形和图像、视频、音频等。</li>\n<li>交互分析 Interaction Analysis：使用案例。</li>\n<li>功能分析 Functional Analysis：定义应用于WebApp内容的操作，暗示其他处理功能。</li>\n<li>配置分析 Configuration Analysis：环境和基础设施。</li>\n<li>导航分析 Navigation Analysis：关注总体要求。</li>\n</ul>\n<p>配置模型 Configuration Model</p>\n<ul>\n<li>服务器端 Server-side：必须指定服务器硬件和操作系统环境、考虑服务器端互操作性、指定适当的接口、通信协议及相关协作信息。</li>\n<li>客户端 Client-side：必须识别浏览器配置问题、定义测试要求。</li>\n</ul>\n<p>导航建模 Navigation Modeling</p>\n<ul>\n<li>考虑哪些元素应更容易到达（需要更少的导航步骤），优先级如何？</li>\n<li>如何处理导航错误？</li>\n<li>是否应该通过链接、基于搜索的访问或其他方式完成导航？</li>\n<li>是否应根据之前导航动作的上下文向用户展示某些元素？</li>\n<li>是否应维护用户的导航日志？</li>\n</ul>\n<h1 id=\"Ch12-Design-Concepts\"><a href=\"#Ch12-Design-Concepts\" class=\"headerlink\" title=\"Ch12 Design Concepts\"></a>Ch12 Design Concepts</h1><p>好的软件设计应该具备：坚固性 Firmness, 实用性 Commodity, 愉悦感 Delight<br>Software Engineering Design：设计原则与质量</p>\n<ul>\n<li>Data&#x2F;Class design</li>\n<li>Architectural design</li>\n<li>Interface design</li>\n<li>Component-level design</li>\n</ul>\n<p>Analysis Model -&gt; Design Model（需求模型到设计模型）</p>\n<ul>\n<li>设计必须实施分析模型中包含的所有显式需求(explicit requirements)，并适应客户希望的所有隐式需求。</li>\n<li>设计应当是可读且易于理解(readable, understandable guide)的指南，帮助编写代码的人以及测试和支持软件的人。</li>\n<li>设计应该提供软件的完整画面(a complete picture)，从实现的角度解决数据、功能和行为领域的问题<br><img data-src=\"/12-1.jpg\"></li>\n</ul>\n<p>质量指南 Quality Guidelines</p>\n<ul>\n<li>设计应展示一种使用公认的架构风格创建的架构。</li>\n<li>设计应由展现良好设计特性的组件组成。</li>\n<li>设计可以逐步实现。</li>\n<li>设计应模块化，即将软件逻辑划分为元素或子系统。</li>\n<li>设计应包含数据、架构、接口和组件的不同表示形式</li>\n</ul>\n<p>设计原则 Design Principles</p>\n<ul>\n<li>设计过程不应有“隧道视野”，即应全面考虑各种因素。</li>\n<li>设计应可追溯到分析模型。</li>\n<li>设计不应重新发明轮子（即不应重复已有的解决方案）。</li>\n<li>设计应“最小化软件与现实世界中存在的问题之间的智力距离”。</li>\n<li>设计应统一且整合。</li>\n<li>设计应能够适应变化。</li>\n<li>设计应以温和的方式降级，即使遇到异常数据、事件或操作条件。</li>\n</ul>\n<p>OO Design Concepts: Design classes(Entity classes, Boundary classes, Controller classes), Inheritance, Messages, Polymorphism<br>:::warning<br>后面看不下去先不管了<br>:::</p>\n<h1 id=\"Ch13-Architectural-Design\"><a href=\"#Ch13-Architectural-Design\" class=\"headerlink\" title=\"Ch13 Architectural Design\"></a>Ch13 Architectural Design</h1><p>架构风格：</p>\n<ul>\n<li>Data-centered architectures</li>\n<li>Data flow architectures </li>\n<li>Call and return architectures</li>\n<li>Object-oriented architectures</li>\n<li>Layered architectures</li>\n</ul>\n<h1 id=\"Ch14-Component-Level-Design\"><a href=\"#Ch14-Component-Level-Design\" class=\"headerlink\" title=\"Ch14 Component-Level Design\"></a>Ch14 Component-Level Design</h1><p>Component: a modular, deployable, and replaceable part of a system<br>OO角度：一个组件包含一组协作类<br>传统角度：数据结构和接口<br>Basic Design Principles：OCP, LSP, DIP, ISP, REP, CCP, CRP</p>\n<ul>\n<li>Open-Closed Principle: 开放扩展，关闭修改</li>\n<li>Liskov Substitution Principle: 子类可被父类替换</li>\n<li>Dependency Inversion Principles: 依赖抽象，不要依赖具体实现</li>\n<li>Interface Segregation Principle: 多个特定于客户端的接口比一个通用接口更好</li>\n<li>Release Reuse Equivalency Principle: 发布的粒度是重用的粒度</li>\n<li>Common Closure Principle: 一起变化的类应该放在一起</li>\n<li>Common Reuse Principle: 不一起重用的类不应放在一起</li>\n</ul>\n<p>基本设计原则（Basic Design Principles）:</p>\n<ol>\n<li>命名约定 Components </li>\n<li>接口 Interfaces</li>\n<li>依赖关系和继承：建议从左到右建模依赖关系，从底向上（派生类）到底部（基类）建模继承关系</li>\n</ol>\n<p>设计指南（Design Guidelines）:<br>单一职责原则 Cohension<br>耦合度级别：内容耦合、公共耦合、控制耦合等 Coupling</p>\n<p>WebApps 组件设计：通常包含content design and functional design<br>……</p>\n<h1 id=\"Ch15-User-Interface-Design\"><a href=\"#Ch15-User-Interface-Design\" class=\"headerlink\" title=\"Ch15 User Interface Design\"></a>Ch15 User Interface Design</h1><p>Golden Rule：</p>\n<ol>\n<li>Place the user in control</li>\n<li>Reduce the user’s memory load</li>\n<li>Make the interface consistent<br>User Interface Design Model:<table>\n<thead>\n<tr>\n<th>模型名称</th>\n<th>中文解释</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>User Model</td>\n<td>用户模型</td>\n<td>描述用户是谁、他们的需求和行为</td>\n</tr>\n<tr>\n<td>Design Model</td>\n<td>设计模型</td>\n<td>将用户模型转化为界面设计方案</td>\n</tr>\n<tr>\n<td>Mental Model</td>\n<td>心理模型</td>\n<td>用户对界面的主观理解和预期</td>\n</tr>\n<tr>\n<td>Implementation Model</td>\n<td>实现模型</td>\n<td>开发者实际构建的界面及其交互逻辑</td>\n</tr>\n<tr>\n<td>User Interface Design Process: 螺旋模型</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<p>Interface Analysis<br>Interface Analysis旨在理解以下几点：people(user), task, content, environment</p>\n<h1 id=\"Ch16-Pattern-Based-Design\"><a href=\"#Ch16-Pattern-Based-Design\" class=\"headerlink\" title=\"Ch16 Pattern-Based Design\"></a>Ch16 Pattern-Based Design</h1><p>A design pattern is a three-part rule which expresses a relation between a certain &#x3D;&#x3D;context&#x3D;&#x3D;, a &#x3D;&#x3D;problem&#x3D;&#x3D;, and a &#x3D;&#x3D;solution&#x3D;&#x3D;.</p>\n<p>Describing a Pattern: By detailing various dimensions such as pattern name, problem, motivation, context, forces, solution, intent, collaborations, consequences, implementation, known uses, related patterns, etc. </p>\n",
            "tags": [
                "软件工程"
            ]
        }
    ]
}