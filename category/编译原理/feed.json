{
    "version": "https://jsonfeed.org/version/1",
    "title": "NoResponse's Blog • All posts by \"编译原理\" category",
    "description": "成分复杂的CSer from ZJU",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/06/17/computer-science/compile-principles/ch9/",
            "url": "http://example.com/2025/06/17/computer-science/compile-principles/ch9/",
            "title": "Ch9",
            "date_published": "2025-06-16T16:00:00.000Z",
            "content_html": "<h1 id=\"指令选择\"><a href=\"#指令选择\" class=\"headerlink\" title=\"指令选择\"></a>指令选择</h1><p>找出实现一个给定的IR Tree的恰当机器指令序列。Mapping IR into abstract assembly code</p>\n<ul>\n<li>Abstract assembly &#x3D; assembly with infinite registers<ul>\n<li>Invent new temporaries for intermediate results</li>\n<li>Map to actual registers later<br>本质上是patten matching</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "指令选择"
            ]
        },
        {
            "id": "http://example.com/2025/06/17/computer-science/compile-principles/ch8/",
            "url": "http://example.com/2025/06/17/computer-science/compile-principles/ch8/",
            "title": "Ch8",
            "date_published": "2025-06-16T16:00:00.000Z",
            "content_html": "<h1 id=\"Basic-Blocks-and-Traces\"><a href=\"#Basic-Blocks-and-Traces\" class=\"headerlink\" title=\"Basic Blocks and Traces\"></a>Basic Blocks and Traces</h1><h2 id=\"Canonical-Form\"><a href=\"#Canonical-Form\" class=\"headerlink\" title=\"Canonical Form\"></a>Canonical Form</h2><p>IR存在一些与机器语言不能完全对应的情况，和与编译优化分析相冲突的情况。</p>\n<ul>\n<li>CJUMP能够转移到t或者f，但是真正的机器语言在条件为假的时候直接下降至下一条指令（条件为真才跳转）</li>\n<li>在表达式中使用ESEQ不太方便，会使子树不同的计算顺序产生不同的计算结果</li>\n<li>CALL调用CALL作为参数的时候会有寄存器冲突、语句副作用（修改全局变量、改变堆内存, etc.）等问题</li>\n</ul>\n<p>三种方法：</p>\n<ol>\n<li>Linearize: Transform trees into a list of canonical<br>trees without SEQ or ESEQ nodes</li>\n<li>Basic blocks: Group statements into sequences with<br>no internal jumps&#x2F;labels</li>\n<li>Trace schedule: Order basic blocks so every CJUMP is followed by its false label</li>\n</ol>\n<h3 id=\"线性化\"><a href=\"#线性化\" class=\"headerlink\" title=\"线性化\"></a>线性化</h3><p>&#x3D;&#x3D;规范树（Canonical Tree）定义：&#x3D;&#x3D;</p>\n<ol>\n<li>无SEQ或ESEQ</li>\n<li>每一个CALL的父亲不是EXP(…)就是MOVE(TEMP t, …)</li>\n</ol>\n<h4 id=\"消除ESEQ\"><a href=\"#消除ESEQ\" class=\"headerlink\" title=\"消除ESEQ\"></a>消除ESEQ</h4><h5 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h5><p>合并副作用，提升ESEQ：</p>\n<ul>\n<li>ESEQ(s1, ESEQ(s2,e)) &#x3D;&gt; ESEQ(SEQ(s1,s2),e)</li>\n<li>BINOP(op, ESEQ(s, e1), e2) ⇒ ESEQ(s, BINOP(op, e1, e2))</li>\n<li>MEM(ESEQ(s, e1)) ⇒ ESEQ(s, MEM(e1))</li>\n<li>JUMP(ESEQ(s, e1)) ⇒ SEQ(s, JUMP(e1))</li>\n<li>CJUMP(op, ESEQ(s, e1), e2, l1, l2) ⇒ SEQ(s, CJUMP(op, e1, e2, l1, l2))</li>\n</ul>\n<h5 id=\"Commutativity（重点）\"><a href=\"#Commutativity（重点）\" class=\"headerlink\" title=\"Commutativity（重点）\"></a>Commutativity（重点）</h5><p>当<code>ESEQ</code>出现在<code>BINOP</code>的右操作数，即$BINOP(op, e1, ESEQ(s, e2))$时，我们不能再像之前那样简单地把<code>s</code>提升到整个<code>BINOP</code>之前，因为<code>e1</code>的求值在<code>e2</code>之前，否则可能影响<code>e1</code>的计算结果</p>\n<p>Commutativity：交换性</p>\n<ul>\n<li>Commuting: s不影响e1的结果<ul>\n<li>rule: $BINOP(op, e1, ESEQ(s, e2)) &#x3D; ESEQ(s, BINOP(op, e1, e2))$</li>\n</ul>\n</li>\n<li>Non-commuting: s会影响e1的结果，把e1的结果显算出来放到临时变量t里，再提升s<ul>\n<li>rule: $BINOP(op, ESEQ(s, e1), e2) &#x3D; ESEQ(MOVE(TEMP t, e1), ESEQ(s, BINOP(op, TEMP t, e2)))$</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"将CALL移到顶层\"><a href=\"#将CALL移到顶层\" class=\"headerlink\" title=\"将CALL移到顶层\"></a>将CALL移到顶层</h4><p>方法：立即将每一个返回值赋给一个新的临时寄存器<br>$$<br>CALL(fun, args) ⇒ ESEQ(MOVE(TEMP t, CALL(fun, args)), TEMP t)<br>$$</p>\n<h4 id=\"消除SEQ\"><a href=\"#消除SEQ\" class=\"headerlink\" title=\"消除SEQ\"></a>消除SEQ</h4><p>$$<br>SEQ(SEQ(a, b), c) &#x3D; SEQ(a, SEQ(b, c))<br>$$<br>把SEQ变成一个线性语句表：$SEQ(s_1, SEQ(s_2, …, SEQ(s_{n-1}, s_n) …))$<br>就可以认为是由语句组成的简单列表$s_1, s_2, …, s_n$</p>\n<h3 id=\"处理CJUMP\"><a href=\"#处理CJUMP\" class=\"headerlink\" title=\"处理CJUMP\"></a>处理CJUMP</h3><p>重排CJUMP，使得每个$CJUMP(op, e_1, e_2, l_t, l_f)后面都紧跟着$LABEL(l_f)$<br>分两步：1. 取一列canonical tree由它们形成basic block 2. 对basic block进行排序形成trace</p>\n<h4 id=\"Basic-Block\"><a href=\"#Basic-Block\" class=\"headerlink\" title=\"Basic Block\"></a>Basic Block</h4><p>一个基本块是一段连续的指令序列，即:</p>\n<ul>\n<li>第一个语句是一个<code>LABEL</code></li>\n<li>最后一个语句是<code>JUMP</code>或<code>CJUMP</code></li>\n<li>没有其他的<code>LABEL</code>, <code>JUMP</code>或<code>CJUMP</code><br>划分方法：</li>\n</ul>\n<ol>\n<li>每一个<code>LABEL</code>都对应一个基本块的开始</li>\n<li>每一个<code>JUMP</code>或<code>CJUMP</code>都对应一个基本块的结束</li>\n<li>如果遇到<code>LABEL1</code> -&gt; <code>LABEL2</code>,就在<code>LABEL2</code>前面加一个<code>JUMP</code>到<code>LABEL2</code></li>\n<li>如果遇到开头没有<code>LABEL</code>的，则加一个<code>LABEL</code>（比如程序的开头）</li>\n<li>出口处理：添加一个LABEL <code>done</code>表示出口处理的开始，并把$JUMP done$放最后一个block末尾</li>\n</ol>\n<h4 id=\"Trace\"><a href=\"#Trace\" class=\"headerlink\" title=\"Trace\"></a>Trace</h4><p>现在我们可以按任意顺序来安排这些基本块，并且程序执行的结果仍是相同的——因为无论怎么排序，每个基本块的末尾都能转移到一个正确的位置。我们可以利用这一点来选择适当的基本块排列顺序，以满足每个<code>CJUMP</code>之后都跟随它的false标号这一条件。<br>与此同时，我们也可以安排基本块使得无条件转移<code>JUMP</code>之后直接跟随的是它们的目标标号。这样便可以删除这些无条件转移，从而使编译生成的程序的执行速度更快。</p>\n<p>把basic block排成trace的方法也很简单：&#x3D;&#x3D;从每个基本块开始，追踪JUMP链，标记遇到的每一个未标记的基本快并添加到当前trace中，最终到达一个其后继都标记过的块，就是结束块。之后再选则一个未标记的基本块开始，重复上述过程。&#x3D;&#x3D;</p>\n<p>因为轨迹调度不可能覆盖所有情况，所以：</p>\n<ol>\n<li>如果CJUMP 后跟 true label: 条件取反，交换 true&#x2F;false，改成：<br>$$<br>CJUMP(!cond, lf, lt)<br>$$</li>\n<li>CJUMP 后跟的不是 true 也不是 false: 创建中间 label，插入 JUMP<br>$$<br>CJUMP(cond, lt, lf) &#x3D;&gt; CJUMP(cond, lt, l’f) LABEL l’f   JUMP NAME(lf)<br>$$</li>\n</ol>\n<h4 id=\"最优轨迹-Optimal-Trace\"><a href=\"#最优轨迹-Optimal-Trace\" class=\"headerlink\" title=\"最优轨迹(Optimal Trace)\"></a>最优轨迹(Optimal Trace)</h4><p>对于basic block可能有不同的trace划分方法</p>\n<ul>\n<li>Hot Path Prioritization（优先热路径）: 优先将**运行频率高的基本块（hot blocks）**合并在同一条轨迹（trace）里，减少跳转，提高局部性。<br>+++info example<br>假设 if-else 中 if 分支占 90% 执行概率，else 只有 10%：</li>\n</ul>\n<figure class=\"highlight c\"><figcaption><span>tiger</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span> then</span><br><span class=\"line\">    a := a + <span class=\"number\">1</span>   -- 热路径</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    a := a - <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>生成时应把 x &gt; 0 为真的路径（包括 CJUMP 的 false 分支）安排成 fall-through，避免跳转开销出现在热路径上。<br>+++</p>\n<ul>\n<li>Locality Enhancement（增强局部性）: 把逻辑上相关联的代码块放得更近一些，让它们在内存中“邻近”。<ul>\n<li>原因：<ul>\n<li>更好地利用 CPU cache、预取机制。</li>\n<li>避免指令 cache miss 导致性能下降。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>比如：将循环体和循环条件代码块排在一起（而不是让条件跳到远处），从而保持指令流顺序性。</p>\n<ul>\n<li>Jump Minimization（最小化跳转）: 尽量减少无条件跳转（JUMP）和不必要的条件跳转（CJUMP），尤其在常走路径上，\t减少分支预测失败。</li>\n</ul>\n<p><img data-src=\"/f1.jpg\"><br>哪个划分比较好？<br>根据3，c比a好；</p>\n",
            "tags": [
                "Basic Blocks and Traces"
            ]
        },
        {
            "id": "http://example.com/2025/06/15/computer-science/compile-principles/ch6/",
            "url": "http://example.com/2025/06/15/computer-science/compile-principles/ch6/",
            "title": "Ch6",
            "date_published": "2025-06-14T16:00:00.000Z",
            "content_html": "<h1 id=\"Activation-Record-Stack-Frame\"><a href=\"#Activation-Record-Stack-Frame\" class=\"headerlink\" title=\"Activation Record&#x2F;Stack Frame\"></a>Activation Record&#x2F;Stack Frame</h1><p>函数的栈帧是栈上用来放函数的局部变量、参数、返回地址以及其他临时变量的区域<br>stack一般从高地址向低地址，heap从低地址向高地址<br>layout:<br><img data-src=\"/f1.jpg\"></p>\n<ul>\n<li>incoming arguments: 存储caller传递给callee的参数</li>\n<li>frame pointer: 帧指针，用来访问incoming arguments，从低向高是argument 1, argument 2, …</li>\n<li>local variables: 存储函数的局部变量（还有一些保存在寄存器里）</li>\n<li>return address: 存储需要返回caller的哪里；non-leaf过程会把return address写入栈帧里面</li>\n<li>temporaries: 存储临时变量，复杂表达式拆出来的中间变量放的地方</li>\n<li>saved registers</li>\n<li>outgoing arguments: 存储当前函数要传递给别的函数的参数</li>\n<li>stack pointer: 栈指针，从低向高</li>\n</ul>\n<h2 id=\"函数调用流程：\"><a href=\"#函数调用流程：\" class=\"headerlink\" title=\"函数调用流程：\"></a>函数调用流程：</h2><ul>\n<li>g调用f的时候</li>\n</ul>\n<ol>\n<li>进入f的时候，保存旧的FP(g的FP)</li>\n<li>把FP设置为原来的SP，把SP &#x3D; SP - frame size<br><img data-src=\"/f2.jpg\"></li>\n</ol>\n<ul>\n<li>f返回的时候</li>\n</ul>\n<ol>\n<li>让SP &#x3D; FP(恢复g的SP)</li>\n<li>从内存中读出g的FP恢复回去</li>\n</ol>\n<p>如果栈帧大小固定就只需要FP不需要SP了，因为FP &#x3D; SP + frame size</p>\n<h2 id=\"saved-register\"><a href=\"#saved-register\" class=\"headerlink\" title=\"saved register\"></a>saved register</h2><p>函数g调用f的时候，用到了寄存器r，调用f的时候要把r保存在saved register中，等调用结束再恢复回去</p>\n<ul>\n<li>caller-saved register: 函数调用的时候用到的寄存器，调用结束后可以恢复</li>\n<li>callee-saved register: 函数调用的时候用不到的寄存器，调用结束后不能恢复<br>&#x3D;&#x3D;FP是由callee保存和恢复的&#x3D;&#x3D;</li>\n</ul>\n<h2 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h2><p>一般约定把前k(4 or 6)个参数放在寄存器传递，剩下的参数放在栈中传递<br>四种传参方法：</p>\n<ol>\n<li>不给叶过程 (leaf procedure) 分配栈帧<br>叶过程是指不调用其他过程的过程。在这种情况下，可以不为叶过程分配栈帧</li>\n<li>过程间寄存器分配 (interprocedural register allocation)<br>这种方法需要先分析代码中全部的函数，然后再根据分析结果来分配寄存器。<br>假设有一个程序包含多个函数，通过全局分析发现某些变量在多个函数之间频繁使用，可以为其分配固定的寄存器，避免频繁的内存读写</li>\n<li>若变量 x 不再被使用，可以直接写其寄存器，不需要再保存 x 到栈帧中<br>当一个变量在当前作用域内不再被使用时，可以直接将其值写入寄存器，而无需保存到栈帧中</li>\n</ol>\n<figure class=\"highlight c\"><figcaption><span>example</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">exampleFunction</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> y = x * <span class=\"number\">2</span>;  <span class=\"comment\">// 使用x后，x不再被使用</span></span><br><span class=\"line\">    <span class=\"comment\">// 直接将y的值写入寄存器，无需保存x到栈帧中</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Result: %d\\n&quot;</span>, y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>寄存器窗口技术 (register windows)<br>在每次函数调用时，系统会自动切换到一组新的寄存器，称为寄存器窗口。这样，每个函数都可以独立地使用自己的寄存器，而不会影响其他函数的寄存器状态。</li>\n</ol>\n<figure class=\"highlight c\"><figcaption><span>example</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">functionA</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用寄存器窗口A</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">functionB</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用寄存器窗口B</span></span><br><span class=\"line\">    functionA();  <span class=\"comment\">// 调用functionA时，自动切换到寄存器窗口A</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Frame-Resident-Variables\"><a href=\"#Frame-Resident-Variables\" class=\"headerlink\" title=\"Frame-Resident Variables\"></a>Frame-Resident Variables</h2><p>什么情况下要把变量写入栈帧里面？、</p>\n<ol>\n<li>the varibles will be passed by reference 变量传地址&#x2F;引用</li>\n<li>变量被嵌套在函数内部的函数访问（不绝对）</li>\n<li>变量太大了没法直接放寄存器</li>\n<li>变量是一个数组</li>\n<li>传递参数</li>\n<li>有太多局部变量和临时变量放不下了</li>\n</ol>\n<ul>\n<li>escape 逃逸：如果一个变量需要传地址&#x2F;取地址&#x2F;被过程内部嵌套的函数访问，那么这个变量就会逃逸。</li>\n</ul>\n<h2 id=\"static-links\"><a href=\"#static-links\" class=\"headerlink\" title=\"static links\"></a>static links</h2><p>在嵌套的函数声明中，内层函数是有可能用到外层函数的局部变量的。</p>\n<ul>\n<li>static links是指向上一层嵌套层级的栈帧的指针。内层嵌套函数调用外层定义的变量的时候需要用到static links，否则无法寻址。<br><img data-src=\"/f3.jpg\"><br><img data-src=\"/f4.jpg\"><br>只有调用自身的时候才传递自己的static link作为static link，其他的都是把外层函数的fp作为static link<br>如果要访问外层变量，就顺着static一层一层查上去直到找到了为止。<br>其他访问方法：</li>\n<li>嵌套层次显示表(display)<br>建立一个全局数组，位置i包含一个指针，指向最近一次进入的，其静态嵌套深度是i的过程的栈帧<br><img data-src=\"/f5.jpg\"><br>先给它们标上嵌套深度<br>直接把链表变成数组了，需要用到一个变量，就查看当前变量的嵌套深度i然后直接找那个数组i位置的座位fp地址来找</li>\n<li>lambda lifting<br>g调用f时，g中每一个实际（或被嵌套在f内的任意函数）访问了的变量，都将作为额外的参数传递给f<br>把内部的函数，从内往外进行改写，改写函数的参数实现lambda lifting<br><img data-src=\"/f6.jpg\"></li>\n</ul>\n<h2 id=\"tiger编译器的栈帧\"><a href=\"#tiger编译器的栈帧\" class=\"headerlink\" title=\"tiger编译器的栈帧\"></a>tiger编译器的栈帧</h2><p>tiger不支持高阶函数<br>看不完了。。再说吧</p>\n",
            "tags": [
                "活动记录"
            ]
        },
        {
            "id": "http://example.com/2025/06/15/computer-science/compile-principles/ch7/",
            "url": "http://example.com/2025/06/15/computer-science/compile-principles/ch7/",
            "title": "Ch7",
            "date_published": "2025-06-14T16:00:00.000Z",
            "content_html": "<h1 id=\"IR\"><a href=\"#IR\" class=\"headerlink\" title=\"IR\"></a>IR</h1><p>Intermediate Representation<br>解决高级语言和目标机器汇编语言之间的转化<br>为什么需要IR:</p>\n<ul>\n<li>更模块化、可迁移</li>\n<li>分层分析和优化<br>IR可以有好多层：IR1-&gt;IR2-&gt;…-&gt;IRn<br>+++info 编译流程划分<br>前端：源代码-&gt;词法分析-&gt;语法分析-&gt;语义分析（IR之前的都是）<br>中端：基于IR的分析与变换（可能生成新IR，可以做一些机器无关优化比如循环展开等）<br>后端：指令选择-&gt;寄存器分配-&gt;指令调度-&gt;机器码（IR之后的）<br>+++</li>\n</ul>\n<h2 id=\"Three-Address-Code\"><a href=\"#Three-Address-Code\" class=\"headerlink\" title=\"Three-Address Code\"></a>Three-Address Code</h2><p>最多有三个操作数<br>x &#x3D; y op z<br>“地址”可以具有如下形式</p>\n<ul>\n<li>源程序中的名字(name)</li>\n<li>常量 (constant)</li>\n<li>临时变量(temporary)<br><img data-src=\"/f1.jpg\"><br>最常见的实现方法是将三地址代码作为四元组实现<br>+++info example<br>t1&#x3D;x&gt;0                  (gt, x, 0, t1)<br>if_false t1 goto L1     (if_f, t1, L1, _)<br>fact&#x3D;1                  (asn, 1, fact, _)<br>label L2                (lab, L2, _, _)<br>+++</li>\n</ul>\n<h2 id=\"IR-Tree\"><a href=\"#IR-Tree\" class=\"headerlink\" title=\"IR Tree\"></a>IR Tree</h2><p>两大类节点：</p>\n<ol>\n<li>表达式Exp</li>\n<li>语句Stmt<br>文法：<br><img data-src=\"/f2.jpg\"><br>表达式：<table>\n<thead>\n<tr>\n<th>Node</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CONST(i)</td>\n<td>整数常量i</td>\n<td>CONST(42) → the value 42</td>\n</tr>\n<tr>\n<td>NAME(n)</td>\n<td>符号常量n，通常是一个label，值是label的地址</td>\n<td>NAME(L1) → address of label L1</td>\n</tr>\n<tr>\n<td>TEMP(t)</td>\n<td>临时变量t (like register)</td>\n<td>TEMP(t123) → contents of temporary t123</td>\n</tr>\n<tr>\n<td>BINOP(o,e1,e2)</td>\n<td>对e1和e2执行二元操作o</td>\n<td>BINOP(PLUS,TEMP(t1),CONST(1)) → t1+1</td>\n</tr>\n<tr>\n<td>MEM(e)</td>\n<td>Memory access</td>\n<td>MEM(CONST(100)) → contents at address 100</td>\n</tr>\n<tr>\n<td>CALL(f,l)</td>\n<td>Function call, l是参数列表</td>\n<td>CALL(NAME(print),[TEMP(t1)]) → call print(t1)</td>\n</tr>\n<tr>\n<td>ESEQ(s,e)</td>\n<td>先执行语句s，再求值表达式e并返回e的结果</td>\n<td>ESEQ(MOVE(TEMP(t),CONST(1)),TEMP(t)) → (t&#x3D;1; t)</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<p>语句：</p>\n<table>\n<thead>\n<tr>\n<th>Node</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MOVE(TEMP t, e)</td>\n<td>将表达式e的值赋给临时变量t</td>\n<td>MOVE(TEMP(t1), CONST(42)) → t1 &#x3D; 42</td>\n</tr>\n<tr>\n<td>MOVE(MEM(e1), e2)</td>\n<td>将表达式e2的值存储到由e1指定的内存地址中</td>\n<td>MOVE(MEM(TEMP(t1)), CONST(42)) → *t1 &#x3D; 42</td>\n</tr>\n<tr>\n<td>EXP(e)</td>\n<td>计算表达式e的值但不返回结果，通常用于有副作用的操作（如函数调用）</td>\n<td>EXP(CALL(NAME(print), …)) → 调用print()函数以产生效果</td>\n</tr>\n<tr>\n<td>JUMP(e, labs)</td>\n<td>无条件跳转到由e指定的地址</td>\n<td>JUMP(NAME(L1), [L1]) → goto L1</td>\n</tr>\n<tr>\n<td>CJUMP(o,e1,e2,t,f)</td>\n<td>条件跳转，根据操作o对e1和e2的结果决定跳转到t或f</td>\n<td>CJUMP(LT, TEMP(t1), CONST(0), L1, L2) → 如果t1 &lt; 0则跳转到L1，否则跳转到L2</td>\n</tr>\n<tr>\n<td>SEQ(s1, s2)</td>\n<td>语句序列，先执行s1再执行s2</td>\n<td>SEQ(MOVE(…), JUMP(…)) → 先赋值再跳转</td>\n</tr>\n<tr>\n<td>LABEL(n)</td>\n<td>定义一个标签</td>\n<td>LABEL(L1) → L1:</td>\n</tr>\n</tbody></table>\n<p>例子：<br><img data-src=\"/f3.jpg\"><br>ADD那个地方写成BINOP的写法也可以</p>\n<h2 id=\"翻译AST成IR-Tree\"><a href=\"#翻译AST成IR-Tree\" class=\"headerlink\" title=\"翻译AST成IR Tree\"></a>翻译AST成IR Tree</h2><p>把AST表达式分为三类：</p>\n<ul>\n<li>Ex: 有结果的AST表达式比如a+b</li>\n<li>Nx：无结果的语句的比如print</li>\n<li>Cx：条件语句，值为bool的AST表达式</li>\n</ul>\n<h3 id=\"translate-Exp\"><a href=\"#translate-Exp\" class=\"headerlink\" title=\"translate Exp\"></a>translate Exp</h3><ol>\n<li>翻译简单变量：<br>在函数中访问一个局部变量实际上是访问它在当前栈帧中的位置，所以访问一个距离fp的offset为k的局部变量v，其IR Tree表示为:<br>$$<br>MEM(BINOP(PLUS, TEMP fp, CONST k))<br>$$<br><img data-src=\"/f4.jpg\"><br>如果通过static link访问一个变量，就要嵌套好几层MEM和BINOP<br>比如这个访问嵌套两层外面的x<br>最内层使用 CONST(8)：是因为需要从 inner 函数的帧指针 FP 开始，偏移 8 字节来访问静态链，该静态链指向 middle 函数的帧。<br>中间层和最外层使用 CONST(0)：是因为它们分别通过静态链直接访问 outer 函数的帧和变量 x，不需要额外的偏移<br><img data-src=\"/f5.jpg\"><br>:::danger<br>这个地方为什么内层是8中层是0存疑<br>:::</li>\n</ol>\n<p>左值和右值：&#x3D;左右的<br>MEM(addr)可以是左值也可以是右值</p>\n<ul>\n<li>Scalar L-value(Tiger): 一个地址</li>\n<li>Structured L-value(Pascal&#x2F;C): 一块内存</li>\n</ul>\n<ol start=\"2\">\n<li>翻译算术运算</li>\n</ol>\n<ul>\n<li>二元: BINOP(op, e1, e2)</li>\n<li>一元: <ul>\n<li>-x &#x3D;&#x3D;&gt; BINOP(MINUS, CONST(0), e_x)</li>\n<li>~x &#x3D;&#x3D;&gt; BINOP(XOR, e_x, CONST(-1))</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>数组访问<br>$$<br>MEM(BINOP(PLUS, MEM(e_a), BINOP(MUL, e_i, CONST(W))))<br>$$</li>\n</ol>\n<ul>\n<li><code>e_a</code> 是表示变量 <code>a</code> 的表达式，通常是&#x3D;&#x3D; <code>MEM(+(TEMP(fp), CONST(k_a)))</code>&#x3D;&#x3D;</li>\n<li><code>MEM(e_a)</code>：&#x3D;&#x3D;获取存储在变量 <code>a</code> 中的值，即数组基地址&#x3D;&#x3D;</li>\n<li><code>e_i</code> 是计算索引 <code>i</code> 的表达式</li>\n<li><code>BINOP(MUL, e_i, CONST(W))</code>：计算偏移<br><img data-src=\"/f6.jpg\"></li>\n</ul>\n<p>记录字段r.f访问:<br>$$<br>MEM(BINOP(PLUS, MEM(e_r), BINOP(MUL, n, CONST(W))))<br>$$</p>\n<ol start=\"4\">\n<li>翻译控制流<br>对于if e1 op e2 then stmt1 else stmt2翻译成</li>\n</ol>\n<figure class=\"highlight c\"><figcaption><span>IR</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 6个SEQ</span></span><br><span class=\"line\">SEQ(</span><br><span class=\"line\">    CJUMP(op, e1, e2, t, f),</span><br><span class=\"line\">    SEQ(</span><br><span class=\"line\">        LABEL(t),</span><br><span class=\"line\">        SEQ(</span><br><span class=\"line\">            stm1,</span><br><span class=\"line\">            SEQ(</span><br><span class=\"line\">                JUMP(NAME(end)),</span><br><span class=\"line\">                SEQ(</span><br><span class=\"line\">                    LABEL(f),</span><br><span class=\"line\">                    SEQ(stm2, LABEL(end))</span><br><span class=\"line\">                )</span><br><span class=\"line\">            )</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>Tiger的逻辑运算符&amp;(and)和|(or)需要实现短路求值：只计算必要的操作数<br>每个Cx是一个Label</p>\n<ul>\n<li>逻辑与 (a &amp; b)的短路规则：<ul>\n<li>计算a<br>  -若a为假，直接得到假结果（不计算b）<br>  -若a为真，继续计算b，最终结果即为b的值</li>\n</ul>\n</li>\n<li>逻辑或 (a | b)的短路规则：<br>  -计算a<br>  -若a为真，直接得到真结果（不计算b）<ul>\n<li>若a为假，继续计算b，最终结果即为b的值</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>循环语句</li>\n</ol>\n<figure class=\"highlight c\"><figcaption><span>tiger</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> a &gt; <span class=\"number\">0</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">a := a - <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>翻译成</p>\n<figure class=\"highlight c\"><figcaption><span>IR</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SEQ(LABEL test, </span><br><span class=\"line\">    SEQ(CJUMP(GT, TEMP a, CONST <span class=\"number\">0</span>, body, done), </span><br><span class=\"line\">        SEQ(LABEL body, </span><br><span class=\"line\">            SEQ(MOVE(TEMP a, BINOP(MINUS, TEMP a, CONST <span class=\"number\">1</span>)), </span><br><span class=\"line\">                SEQ(JUMP(NAME(test), [test]), </span><br><span class=\"line\">                    LABEL done)))))</span><br></pre></td></tr></table></figure>\n<p>break翻译为直接跳转到done<br>for循环我懒得写了，也是一个道理<br>和汇编差不多意思</p>\n<ol start=\"6\">\n<li>翻译函数<br>$$<br>CALL(NAME(l_f), [sl, a_1, …, a_n])<br>$$<br>sl是static link。</li>\n</ol>\n<h3 id=\"translate-Declaration\"><a href=\"#translate-Declaration\" class=\"headerlink\" title=\"translate Declaration\"></a>translate Declaration</h3><ul>\n<li>Variable declaration</li>\n<li>Type declaration</li>\n<li>Function declaration</li>\n</ul>\n<ol>\n<li>翻译变量声明</li>\n</ol>\n<figure class=\"highlight c\"><figcaption><span>tiger</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let</span><br><span class=\"line\">    var x := <span class=\"number\">10</span></span><br><span class=\"line\">    var y := x + <span class=\"number\">5</span></span><br><span class=\"line\">in </span><br><span class=\"line\">    x + y</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><figcaption><span>IR</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ESEQ( </span><br><span class=\"line\">    SEQ( </span><br><span class=\"line\">        MOVE(MEM(+(FP, CONST(x_offset))), CONST(<span class=\"number\">10</span>)), </span><br><span class=\"line\">        MOVE(MEM(+(FP, CONST(y_offset))), </span><br><span class=\"line\">        BINOP(PLUS, </span><br><span class=\"line\">        MEM(+(FP, CONST(x_offset))), </span><br><span class=\"line\">        CONST(<span class=\"number\">5</span>))) </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    BINOP(PLUS, </span><br><span class=\"line\">    MEM(+(FP, CONST(x_offset))), </span><br><span class=\"line\">    MEM(+(FP, CONST(y_offset)))) </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>let body in e end翻译成ESEQ(body, e)<br>变量定义翻译成 MEM(+(FP, CONST(offset)))<br>初始化翻译成 MOVE(MEM(+(FP, CONST(offset))), CONST(value))</p>\n<ol start=\"2\">\n<li><p>类型声明<br>No need to generate any IR tree code</p>\n</li>\n<li><p>函数声明<br> – Prologue（序言）<br> – Body（函数体）<br> – Epilogue（尾声）</p>\n</li>\n</ol>\n<ul>\n<li>Prologue<ul>\n<li>pseudo-instructions to announce the beginning of a function</li>\n<li>定义函数标签用于跳转&#x2F;调用</li>\n<li>修改栈指针（SP），为新栈帧分配空间，一般是$SP :&#x3D; SP - frame_size$</li>\n<li>保存被调用者需要保存的寄存器（callee-save），如 $s0-$s7；保存返回地址（RA）</li>\n<li>保存函数参数到栈中（尤其是传值调用时）；保存静态链（static link）</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "中间代码"
            ]
        },
        {
            "id": "http://example.com/2025/03/29/computer-science/compile-principles/ch4/",
            "url": "http://example.com/2025/03/29/computer-science/compile-principles/ch4/",
            "title": "Ch4",
            "date_published": "2025-03-28T16:00:00.000Z",
            "content_html": "",
            "tags": [
                "抽象语法"
            ]
        },
        {
            "id": "http://example.com/2025/03/23/computer-science/compile-principles/ch3/",
            "url": "http://example.com/2025/03/23/computer-science/compile-principles/ch3/",
            "title": "Ch3",
            "date_published": "2025-03-22T16:00:00.000Z",
            "content_html": "<h1 id=\"语法分析\"><a href=\"#语法分析\" class=\"headerlink\" title=\"语法分析\"></a>语法分析</h1><h2 id=\"CFG\"><a href=\"#CFG\" class=\"headerlink\" title=\"CFG\"></a>CFG</h2><p>见计算理论<br>Parse tree</p>\n<h3 id=\"Ambiguous-grammars\"><a href=\"#Ambiguous-grammars\" class=\"headerlink\" title=\"Ambiguous grammars\"></a>Ambiguous grammars</h3><h2 id><a href=\"#\" class=\"headerlink\" title></a></h2>",
            "tags": [
                "语法分析"
            ]
        },
        {
            "id": "http://example.com/2025/03/22/computer-science/compile-principles/ch2/",
            "url": "http://example.com/2025/03/22/computer-science/compile-principles/ch2/",
            "title": "Ch2",
            "date_published": "2025-03-21T16:00:00.000Z",
            "content_html": "<h1 id=\"Ch2-词法分析\"><a href=\"#Ch2-词法分析\" class=\"headerlink\" title=\"Ch2 词法分析\"></a>Ch2 词法分析</h1><blockquote>\n<p>把input分解成一个个token</p>\n</blockquote>\n<h2 id=\"Regular-Expression\"><a href=\"#Regular-Expression\" class=\"headerlink\" title=\"Regular Expression\"></a>Regular Expression</h2><ul>\n<li>Language: a set of strings</li>\n<li>String: a finite sequence of characters<blockquote>\n<p>Regular Experssion Notations:<br><img data-src=\"/image-1.png\"></p>\n</blockquote>\n</li>\n</ul>\n<p>:::info<br>DFA, NFA相关 见计算理论<br>:::</p>\n<h2 id=\"RE转NFA\"><a href=\"#RE转NFA\" class=\"headerlink\" title=\"RE转NFA\"></a>RE转NFA</h2><p>:::info 方法：</p>\n<ol>\n<li>画出初始态和终态</li>\n<li>分裂规则：<br><img data-src=\"/image-2.jpg\"><br>:::</li>\n</ol>\n<h2 id=\"NFA转DFA\"><a href=\"#NFA转DFA\" class=\"headerlink\" title=\"NFA转DFA\"></a>NFA转DFA</h2><p>从初始状态的闭包开始，每次根据\\epsilon和当前状态的闭包，得到下一个状态的闭包，直到得到终态的闭包。</p>\n<p>+++info example<br>;;;id3 题目<br>:chestnut:<br>把这个NFA转成等价的DFA<br><img data-src=\"/image-3.png\"><br>;;;<br>;;;id3 答案<br>初态的闭包是1、2、6，1、2、6经过a可以转移到3、7，因为有\\epsilon转移，所以3、7的闭包是3、4、7、8，同理3、4、7、8经过b可以到5、8，由于8是终态，把所有包含8的圆圈画成终态的环。<br><img data-src=\"/image-4.png\"><br>;;;<br>+++</p>\n<h2 id=\"最小化DFA\"><a href=\"#最小化DFA\" class=\"headerlink\" title=\"最小化DFA\"></a>最小化DFA</h2><p>含义：</p>\n<ol>\n<li>没有多余状态：</li>\n</ol>\n<ul>\n<li>从这个状态没有通路到达终态</li>\n<li>从开始状态出发，任何输入串也不能到达的那个状态</li>\n</ul>\n<ol start=\"2\">\n<li>没有两个状态相互等价<br>:::info 方法：</li>\n<li>多余状态直接删除<br><img data-src=\"/image-5.png\"></li>\n<li>合并等价状态</li>\n</ol>\n<ul>\n<li>将状态分为终态和非终态两个集合</li>\n<li>遍历每个集合，如果经过转换到达的状态都在当前集合里，则不用分，否则划分子集，直到划分不了为止</li>\n<li>:chestnut: 例子</li>\n<li><img data-src=\"/image-6.png\"><br>:::</li>\n</ul>\n",
            "tags": [
                "词法分析"
            ]
        },
        {
            "id": "http://example.com/2025/03/21/computer-science/compile-principles/ch1/",
            "url": "http://example.com/2025/03/21/computer-science/compile-principles/ch1/",
            "title": "Ch1",
            "date_published": "2025-03-20T16:00:00.000Z",
            "content_html": "<blockquote>\n<p>ZJU 2025春夏编译原理 学习笔记</p>\n<p>主要基于虎书（<em>Modern Compiler Implementation in C</em>, Andrew W. Appel）和好多老师的ppt（ldm, yps），还有lzx的智云</p>\n</blockquote>\n<h1 id=\"CH1-Introduction\"><a href=\"#CH1-Introduction\" class=\"headerlink\" title=\"CH1 Introduction\"></a>CH1 Introduction</h1><ul>\n<li>Two Important Concepts<ul>\n<li>Phases（阶段）</li>\n<li>Interfaces（接口）</li>\n</ul>\n</li>\n</ul>\n<p>方框里的是phase，中间的是interface<br><img data-src=\"/image.png\"><br>各个阶段的描述<br><img data-src=\"/image-1.png\"><img data-src=\"/image-2.png\"></p>\n",
            "tags": [
                "编译原理"
            ]
        },
        {
            "id": "http://example.com/2025/03/21/computer-science/compile-principles/ch5/",
            "url": "http://example.com/2025/03/21/computer-science/compile-principles/ch5/",
            "title": "Ch5",
            "date_published": "2025-03-20T16:00:00.000Z",
            "content_html": "<h1 id=\"语义分析\"><a href=\"#语义分析\" class=\"headerlink\" title=\"语义分析\"></a>语义分析</h1><blockquote>\n<p>绑定，类型检查</p>\n</blockquote>\n<h2 id=\"symbol-table\"><a href=\"#symbol-table\" class=\"headerlink\" title=\"symbol table\"></a>symbol table</h2><ul>\n<li><p>Imperative style: 命令式风格</p>\n<ul>\n<li>Modify $\\sigma_1$ until it becomes $\\sigma_2$. </li>\n<li>While $\\sigma_2$ exists, we cannot look things up in $\\sigma_1$. </li>\n<li>When done with $\\sigma_2$, can undo the modification to get $\\sigma_1$ back again.<br>+++info 方法：<br>Hashing<br>插入：找到哈希值然后插入链表的表头<br>查找：找到哈希值然后遍历链表<br>pop: 找到哈希值然后把链表表头删掉  table[hash(key)] &#x3D; table[hash(key)].next<br>+++</li>\n</ul>\n</li>\n<li><p>Functional style: 函数式风格</p>\n<ul>\n<li>To keep $\\sigma_1$ in pristine condition while creating create $\\sigma_2$ and $\\sigma_3$<br>+++info 方法：<br>如果依旧用哈希，每次要复制一遍哈希表，开销太大了，不现实<br><img data-src=\"/f2.jpg\"><br>所以用persistent BST<br><img data-src=\"/f1.jpg\"><br>先遍历二叉搜索树找到要插入的位置，然后对于插入节点把它从根节点到它全都复制一遍然后插入<br>+++</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Tiger编译器中的符号\"><a href=\"#Tiger编译器中的符号\" class=\"headerlink\" title=\"Tiger编译器中的符号\"></a>Tiger编译器中的符号</h2><p>对链表进行lookup的时候每一次都要进行string compare，开销是很大的。所以使用新的数据结构将符号对象关联到一个整数上，因此对于任意给定字符串的所有不同出现，都会被转换成同一个符号对象。<br>Symbol的实现：通过hash函数将字符串映射到一个symbol对象上<br>SymbolTable的实现：beginScope()和endScope()的实现</p>\n<ul>\n<li>beginScope()：添加一个marksym</li>\n<li>endScope()：从符号表中不断pop直到marksym</li>\n<li>引入一个 辅助栈(Auxiliary stack) 来维护<ul>\n<li>符号入栈时，会将binding联动地插入对应bucket的链表头</li>\n<li>弹出栈顶符号时，对应bucket的链表头也会联动地被移除</li>\n<li>beginScope: 压入一个特殊标记到辅助栈中</li>\n<li>endScope: 一直弹出符号直到弹出了一个特殊标记</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类型检查\"><a href=\"#类型检查\" class=\"headerlink\" title=\"类型检查\"></a>类型检查</h2><h3 id=\"哪些类型表达式是合法-非法的\"><a href=\"#哪些类型表达式是合法-非法的\" class=\"headerlink\" title=\"哪些类型表达式是合法&#x2F;非法的\"></a>哪些类型表达式是合法&#x2F;非法的</h3><p>Tiger的类型系统：</p>\n<ul>\n<li>两种primitive type: int, string</li>\n<li>两种constructed type: records, arrays</li>\n</ul>\n<p>文法</p>\n<ol>\n<li>typec → type type-id &#x3D; ty<ul>\n<li>这表示定义一个类型。<code>typec</code> 是一个类型定义的开始，它由关键字 <code>type</code>、一个类型标识符 <code>type-id</code> 和一个等号 <code>=</code> 后跟类型定义 <code>ty</code> 组成。</li>\n</ul>\n</li>\n<li>ty → type-id<ul>\n<li>这表示类型 <code>ty</code> 可以直接是一个已定义的类型标识符 <code>type-id</code>。</li>\n</ul>\n</li>\n<li>ty → ‘{’ tyfields ‘}’<ul>\n<li>这表示类型 <code>ty</code> 可以是一个记录（record），由花括号 <code>&#123;&#125;</code> 包围的一系列字段 <code>tyfields</code> 定义。</li>\n</ul>\n</li>\n<li>ty → array of type-id<ul>\n<li>这表示类型 <code>ty</code> 可以是一个数组，由关键字 <code>array of</code> 后跟一个类型标识符 <code>type-id</code> 定义。</li>\n</ul>\n</li>\n<li>tyfields → ε<ul>\n<li>这表示字段列表 <code>tyfields</code> 可以为空（ε 表示空串）。</li>\n</ul>\n</li>\n<li>tyfields → id: type-id {, id:type-id}<ul>\n<li>这表示字段列表 <code>tyfields</code> 由一个或多个字段组成，每个字段由一个标识符 <code>id</code> 和冒号 <code>:</code> 后跟一个类型标识符 <code>type-id</code> 定义，多个字段之间用逗号 <code>,</code> 分隔。</li>\n</ul>\n</li>\n</ol>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let type a = &#123;x: int; y: int&#125;</span><br><span class=\"line\">    type b = a</span><br><span class=\"line\">    var i : a := ...</span><br><span class=\"line\">    var j : b := ...</span><br><span class=\"line\">in i := j</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"类型等价\"><a href=\"#类型等价\" class=\"headerlink\" title=\"类型等价\"></a>类型等价</h3><ul>\n<li>Name equivalence (NE): 必须声明是同一个类型才是同一类型</li>\n<li>Structure equivalence (SE): 如果两个类型的结构完全相同（即它们由相同的构造器以相同的顺序组成），那么它们就被认为是等价的，即使它们的名字不同</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type A = &#123;x: int; y: int&#125;</span><br><span class=\"line\">type B = &#123;x: int; y: int&#125; </span><br></pre></td></tr></table></figure>\n<p>Tiger用的是NE<br>在Tiger编程语言中，存在两个独立的命名空间：一个用于类型（Types），另一个用于函数和变量（Functions and Variables）。所以类型和函数&#x2F;变量可以存在相同的名字，但是函数和变量不能存在相同的名字。<br>所以需要两个env</p>\n<ul>\n<li>Type env<ul>\n<li>symbol -&gt; Ty_ty</li>\n</ul>\n</li>\n<li>Value env<ul>\n<li>对于变量，symbol -&gt; Ty_ty</li>\n<li>对于函数，symbol -&gt; struct{Ty_tyList formals, Ty_ty results}</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"类型检查的rule\"><a href=\"#类型检查的rule\" class=\"headerlink\" title=\"类型检查的rule\"></a>类型检查的rule</h3><p>类型检查分为两部分:</p>\n<ul>\n<li>Type-checking expressions: 对于每个表达式，根据当前的Type和Value环境来确定其类型，并检查是否符合语言的类型规则</li>\n<li>Type-checking declarations: 在Tiger语言中声明只可能在let语句中出现<br>好像就是讲了transExp, transDec, transVar，AST递归检查每个节点的类型然后一层一层往上传再检查</li>\n</ul>\n",
            "tags": [
                "语义分析"
            ]
        }
    ]
}