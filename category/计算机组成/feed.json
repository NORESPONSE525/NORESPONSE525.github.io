{
    "version": "https://jsonfeed.org/version/1",
    "title": "NoResponse's Blog • All posts by \"计算机组成\" category",
    "description": "成分复杂的CSer from ZJU",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/08/10/computer-science/computer-organization/ch5/",
            "url": "http://example.com/2025/08/10/computer-science/computer-organization/ch5/",
            "title": "Ch5",
            "date_published": "2025-08-09T16:00:00.000Z",
            "content_html": "<h1 id=\"Ch5-中央处理器\"><a href=\"#Ch5-中央处理器\" class=\"headerlink\" title=\"Ch5 中央处理器\"></a>Ch5 中央处理器</h1><h2 id=\"CPU的功能和基本结构\"><a href=\"#CPU的功能和基本结构\" class=\"headerlink\" title=\"CPU的功能和基本结构\"></a>CPU的功能和基本结构</h2><h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>CPU由运算器和控制器组成，具体功能包括：</p>\n<ul>\n<li>指令控制</li>\n<li>操作控制</li>\n<li>时间控制</li>\n<li>数据加工</li>\n<li>中断处理</li>\n</ul>\n<h3 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h3><ol>\n<li>运算器：ALU, 暂存器, ACC, GPRs, PSW, 移位寄存器， 计数器…</li>\n<li>控制器：PC, IR, ID, 时序电路，未操作信号发生器…</li>\n</ol>\n<h3 id=\"CPU的寄存器\"><a href=\"#CPU的寄存器\" class=\"headerlink\" title=\"CPU的寄存器\"></a>CPU的寄存器</h3><p>按汇编程序是否可访问分为用户可见寄存器(GPRs, PSW, PC)和用户不可见寄存器(存储器地址寄存器，存储器数据寄存器，IR, 暂存寄存器，累加寄存器，移位寄存器)<br>各寄存器的作用：</p>\n<ul>\n<li>在运算器中：<ul>\n<li>GPRs</li>\n<li>ACC: 通用寄存器，用于暂时存放ALU运算的结果</li>\n<li>SR（移位寄存器）：存放操作数且可以移位</li>\n<li>暂存寄存器：暂存从数据总线或通用寄存器送来的操作数，对应用程序员透明</li>\n<li>PSW：保留各种状态信息</li>\n</ul>\n</li>\n<li>在控制器中：<ul>\n<li>PC: 存放当前指令的地址</li>\n<li>IR: 存放当前指令</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"指令执行过程\"><a href=\"#指令执行过程\" class=\"headerlink\" title=\"指令执行过程\"></a>指令执行过程</h2><h3 id=\"指令周期\"><a href=\"#指令周期\" class=\"headerlink\" title=\"指令周期\"></a>指令周期</h3><p>&#x3D; 取值周期 + 执行周期<br>间址周期在取址和执行之间<br>如果CPU在每条指令结束前都要发中断查询信号 （轮询法），后面要加上中断周期</p>\n<h3 id=\"指令周期的数据流\"><a href=\"#指令周期的数据流\" class=\"headerlink\" title=\"指令周期的数据流\"></a>指令周期的数据流</h3><ol>\n<li>取址周期</li>\n</ol>\n<ul>\n<li>PC-&gt;MAR-&gt;地址总线-&gt;存储器</li>\n<li>CU发出读命令-&gt;控制总线-&gt;主存</li>\n<li>主存-&gt;数据总线-&gt;IR</li>\n<li>CU发出控制信号-&gt;PC&#x3D;PC+1</li>\n</ul>\n<ol start=\"2\">\n<li>间址周期</li>\n</ol>\n",
            "tags": [
                "CPU"
            ]
        },
        {
            "id": "http://example.com/2025/08/01/computer-science/computer-organization/ch4/",
            "url": "http://example.com/2025/08/01/computer-science/computer-organization/ch4/",
            "title": "Ch4",
            "date_published": "2025-07-31T16:00:00.000Z",
            "content_html": "<h1 id=\"Ch4-指令系统\"><a href=\"#Ch4-指令系统\" class=\"headerlink\" title=\"Ch4 指令系统\"></a>Ch4 指令系统</h1><h2 id=\"指令系统\"><a href=\"#指令系统\" class=\"headerlink\" title=\"指令系统\"></a>指令系统</h2><h3 id=\"ISA（王道叫它指令集体系结构）\"><a href=\"#ISA（王道叫它指令集体系结构）\" class=\"headerlink\" title=\"ISA（王道叫它指令集体系结构）\"></a>ISA（王道叫它指令集体系结构）</h3><p>指令系统 vs ISA</p>\n<p>ISA完整地定义了软件和硬件之间的接口，规定了：</p>\n<ul>\n<li>指令格式（指令寻址方式，操作类型，操作数）</li>\n<li>操作数的类型、寻址方式、大端小端存放（大端：高位放在低地址；小端：低位放在低地址）</li>\n<li>程序可访问的寄存器编号、个数和位数，存储空间大小和编址方式</li>\n<li>指令执行过程的控制方式（PC, condition code, …）</li>\n</ul>\n<h3 id=\"指令的基本格式\"><a href=\"#指令的基本格式\" class=\"headerlink\" title=\"指令的基本格式\"></a>指令的基本格式</h3><p>操作码+地址码<br>主存一般是按字节编址，所以指令字长通常为字节的整数倍</p>\n<ol>\n<li><p>零地址指令<br>NOP, HLT<br>不需要操作数。<br>零地址的运算类指令仅用在堆栈计算机中（操作数直接从栈顶弹出）</p>\n</li>\n<li><p>一地址指令<br>OP, A1<br>OP(A1) -&gt; A1<br>加1，减1，取反，求补，移位等<br>可能有一个操作数或者两个操作数</p>\n<blockquote>\n<p>隐含约定目的地址的双操作数指令，地址码指明一个操作数，另一个操作数来自隐含寻址</p>\n</blockquote>\n</li>\n<li><p>二地址指令<br>OP, A1, A2<br>(A1)OP(A2) -&gt; A1</p>\n</li>\n<li><p>三地址指令<br>OP, A1, A2, A3<br>(A1)OP(A2) -&gt; A3</p>\n</li>\n<li><p>四地址指令<br>OP, A1, A2, A3, A4<br>(A1)OP(A2) -&gt; A3, A4 &#x3D; 下一条将要执行指令的地址</p>\n</li>\n</ol>\n<h3 id=\"定长操作码指令格式\"><a href=\"#定长操作码指令格式\" class=\"headerlink\" title=\"定长操作码指令格式\"></a>定长操作码指令格式</h3><p>n位opcode最多能表示2^n条指令<br>指令字长：单字长(PC &#x3D; PC + 1)、双字长(PC &#x3D; PC + 2)…</p>\n<h3 id=\"扩展操作码指令格式\"><a href=\"#扩展操作码指令格式\" class=\"headerlink\" title=\"扩展操作码指令格式\"></a>扩展操作码指令格式</h3><p>才去可变长度操作码，分散地放在指令字的不同位置上<br>要求：</p>\n<ol>\n<li>不允许短码是长码的前缀</li>\n<li>各指令的操作码不能重复<br><img data-src=\"/f1.jpg\"><br>RISC-V指令集</li>\n</ol>\n<h3 id=\"指令的操作类型\"><a href=\"#指令的操作类型\" class=\"headerlink\" title=\"指令的操作类型\"></a>指令的操作类型</h3><ol>\n<li>数据传送</li>\n</ol>\n<ul>\n<li>MOV: 寄存器到寄存器</li>\n<li>LOAD: 从内存读到寄存器</li>\n<li>STORE: 从寄存器写入内存</li>\n<li>PUSH</li>\n<li>POP</li>\n</ul>\n<ol start=\"2\">\n<li><p>算术和逻辑运算<br>ADD, SUB, MUL, DIV, MOD, AND, OR, XOR, NOT, XOR, INC(加一), DEC(减一)</p>\n</li>\n<li><p>移位<br>算术移位，逻辑移位，循环移位</p>\n</li>\n<li><p>转移<br>JMP, BRANCH, CALL, RET, TRAP（中断隐指令是硬件实现的，只有TRAP是软指令）</p>\n</li>\n<li><p>I&#x2F;O操作</p>\n</li>\n</ol>\n<h2 id=\"指令的寻址方式\"><a href=\"#指令的寻址方式\" class=\"headerlink\" title=\"指令的寻址方式\"></a>指令的寻址方式</h2><h3 id=\"指令寻址与数据寻址\"><a href=\"#指令寻址与数据寻址\" class=\"headerlink\" title=\"指令寻址与数据寻址\"></a>指令寻址与数据寻址</h3><ol>\n<li>指令寻址</li>\n</ol>\n<ul>\n<li>顺序： PC &#x3D; PC + 1</li>\n<li>跳转： 绝对转移(PC &#x3D; 跳转地址) ,相对转移(PC &#x3D; PC + offset)</li>\n</ul>\n<ol start=\"2\">\n<li>数据寻址<br>格式：操作码 寻址特征 形式地址A</li>\n</ol>\n<ul>\n<li>立即寻址(addi, …)</li>\n<li>直接寻址（A直接表示地址）</li>\n<li>寄存器寻址(add, …)</li>\n<li>寄存器间接寻址(lw r1 offset(r2), …)</li>\n</ul>\n<h3 id=\"常见的数据寻址方式\"><a href=\"#常见的数据寻址方式\" class=\"headerlink\" title=\"常见的数据寻址方式\"></a>常见的数据寻址方式</h3><ol>\n<li>隐含寻址<br>比如单地址的第二个操作数由ACC提供: Intel 8080的<code>ADD A</code>指令会将寄存器A的内容与指定的操作数（放在ACC内）相加，并将结果存储回累加器中<br>优点是缩短指令字长；缺点是需要增加存储操作数或隐含地址的硬件</li>\n<li>立即（数）寻址<br>比如riscv的<code>addi x5, x6, #1</code><br>优点是不用访存速度快，缺点是立即数位数有限</li>\n<li>直接寻址<br><code>OP #A</code></li>\n</ol>\n<p>比如lc3的<code>LD R1, LABEL1</code>翻译成汇编是<code>LD R1, x3100</code>表示<code>R1 &lt;- MEM[x3100]</code><br>形式地址A就是操作数的真实地址EA<br>优点是简单，缺点是寻址范围受A的位数限制<br>4. 间接寻址<br>EA &#x3D; (A)<br>指令中给出的地址是包含实际地址的内存位置或寄存器<br>比如lc3的<code>LDI R1, LABEL1</code>翻译成汇编是<code>LDI R1, x3100</code>表示<code>R1 &lt;- MEM[MEM[x3100]]</code><br>5. 寄存器寻址<br>EA &#x3D; (Ri)<br><code>ADD R1, R2, R3</code><br>6. 寄存器间接寻址<br>EA &#x3D; (Ri)<br>比如<code>LW R1, offset(R2)</code><br>7. 相对寻址<br>相对PC寻址<br>EA &#x3D; (PC) + A<br>比如branch<br>8. 基址寻址<br>EA &#x3D; (BR) + A<br>面向操作系统，优点是扩大寻址范围，有利于躲到程序设计；缺点是偏移量(A)的位数较短<br>9. 变址寻址<br>EA &#x3D; (IX) + A<br>比如用来访问数组</p>\n<blockquote>\n<p>偏址寻址：相对寻址、基址寻址、变址寻址</p>\n<ol start=\"10\">\n<li>堆栈寻址有一个堆栈指针SP，堆栈分为硬堆栈，软堆栈。寄存器堆栈是硬堆栈，内存是软堆栈。采用无操作数指令<br><img data-src=\"/f2.jpg\"></li>\n</ol>\n</blockquote>\n<h2 id=\"程序的机器级代码表示\"><a href=\"#程序的机器级代码表示\" class=\"headerlink\" title=\"程序的机器级代码表示\"></a>程序的机器级代码表示</h2><p>x86汇编</p>\n<h3 id=\"常用汇编指令介绍\"><a href=\"#常用汇编指令介绍\" class=\"headerlink\" title=\"常用汇编指令介绍\"></a>常用汇编指令介绍</h3><ol>\n<li>相关寄存器<br>x86架构有8个32位的通用寄存器：EAX、EBX、ECX、EDX、ESI、EDI、EBP、ESP<br><img data-src=\"/f3.jpg\"><br><img data-src=\"/f4.jpg\"><br><img data-src=\"/f5.jpg\"></li>\n<li>汇编指令格式<br>x86汇编指令格式有两种：AT&amp;T格式和Intel格式</li>\n</ol>\n<ul>\n<li>AT&amp;T只能小写，Intel大小写都行</li>\n<li>AT&amp;T第一个操作数是源操作数，第二个是目的操作数；Intel第一个操作数是目的操作数，第二个是源操作数</li>\n<li>AT&amp;T寄存器前缀%，立即数前缀$；Intel格式寄存器和立即数不需要加前缀</li>\n<li>内存寻址：AT&amp;T格式为(addr)，Intel格式为[addr]</li>\n<li>处理复杂寻址方式时，AT&amp;T格式为disp(base, index, scale)，表示偏移量，基址寄存器，变址寄存器，比例因子，表示的操作数为M[R[base]+R[index]*scale + disp];</li>\n<li>指定数据长度时，AT&amp;T用b, w, l; Intel用byte ptr, word ptr, dword ptr(一个word是16位，一个dword是32位)<br><img data-src=\"/f6.jpg\"><br><img data-src=\"/f7.jpg\"></li>\n</ul>\n<ol start=\"3\">\n<li>常用指令</li>\n</ol>\n<ul>\n<li><reg>表示任意寄存器，后面跟数字指定其位数</reg></li>\n<li><mem>内存地址</mem></li>\n<li><con>后面跟数字表示几位常数<br>常见的指令：</con></li>\n<li>数据传送指令<ul>\n<li>mov<ul>\n<li>mov <reg>, <reg></reg></reg></li>\n<li>mov <reg>, <mem></mem></reg></li>\n<li>mov <mem>, <reg></reg></mem></li>\n<li>mov <reg>, <con></con></reg></li>\n<li>mov <mem>, <con></con></mem></li>\n</ul>\n</li>\n<li>push(ESP指向栈顶空的位置，push之前ESP &#x3D; ESP - 4)&#x3D;&#x3D;栈中元素固定为32位&#x3D;&#x3D;<ul>\n<li>push &lt;reg32</li>\n<li>push <mem></mem></li>\n<li>push <con32></con32></li>\n</ul>\n</li>\n<li>pop(pop之后ESP &#x3D; ESP + 4)<ul>\n<li>pop <reg32></reg32></li>\n<li>pop <mem></mem></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>算术和逻辑运算<ul>\n<li>add&#x2F;sub(把两个操作数相加&#x2F;减，结果放回目的操作数)<ul>\n<li>add eax, 10    # eax &#x3D; eax + 10</li>\n<li>add byte ptr [var], 10    # 10与var指向的内存地址的一字节值相加，结果放回var指向的内存中</li>\n</ul>\n</li>\n<li>inc&#x2F;dec(把操作数自加1&#x2F;自减1)<ul>\n<li>dec eax    # eax &#x3D; eax - 1</li>\n<li>inc dword ptr [var]    # var指向的32位值自加1，结果放回var指向的32位内存中</li>\n</ul>\n</li>\n<li>imul(有符号数整数乘法, mul是无符号数乘法)目的操作数必须是寄存器，溢出时<code>OF = 1</code><ul>\n<li>imul <reg32>, <reg32></reg32></reg32></li>\n<li>imul <reg32>, <mem></mem></reg32></li>\n<li>imul <reg32>, <reg32>, <con></con></reg32></reg32></li>\n<li>imul <reg32>, <mem>, <con></con></mem></reg32></li>\n</ul>\n</li>\n<li>idiv(有符号数整数除法，&#x3D;&#x3D;只有一个操作数为除数，被除数有64位放在 <code>edx:eax</code> 中，操作结果商放到<code>eax</code>，余数放到<code>edx</code>&#x3D;&#x3D;)<ul>\n<li>idiv <reg32></reg32></li>\n<li>idiv <mem></mem></li>\n</ul>\n</li>\n<li>and&#x2F;or&#x2F;xor<ul>\n<li>and&#x2F;or&#x2F;xor <reg>, <reg></reg></reg></li>\n<li>and&#x2F;or&#x2F;xor <reg>, <mem></mem></reg></li>\n<li>and&#x2F;or&#x2F;xor <mem>, <reg></reg></mem></li>\n<li>and&#x2F;or&#x2F;xor <reg>, <con></con></reg></li>\n<li>and&#x2F;or&#x2F;xor <mem>, <con></con></mem></li>\n</ul>\n</li>\n<li>not(按位取反)<ul>\n<li>not <reg></reg></li>\n<li>not <mem></mem></li>\n</ul>\n</li>\n<li>neg(取负)<ul>\n<li>neg <reg></reg></li>\n<li>neg <mem></mem></li>\n</ul>\n</li>\n<li>shl&#x2F;shr(逻辑左移&#x2F;右移)<ul>\n<li>shl <reg>, <con8></con8></reg></li>\n<li>shl <mem>, <con8></con8></mem></li>\n<li>shr <reg>, <reg8></reg8></reg></li>\n<li>shr <mem>, <reg8></reg8></mem></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>控制流<ul>\n<li>jmp<ul>\n<li>jmp <label></label></li>\n</ul>\n</li>\n<li>jcondition<ul>\n<li>je <label></label></li>\n<li>jz <label></label></li>\n<li>jne <label></label></li>\n<li>jg <label></label></li>\n<li>jge <label></label></li>\n<li>jl <label></label></li>\n<li>jle <label></label></li>\n</ul>\n</li>\n<li>cmp&#x2F;test(cmp相当于相减，test相当于按位与，不保存操作结果仅设置条件码用于跳转指令)<ul>\n<li>cmp&#x2F;test <reg>, <reg></reg></reg></li>\n<li>cmp&#x2F;test <reg>, <mem></mem></reg></li>\n<li>cmp&#x2F;test <mem>, <reg></reg></mem></li>\n<li>cmp&#x2F;test <reg>, <con></con></reg></li>\n</ul>\n</li>\n<li>call&#x2F;ret(call将返回地址入栈然后跳转，ret弹出返回地址并跳转)<ul>\n<li>call <label></label></li>\n<li>ret</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"选择语句的机器级表示\"><a href=\"#选择语句的机器级表示\" class=\"headerlink\" title=\"选择语句的机器级表示\"></a>选择语句的机器级表示</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(test_exp)</span><br><span class=\"line\">    then_stmt</span><br><span class=\"line\">else</span><br><span class=\"line\">    else_stmt</span><br></pre></td></tr></table></figure>\n<p>翻译成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(!t)</span><br><span class=\"line\">    goto false;</span><br><span class=\"line\">then_stmt;   </span><br><span class=\"line\">goto done;</span><br><span class=\"line\">false:  else_stmt;</span><br><span class=\"line\">done:</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"循环语句的机器级表示\"><a href=\"#循环语句的机器级表示\" class=\"headerlink\" title=\"循环语句的机器级表示\"></a>循环语句的机器级表示</h3><ol>\n<li>do-while</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do</span><br><span class=\"line\">  body_stmt</span><br><span class=\"line\">  while(test_exp);</span><br></pre></td></tr></table></figure>\n<p>翻译成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loop:   body_stmt;</span><br><span class=\"line\">  t = test_exp;</span><br><span class=\"line\">  if(t)</span><br><span class=\"line\">    goto loop;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>while</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(test_exp)</span><br><span class=\"line\">  body_stmt;</span><br></pre></td></tr></table></figure>\n<p>翻译成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t = test_exp;</span><br><span class=\"line\">if(!t)</span><br><span class=\"line\">  goto done;</span><br><span class=\"line\">loop:</span><br><span class=\"line\">  body_stmt;</span><br><span class=\"line\">  t = test_exp;</span><br><span class=\"line\">  if(t)</span><br><span class=\"line\">    goto loop;</span><br><span class=\"line\">done:</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>for</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(init_exp; test_exp; update_exp)</span><br><span class=\"line\">  body_stmt;</span><br></pre></td></tr></table></figure>\n<p>翻译成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init_exp;</span><br><span class=\"line\">t = test_exp;</span><br><span class=\"line\">if(!t)</span><br><span class=\"line\">  goto done;</span><br><span class=\"line\">loop:</span><br><span class=\"line\">  body_stmt;</span><br><span class=\"line\">  update_exp;</span><br><span class=\"line\">  t = test_exp;</span><br><span class=\"line\">  if(t)</span><br><span class=\"line\">    goto loop;</span><br><span class=\"line\">done:</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"过程调用的机器级表示\"><a href=\"#过程调用的机器级表示\" class=\"headerlink\" title=\"过程调用的机器级表示\"></a>过程调用的机器级表示</h3><ol>\n<li>caller将实参放到callee能访问的地方（寄存器放不下放栈里）</li>\n<li>caller保存返回地址（通过call指令实现）</li>\n<li>callee保存caller通用寄存器的内容，并为自己的非静态局部变量分配空间</li>\n<li>执行callee</li>\n<li>恢复caller的寄存器内容，将返回值放到caller能访问的地方（寄存器、栈），释放局部变量</li>\n<li>callee取出返回地址，恢复PC（ret实现）<blockquote>\n<p>EAX, ECX, EDX是caller saved register<br>通常用于传递参数、存储临时变量或返回值，所以call的时候内容可能会变，要先保存再调用。比如返回值一般保存在EAX<br>EBX, ESI, EDI是callee saved register<br>这些寄存器的值在函数调用后应保持不变，所以由callee保存，ret的时候要恢复</p>\n</blockquote>\n</li>\n</ol>\n<p>每个过程有自己的栈帧，<code>EBP</code>保存栈帧的基址，<code>ESP</code>指向栈顶位置，<code>EBP</code>的值不变，当前栈帧的范围在<code>EBP</code>和<code>ESP</code>之间（详见编译原理<code>activated record</code>）<br><img data-src=\"/f8.jpg\"><br>前三行的意思是新开一个栈帧，分配了24字节的栈帧空间。<code>push epb</code>实际上就是把static link压栈。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub3Jlc3BvbnNlNTI1LmdpdGh1Yi5pby8yMDI1LzA2LzE1L2NvbXB1dGVyLXNjaWVuY2UvY29tcGlsZS1wcmluY2lwbGVzL2NoNi8jJUU1JTg3JUJEJUU2JTk1JUIwJUU4JUIwJTgzJUU3JTk0JUE4JUU2JUI1JTgxJUU3JUE4JThC\">详见编译原理笔记</span><br>执行<code>call</code>之后，<code>call</code>会先将返回地址压栈，然后跳转到<code>add</code>的起始地址，为<code>add</code>创建栈帧。<code>add</code>的返回值存放在<code>EAX</code>中。<br>执行<code>ret</code>之前需要释放当前栈帧，恢复caller的栈帧。因此<code>leave</code>相当于<code>mov esp, ebp</code> <code>pop ebp</code></p>\n<h2 id=\"CISC和RISC的基本概念\"><a href=\"#CISC和RISC的基本概念\" class=\"headerlink\" title=\"CISC和RISC的基本概念\"></a>CISC和RISC的基本概念</h2><p>复杂指令系统计算机(CISC)：比如x86<br>精简指令系统计算机(RISC)：ARM, MIPS…</p>\n<h3 id=\"CISC\"><a href=\"#CISC\" class=\"headerlink\" title=\"CISC\"></a>CISC</h3><ul>\n<li>指令系统复杂庞大，指令数目多</li>\n<li>指令长度不固定，格式多，寻址方式多</li>\n<li>可以访存的指令不受限制（比如x86的add可以直接把reg和mem相加，但是riscv的只能reg和reg或者reg和imm）</li>\n<li>各种指令使用频度相差很大</li>\n<li>各种指令执行时间相差很大，大多指令需要多个时钟周期</li>\n<li>控制器大多采用微程序控制，无法采用硬连线控制</li>\n<li>难以用优化编译生成高效的目标代码程序</li>\n</ul>\n<h3 id=\"RISC\"><a href=\"#RISC\" class=\"headerlink\" title=\"RISC\"></a>RISC</h3><ul>\n<li>选取使用频率最高的一些简单指令，复杂指令的功能由简单指令的组合来实现</li>\n<li>指令长度固定，指令格式种类少，寻址方式种类少</li>\n<li>只有LOAD&#x2F;STORE访存，其余指令的操作只能访问寄存器&#x2F;imm</li>\n<li>CPU中通用寄存器数量相当多</li>\n<li>采用流水线技术，大部分指令在一个时钟周期内完成</li>\n<li>硬布线控制为主，不用或少用微程序控制</li>\n<li>重视编译优化<br>CISC兼容性好，大多RISC不能和老机器兼容，但具有更强的实用性。CISC可以提供更多的功能</li>\n</ul>\n<h3 id=\"CISC和RISC的比较\"><a href=\"#CISC和RISC的比较\" class=\"headerlink\" title=\"CISC和RISC的比较\"></a>CISC和RISC的比较</h3><p>和CISC相比，RISC的优点：</p>\n<ul>\n<li>RISC更能充分利用VLSI（超大规模集成电路）芯片的面积（减少了控制逻辑）</li>\n<li>RISC更能提高运算速度</li>\n<li>RISC便于设计，可以降低成本，提高可靠性</li>\n<li>有利于编译优化<br><img data-src=\"/f9.jpg\"></li>\n</ul>\n",
            "tags": [
                "指令系统"
            ]
        },
        {
            "id": "http://example.com/2025/07/01/computer-science/computer-organization/ch3/",
            "url": "http://example.com/2025/07/01/computer-science/computer-organization/ch3/",
            "title": "Ch3",
            "date_published": "2025-06-30T16:00:00.000Z",
            "content_html": "<h1 id=\"Ch3-存储系统\"><a href=\"#Ch3-存储系统\" class=\"headerlink\" title=\"Ch3 存储系统\"></a>Ch3 存储系统</h1><h2 id=\"存储器概述\"><a href=\"#存储器概述\" class=\"headerlink\" title=\"存储器概述\"></a>存储器概述</h2><h3 id=\"存储器的分类\"><a href=\"#存储器的分类\" class=\"headerlink\" title=\"存储器的分类\"></a>存储器的分类</h3><ol>\n<li>按层次分</li>\n</ol>\n<ul>\n<li>主存（小、快、成本高）</li>\n<li>辅存（大、慢、成本低）</li>\n<li>Cache</li>\n</ul>\n<ol start=\"2\">\n<li>按存储介质分</li>\n</ol>\n<ul>\n<li>磁表面存储器（磁盘、磁带）</li>\n<li>磁芯存储器</li>\n<li>半导体存储器（MOS型、双极型）</li>\n<li>光存储器（光盘）</li>\n</ul>\n<ol start=\"3\">\n<li>按存储方式分</li>\n</ol>\n<ul>\n<li>RAM （随机存储器）:随机读取存储单元，存取时间与存储单元的物理位置无关。读写方便，主要用作主存和cache，分静态RAM和动态RAM。</li>\n<li>ROM （只读存储器）：只能读不能写，非易失性，随机读取。广义的ROM也可以通过电擦除进行写入(EEPROM)</li>\n<li>SAM （顺序存储器）：按顺序存储，存取时间与存储单元的物理位置有关</li>\n<li>DAM （直接存储器）：先选取信息所在区域，然后顺序存取。结合了RAM和SAM的特性（磁盘）</li>\n<li>Associated memory: 不根据地址而是根据存储内容来进行存取的存储器，可以实现快速地查找快表。既可以按照&#x3D;&#x3D;地址&#x3D;&#x3D;寻址也可以按照&#x3D;&#x3D;内容&#x3D;&#x3D;寻址（通常是某些字段）</li>\n<li>串行访问存储器：SAM和DAM都是，所以读写时间和物理位置有关</li>\n</ul>\n<ol start=\"4\">\n<li>按信息的可保存性分类</li>\n</ol>\n<ul>\n<li>易失性存储器：断电后丢失数据，如RAM</li>\n<li>非易失性存储器：断电后数据还在，如ROM，磁盘光盘</li>\n<li>破坏性读出：读出数据后数据被破坏</li>\n<li>非破坏性读出：读出数据后数据不改变</li>\n</ul>\n<h3 id=\"存储器的性能指标\"><a href=\"#存储器的性能指标\" class=\"headerlink\" title=\"存储器的性能指标\"></a>存储器的性能指标</h3><p>三个主要性能指标：存储容量、单位成本、存储速度</p>\n<ol>\n<li>容量 &#x3D; 存储字数 * 字长</li>\n<li>单位成本 &#x3D; 总成本&#x2F;总容量</li>\n<li>存储速度：<br>存取时间$T_a$: 启动一次存储器操作到完成该操作所经历的时间，分为读出时间和写入事件<br>存取周期$T_m$: 进行连续读&#x2F;写操作所允许的最短时间间隔<br>主存带宽$B_m$: b&#x2F;s, B&#x2F;s, word&#x2F;s<blockquote>\n<p>存取时间仅为完成一次操作的时间，而存取周期不仅包含操作时间，还包括操作后线路的恢复时间</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"多级层次的存储系统\"><a href=\"#多级层次的存储系统\" class=\"headerlink\" title=\"多级层次的存储系统\"></a>多级层次的存储系统</h3><p><img data-src=\"/f1.jpg\"><br>从上到下价格越来越低，速度越来越慢，容量越来越大，CPU访问频度越来越低<br><img data-src=\"/f2.jpg\"><br>存储时间与存储周期的关系</p>\n<ul>\n<li>透明（transparent）指的是某种机制或技术的存在对使用者来说是不可见或无感知的<br>主存-Cache之间的数据调用由硬件自动完成，对所有程序员均是透明的<br>主存-辅存的数据调用由硬件和操作系统共同完成，对应用程序员是透明的</li>\n</ul>\n<h2 id=\"主存储器\"><a href=\"#主存储器\" class=\"headerlink\" title=\"主存储器\"></a>主存储器</h2><p>存储元件：MOS管</p>\n<h3 id=\"SRAM-DRAM\"><a href=\"#SRAM-DRAM\" class=\"headerlink\" title=\"SRAM &amp; DRAM\"></a>SRAM &amp; DRAM</h3><p>RAM: SRAM静态随机存储器和DRAM动态随机存储器<br>&#x3D;&#x3D;主存主要是DRAM，Cache主要是SRAM&#x3D;&#x3D;，都易失</p>\n<p>DRAM芯片：使用栅极电容存储信息，只要一个晶体管，读写&#x3D;&#x3D;更慢&#x3D;&#x3D;，是&#x3D;&#x3D;破坏性读出&#x3D;&#x3D;，需要重写，&#x3D;&#x3D;成本低，集成度高，功耗低&#x3D;&#x3D;</p>\n<p>SRAM芯片：使用双稳态触发器存储信息（六晶体管MOS，RS, JK, D）。读写&#x3D;&#x3D;更快&#x3D;&#x3D;，是非破坏性读出，&#x3D;&#x3D;成本高，集成度低，功耗大&#x3D;&#x3D;<br><img data-src=\"/f4.jpg\"><br>栅极电容需要一直刷新给电容充电，触发器不需要刷新，只要不断电状态不会改变</p>\n<h4 id=\"DRAM的刷新\"><a href=\"#DRAM的刷新\" class=\"headerlink\" title=\"DRAM的刷新\"></a>DRAM的刷新</h4><ol>\n<li>多久需要刷新一次？ 刷新周期：一般为2ms</li>\n<li>每次刷新多少存储单元？以行为单位，每次刷新一行存储单元<br>——为什么要用行列地址？减少选通线的数量</li>\n<li>在什么时刻刷新？<br>有硬件支持，读出一行的信息后重新写入，占用1个读&#x2F;写周期<br>假设DRAM内部结构排列成128×128的形式，读&#x2F;写周期0.5us<br>2ms共 2ms&#x2F;0.5us &#x3D; 4000 个周期<br>三种刷新方式：<br><img data-src=\"/f5.jpg\"><br>刷新以行为单位，再生（重写）只需要恢复被读出来的存储单元<br>刷新由存储器独立完成，不需要CPU控制</li>\n</ol>\n<h5 id=\"DRAM的地址引脚复用技术\"><a href=\"#DRAM的地址引脚复用技术\" class=\"headerlink\" title=\"DRAM的地址引脚复用技术\"></a>DRAM的地址引脚复用技术</h5><p><img data-src=\"/f6.jpg\"><br>行列地址分成两次送，节省了一半的地址线<br>行列数优化原则：尽量使行、列数相同，且行数较少（因为按行刷新）<br>目前常用SDRAM（同步DRAM），数据交换同步于CPU的时钟信号，使得CPU不需要等待</p>\n<h3 id=\"ROM\"><a href=\"#ROM\" class=\"headerlink\" title=\"ROM\"></a>ROM</h3><p>结构简单、非易失性<br>类型：</p>\n<ol>\n<li>MROM 掩模式ROM<br>在芯片生产过程中写入，无法改变，可靠性高，急程度高，价格便宜，灵活性差</li>\n<li>PROM 一次可编程ROM<br>可以用专门的设备写入一次，一旦写入无法改变</li>\n<li>EPROM 可擦除可编程ROM<br>可以写入并多次改写，但是编程次数有限且时间长</li>\n<li>Flash<br>兼有RAM和ROM的优点，可以不加电长期保存信息，又能在线快速擦除和重写，价格便宜，急程度高，电可擦除重写且速度快<br>SSD 固态硬盘基于Flash，由控制单元和Flash组成，长期保存、快速擦除和重写，对比传统硬盘读写速度快。低功耗。但是价格高</li>\n</ol>\n<h3 id=\"主存储器的基本组成\"><a href=\"#主存储器的基本组成\" class=\"headerlink\" title=\"主存储器的基本组成\"></a>主存储器的基本组成</h3><p>核心部件：一个个存储0或1的存储单元构成的存储矩阵<br>访问主存时，CPU把地址送到MAR，MAR通过地址总线把地址送到主存中的地址寄存器，地址译码器进行译码，选中相应的内存单元，然后通过控制电路决定读&#x2F;写操作：</p>\n<ul>\n<li>读操作：将选中的内存单元的内容通过数据总线送到MDR中</li>\n<li>写操作：将MDR中的内容通过数据总线送到选中的内存单元中<br>MDR的位数和数据总线位数相同，通常等于存储字长；MAR的位数和地址总线位数相同</li>\n</ul>\n<h3 id=\"多模块存储器\"><a href=\"#多模块存储器\" class=\"headerlink\" title=\"多模块存储器\"></a>多模块存储器</h3><p>DRAM芯片的恢复时间比较长，有可能是存取时间的几倍（SRAM的恢复时间较短）。CPU的读写速度比主存快很多，主存恢复时间太长<br> —— 利用多个完全相同的存储模块并行工作来提高吞吐率：单体多字存储器，多体低位交叉存储器</p>\n<ul>\n<li>双端口RAM（408不考，了解即可）<br><img data-src=\"/f7.jpg\"></li>\n</ul>\n<ol>\n<li><p>单体多字存储器<br>一般一个存储单元只存储一个word，但是单体多字存储器一个存储单元存储多个word，然后读的时候一次性读取这多个字。好处是快，缺点是只有指令和数据连续存放时才能提高存取速度，否则造成不必要的读取。</p>\n</li>\n<li><p>&#x3D;&#x3D;多体并行存储器（重点）&#x3D;&#x3D;<br>分为高位交叉编址和低位交叉编址两种<br><img data-src=\"/f8.jpg\"><br>高位交叉编址每一块存储体的高位是一样的，实际上还是顺序存储。因此访问连续内存实际上访问的还是同一块存储体，并不能通过并行加快访问速度<br>低位交叉编址的每一块存储体低位相同，因此可以在恢复时间并行存取下一块内存的数据<br>存取周期为<code>T</code>, 存取时间为<code>r</code>, T &#x3D; r + 恢复时间<br>对于n个存储器并行访问的存储器：<br>采用高位交叉编址的时间为<code>n*T</code><br>低位交叉编址为<code>T + (n-1)*r</code></p>\n</li>\n</ol>\n<p><img data-src=\"/f9.png\"></p>\n<ul>\n<li>轮流启动：每个bank的存储位数等于数据总线的位数，此时采用轮流启动<ul>\n<li>对于低位交叉编址，要保证<code>m&gt;=T/r</code>，以保证流水线不间断</li>\n<li>理想情况下，m个bank的交叉存储器每隔<code>T/m</code>个周期可以读&#x2F;写一个数据，若相邻m次访问的当存地址出现在同一个模块内，则会发生访存冲突，此时需要延迟发生冲突的访问请求。</li>\n</ul>\n</li>\n<li>同时启动：如果m个bank的总位数加起来刚好等于数据总线的位数，则m个同时存&#x2F;取</li>\n</ul>\n<h2 id=\"主存储器与CPU的连接\"><a href=\"#主存储器与CPU的连接\" class=\"headerlink\" title=\"主存储器与CPU的连接\"></a>主存储器与CPU的连接</h2><h3 id=\"连接原理\"><a href=\"#连接原理\" class=\"headerlink\" title=\"连接原理\"></a>连接原理</h3><p>通过总线连接（控制、地址、数据）<br>传输速率 &#x3D; 总线宽度&#x2F;传输时间<br>地址总线的位数决定了可寻址的最大内存空间<br>控制总线指出总线周期的类型和本次输入输出完成的时刻<br>将多个芯片集成在内存条上，由多个内存条和主板上的ROM芯片组成计算机所需的主存空间，通过总线与CPU连接</p>\n<h3 id=\"主存容量的扩展\"><a href=\"#主存容量的扩展\" class=\"headerlink\" title=\"主存容量的扩展\"></a>主存容量的扩展</h3><p>数据总线宽度&gt;存储字长 —— 位扩展<br>地址总线宽度&gt;存储字数量所需的宽度<br><img data-src=\"/f10.jpg\"></p>\n<ol>\n<li><p>位扩展法：增加存储字长<br>由于数据总线宽度大于存储字长，存在浪费情况，必须进行位扩展使数据位数与数据总线位数相等<br>如图：<br><img data-src=\"/f11.jpg\"></p>\n</li>\n<li><p>字扩展法<br>地址总线存在浪费情况，对存储字的数量进行扩展<br>用多出来的地址线提供CS片选信号，决定输出的是哪个芯片的数据</p>\n</li>\n</ol>\n<ul>\n<li>线选法：n条多余的地址线，对应n个选片信号，地址空间不连续造成地址空间浪费（只能有一个1有效），电路简单<br><img data-src=\"/f13.jpg\"></li>\n<li>译码器选法：n条多余的线对应$2^n$个选片信号，地址空间可以连续<br><img data-src=\"/f12.jpg\"></li>\n</ul>\n<ol start=\"3\">\n<li>字、位同时扩展<br>既增加存储字的数量，又增加存储字长<br><img data-src=\"/f14.jpg\"></li>\n</ol>\n<h3 id=\"存储芯片的地址分配和片选\"><a href=\"#存储芯片的地址分配和片选\" class=\"headerlink\" title=\"存储芯片的地址分配和片选\"></a>存储芯片的地址分配和片选</h3><p>见上方线选法译码器选法</p>\n<h3 id=\"存储器与CPU的连接\"><a href=\"#存储器与CPU的连接\" class=\"headerlink\" title=\"存储器与CPU的连接\"></a>存储器与CPU的连接</h3><p>……<br>片选信号还与CPU的方寸控制信号$\\overline{MREQ}$有关（低电平有效），若CPU访问IO则此信号为高电平<br>MAR位数要看主存地址空间大小，而不能看实际上用了多少位</p>\n<h2 id=\"外部存储器\"><a href=\"#外部存储器\" class=\"headerlink\" title=\"外部存储器\"></a>外部存储器</h2><p>磁盘存储器是以磁盘为存储介质的存储器，优点：容量大，价格低；记录介质可重复使用；可以长期保存；非破坏性读出。缺点：存取速度慢；机械结构复杂；对工作环境要求高</p>\n<h3 id=\"磁盘存储器\"><a href=\"#磁盘存储器\" class=\"headerlink\" title=\"磁盘存储器\"></a>磁盘存储器</h3><ol>\n<li>磁盘存储器</li>\n</ol>\n<ul>\n<li>组成：磁盘驱动器，磁盘控制器，盘片<br><img data-src=\"/f15.jpg\"></li>\n<li>存储区域：&#x3D;&#x3D;扇区（也称块）是磁盘读写的最小单位&#x3D;&#x3D;，按块存取<ul>\n<li>磁头数(Heads)：一个记录面对应一个磁头</li>\n<li>柱面数(Cylinders)：表示每面盘片上的磁道数，不同记录面的相同位置的磁道构成一个柱面</li>\n<li>扇区数(Sectors)：每条磁道上有多少扇区</li>\n</ul>\n</li>\n<li>Disk Cache<ul>\n<li>在内存上的一片区域，用来缓冲被送到磁盘上的数据。优点：写磁盘时按簇进行，可以避免频繁地用小块数据写；中间结果数据写回之前可以被快速再次使用</li>\n</ul>\n</li>\n<li>磁记录原理<ul>\n<li>原理：当磁头和磁性记录介质有相对运动时，通过电磁转换完成读&#x2F;写操作。</li>\n<li>编码方法：按某种方案（规律），把一连串的二进制信息变换成存储介质磁层中一个磁化翻转状态的序列，并使读&#x2F;写控制电路容易、可靠地实现转换。</li>\n<li>磁记录方式：通常采用调频制（FM）和改进型调频制（MFM）的记录方式。</li>\n</ul>\n</li>\n<li>性能指标<ul>\n<li><p>磁盘的容量：一个磁盘所能存储的字节总数称为磁盘容量。磁盘容量有非格式化容量和格式化容量之分。<br>非格式化容量是指磁记录表面可以利用的磁化单元总数，非格式化容量 &#x3D; 记录面数 * 柱面数 * 每条磁道的磁化单元数<br>格式化容量是指按照某种特定的记录格式所能存储信息的总量，格式化容量 &#x3D; 记录面数 * 柱面数 * 每道扇区数 * 每个扇区的容量<br>&#x3D;&#x3D;格式化容量 &lt; 非格式化容量&#x3D;&#x3D;</p>\n</li>\n<li><p>记录密度:记录密度是指盘片单位面积上记录的二进制的信息量，通常以<code>道密度</code>、<code>位密度</code>和<code>面密度</code>表示。道密度是&#x3D;&#x3D;沿磁盘半径方向单位长度上的磁道数&#x3D;&#x3D;；位密度是&#x3D;&#x3D;磁道单位长度上能记录的二进制代码位数&#x3D;&#x3D;；面密度是位密度和道密度的乘积。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>&#x3D;&#x3D;磁盘所有磁道记录的信息量一定是相等的，并不是圆越大信息越多，故每个磁道的位密度都不同，越靠近圆心位密度越大&#x3D;&#x3D;</p>\n<ul>\n<li><p>平均存取时间：<br>&#x3D;&#x3D;平均存取时间 &#x3D; 寻道时间（磁头移动到目的磁道）+ 旋转延迟时间（磁头定位到所在扇区）+ 传输时间（传输数据所花费的时间）&#x3D;&#x3D;<br>&#x3D;&#x3D;寻道时间通常取从最外道到最内道时间的一半，旋转延迟时间通常取旋转半周的时间&#x3D;&#x3D;</p>\n</li>\n<li><p>数据传输率：磁盘存储器在单位时间内向主机传送数据的字节数，称为数据传输率<br>假设磁盘转速为r（转&#x2F;秒），每条磁道容量为N个字节，则数据传输率为$D_r&#x3D;rN$</p>\n</li>\n<li><p>磁盘地址<br><img data-src=\"/f16.jpg\"></p>\n</li>\n<li><p>磁盘的工作原理<br>硬盘的主要操作是寻址、读盘、写盘。每个操作都对应一个控制字，硬盘工作时，第一步是取控制字，第二步是执行控制字。<br>硬盘属于机械式部件，其读写操作是串行的，不可能在同一时刻既读又写，也不可能在同一时刻读两组数据或写两组数据。</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>RAID<br>将多个独立的物理磁盘组成一个独立的逻辑磁盘，数据分割交叉存储，并行访问。</li>\n</ol>\n<ul>\n<li>RAID0：无冗余和无校验的磁盘阵列。</li>\n<li>RAID1：镜像磁盘阵列。每份数据存两遍，成本太高</li>\n<li>RAID2：采用纠错的海明码的磁盘阵列。<br>逻辑上连续的几个bit物理上分散存储在各个盘中4bit信息位+3bit海明校验位——可纠正1bit错误<br>每个码字有 <code>m</code> 个信息位和 <code>r</code> 个冗余位，$ (m+r+1)≤2^r$<br>参考xyx学长的计网笔记：<br><img data-src=\"/f17.jpg\"></li>\n<li>RAID3：位交叉奇偶校验的磁盘阵列。前三个盘的奇偶校验位写在第四个盘上</li>\n<li>RAID4：块交叉奇偶校验的磁盘阵列。</li>\n<li>RAID5：无独立校验的奇偶校验磁盘阵列。在所有磁盘之间分条，并且每个数据块的奇偶校验块 (P) 写入到同一条带上<br>RAID1-RAID5数据不会损坏</li>\n</ul>\n<h3 id=\"固态硬盘-SSD\"><a href=\"#固态硬盘-SSD\" class=\"headerlink\" title=\"固态硬盘(SSD)\"></a>固态硬盘(SSD)</h3><ol>\n<li>特性<br>属于Flash memory, EEPROM<br>组成：闪存翻译层，存储介质<br><img data-src=\"/f18.jpg\"><br>&#x3D;&#x3D;数据以页为单位读写，以块为单位擦除&#x3D;&#x3D;只有整个块被擦除之后才能写这一页，若视图修改包含已有数据的页$P_i$，则这个快中所有含有有用数据的页必须被复制到新的空白的块中，才能对$P_i$进行写操作<br>SSD的优点：&#x3D;&#x3D;随机写很慢，随机读比机械磁盘块&#x3D;&#x3D;，没噪声，能耗低，抗震性好，安全性高</li>\n<li>Wear Leveling 磨损均衡<br>重复擦写块就会磨损坏，一般是几百次到几千次<br>(1) 动态磨损均衡：&#x3D;&#x3D;写入时&#x3D;&#x3D;优先选择擦除次数少的新闪存块，只在写入时触发，仅考虑可用空间（对于冷数据不包括在空间池中，减少了可以用的block数量）<br>(2) 静态磨损均衡：就算没有写入，SSD也会监测并自动进行数据分配，让老的闪存快以读为主，让新的块腾出空间，以写为主：将数据从写入&#x2F;擦除次数较低的block移动到其他block中，这样可以将低擦写次数的block释放出来，添加到可用可用空间池中，以便后续使用。仅覆盖单个闪存芯片单元</li>\n</ol>\n<h2 id=\"Cache\"><a href=\"#Cache\" class=\"headerlink\" title=\"Cache\"></a>Cache</h2><p>解决CPU和主存速度不一致问题，由SRAM组成，通常集成在CPU中</p>\n<h3 id=\"程序访问的局部性原理\"><a href=\"#程序访问的局部性原理\" class=\"headerlink\" title=\"程序访问的局部性原理\"></a>程序访问的局部性原理</h3><ul>\n<li>时间局部性：比如循环、数组（每次循环访问一次数组能体现时间局部性）</li>\n<li>空间局部性：最近的未来用到的信息很可能和正在使用的信息在存储空间上是临近的（顺序访问数组能体现空间局部性）<br>Cache利用局部性原理，将最近或频繁访问的数据复制到更快但容量较小的存储中，以便提高访问速度和系统性能。</li>\n</ul>\n<p>:::primary<br><strong>hit&#x2F;miss计算</strong><br>设$t_c$为访问一次Cache所需时间，$t_m$为访问一次内存所需时间，则Cache和主存同时被访问总时间为$t &#x3D; Ht_c + (1 - H)t_m$<br>若先访问Cache再访问主存则时间为：$t &#x3D; t_c + (1 - H)t_m$<br>:::</p>\n<h3 id=\"Cache工作原理\"><a href=\"#Cache工作原理\" class=\"headerlink\" title=\"Cache工作原理\"></a>Cache工作原理</h3><p>主存和Cache之间以&#x3D;&#x3D;块(Block)&#x3D;&#x3D;为单位进行数据交换</p>\n<h3 id=\"映射方式\"><a href=\"#映射方式\" class=\"headerlink\" title=\"映射方式\"></a>映射方式</h3><ol>\n<li><p>直接映射 Directed mapped<br><img data-src=\"/f20.jpg\"><br><img data-src=\"/f27.jpg\"><br>cache 行号 &#x3D; 主存块号 mod cache行数<br>物理地址结构：<br>| tag | index（行号） | byte offset |<br><img data-src=\"/f19.jpg\"><br>$$ index的位数 &#x3D; log_2(cache的block数) $$<br>$$ byte\\ offset的位数 &#x3D; log_2(cache的block的字节数) $$<br>$$ tag的位数 &#x3D; 32 - index的位数 - byte\\ offset的位数 $$<br>在32位系统中，一个word是4B；64位系统中，一个word是8B<br>Cache的一行构成：<br>| valid bit | dirty bit | tag | data |<br>+++primary example<br><img data-src=\"/f21.jpg\"><br><img data-src=\"/f22.jpg\"><br><img data-src=\"/f23.jpg\"><br><img data-src=\"/f24.jpg\"><br><img data-src=\"/f25.jpg\"><br><img data-src=\"/f26.jpg\"><br>+++</p>\n</li>\n<li><p>全相连 Full Associative<br>block can go anywhere in cache<br>主存地址：<br>| tag | byte offset |<br>好处是能降低冲突率，每次需要和所有block比较是否hit开销大，不适合大容量Cache</p>\n</li>\n<li><p>组相连 Set Associative<br><img data-src=\"/f28.jpg\"><br>物理地址构成：<br>| tag | set index | 块内偏移 |<br>set index的位数表示有多少组，<br>$$ setNum &#x3D;  \\frac{Cache大小}{blockSize * 路数} $$</p>\n</li>\n</ol>\n<p>+++primary<br>一个四路相联cache，CPU字长为4字节，内存和cache都是以字节编址，cache和内存交换单位为块，每个块大小为512字节，cache能够容纳1024个块。如果物理内存为32位地址:<br>set数 &#x3D; 1024&#x2F;4 &#x3D; 256<br>index位数 &#x3D; log2(256) &#x3D; 8<br>blockOffset位数 &#x3D; log2(512) &#x3D; 9<br>tag位数 &#x3D; 32 - 8 - 9 &#x3D; 17</p>\n<ul>\n<li>物理地址构成：| tag 17位 | set index 8位 | block offset 9 位 |</li>\n<li>计算内存地址FAB12389（16进制）在cache中可能的位置块号:<br>1111 1010 1011 0001 0010 0011 1000 1001<br>set index是10010001也就是145，所以可能的block号是145*4 &#x3D; 580, 581, 582, 583<br>+++<br><img data-src=\"/f29.jpg\"><br>&#x3D;&#x3D;n路组相连需要n个比较器，位数&#x3D;tag位数&#x3D;&#x3D;</li>\n</ul>\n<h3 id=\"替换算法\"><a href=\"#替换算法\" class=\"headerlink\" title=\"替换算法\"></a>替换算法</h3><ol>\n<li><p>Random Replacement<br>随机找一块替换，实现简单，命中率低</p>\n</li>\n<li><p>FIFO<br>选择最早进入的Cache行的进行替换</p>\n</li>\n<li><p>LRU<br>选择近期用得最少的Cache行进行替换，对每个Cache行维护一个计数器表示访问的次数，每次替换掉数值最小的。<br>2-way Cache要用1 bit来记录，4-way Cache要用2 bit来记录<br>+++primary<br>4-way Cache，有五个块映射到Cache同一组，访问顺序是{1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5}<br><img data-src=\"/f30.jpg\"><br>+++</p>\n</li>\n</ol>\n<h3 id=\"Cache一致性问题\"><a href=\"#Cache一致性问题\" class=\"headerlink\" title=\"Cache一致性问题\"></a>Cache一致性问题</h3><p>当write hit时：</p>\n<ol>\n<li>Write through 直写&#x2F;全写法<br>Cache hit的时候，CPU不仅写入Cache，而且写入主存<br>为了减少写入主存的时间小号，增加一个write buffer，CPU同时写入Cache和write buffer，write buffer采用FIFO，当write buffer满时，将write buffer中的数据写入主存</li>\n<li>Write back 写回法<br>write hit时，只把数据写入Cache，只有此块被replace的时候才写入主存。减少了方寸次数，所以给cache行设置一个dirty bit，CPU写数据时将dirty bit置为1表示此块被修改过，repalce时需要写入主存</li>\n</ol>\n<p>write miss时：</p>\n<ol>\n<li>Write Allocate 写分配法<br>如果发生write miss，会从内存中加载对应的数据块到 cache 中，然后进行写操作。和 write-back搭配使用，把后续对该块的修改都缓存在 cache 中</li>\n<li>Not-Write-Allocate 非写分配法<br>只更新主存不把主存写入Cache，适用于 write-through，因为即使写入 cache，也会马上写回内存，没必要占用 cache 空间。</li>\n</ol>\n<p>&#x3D;&#x3D;write through通常和not-write-allocate一起用，write back 通常和write allocate一起用&#x3D;&#x3D;</p>\n<h4 id=\"使用分离的指令Cache和数据Cache\"><a href=\"#使用分离的指令Cache和数据Cache\" class=\"headerlink\" title=\"使用分离的指令Cache和数据Cache\"></a>使用分离的指令Cache和数据Cache</h4><p>+++primary<br><img data-src=\"/f31.jpg\"><br><img data-src=\"/f32.jpg\"><br>+++</p>\n<h2 id=\"虚拟存储器\"><a href=\"#虚拟存储器\" class=\"headerlink\" title=\"虚拟存储器\"></a>虚拟存储器</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>主存和辅存共同构成了虚拟存储器，对于应用程序员而言，虚拟存储器是透明的。（对OS开系统程序员不透明，他们必须管理TLB）<br>虚拟存储器具有主存的速度和辅存的容量</p>\n<ul>\n<li>允许多个程序之间高效、安全地共享内存</li>\n<li>允许单个程序使用超过内存容量的内存</li>\n</ul>\n<p>+++primary<br>实地址&#x3D;主存页号+页内字地址<br>虚地址&#x3D;虚存页号+页内字地址<br>辅存地址&#x3D;磁盘号+盘面号+磁道号+扇区号<br>+++</p>\n<p>虚拟存储器缺页访问辅存的代价很大，当程序访问某个virtual page时，如果该页当前不在主存中，就会发生page fault，操作系统需要从辅存加载该页到主存，访问很慢所以访问代价大。因此采用<code>full associative</code>允许virtual page可以加载到主存的任何一个空闲物理页框中，提高命中率。<br>写操作中处理一致性问题时采用 <code>write back</code>。主存中的页面状态维护一个dirty标志位。当操作系统需要将该页替换出主存时，会检查该页的脏页标志：如果dirty，说明主存页面数据修改过，必须写回辅存；如果dirty为0，说明主存数据和辅存一致，直接丢弃主存页面，无需写回</p>\n<h3 id=\"页式虚拟存储器\"><a href=\"#页式虚拟存储器\" class=\"headerlink\" title=\"页式虚拟存储器\"></a>页式虚拟存储器</h3><ul>\n<li>基本单位：页<br>主存和虚拟地址空间被划分为相同大小的页，主存中的成为物理页（实页、页框、frame），虚拟地址空间中的页称为虚拟页（虚页）<br>页表(page table)记录了程序的虚页调入贮存时被安排在主存中的位置<br>一般的page大小从4KiB ~ 64KiB不等</li>\n</ul>\n<ol>\n<li>页表(page table)<br>页表放在主存中。<br><img data-src=\"/f33.jpg\"><br>有效位（Valid Bit）：用于指示一个页面是否已经被加载到主存中。如果有效位被设置为1，这意味着对应的页面已经在物理内存中，可以立即被访问。如果有效位为0，则表示该页面当前不在内存中，可能需要从磁盘或其他存储设备中调入。当一个程序尝试访问一个页面时，操作系统会检查页表中的有效位，如果发现页面不在内存中，就会触发一个page fault，然后将页面从磁盘加载到内存中。<br>引用位（Reference Bit）：引用位主要用于页面置换算法中，它记录了页面最近是否被访问过。每当一个页面被访问时，操作系统会将该页面的引用位置为1。随着时间的推移，如果一个页面长时间没有被访问，它的引用位可能会被清零。当操作系统需要选择一个页面进行置换时，它可能会优先选择那些引用位为0的页面。</li>\n</ol>\n<p>转换过程：当一个程序尝试访问内存时，它会生成一个虚拟地址。虚拟地址包含两部分信息：页号（Page Number）和页内偏移（Offset）。用VPN作为索引查询page table，检查valid bit是否为1，从页表条目中获取PPN，PPN和page offset组合成物理地址。</p>\n<blockquote>\n<p>页式虚拟存储器的优点：页面长度固定，页表简单，调入方便<br>缺点：产生内碎片</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>地址转换<br><img data-src=\"/f34.png\"><br>每个进程都有一个页表基址寄存器，存放该进程的页表首地址。然后通过VPN作为索引在页表中查找对应的页表项。物理地址&#x3D;物理页号 + 页内地址。</p>\n</li>\n<li><p>TLB（快表）<br>为了减少访问主存的此书，TLB相当于page table的cache。<br>TLB用<code>SRAM</code>实现，不在主存中，工作原理类似于Cache，通常采用full associative或者set associative。<br><img data-src=\"/f35.jpg\"><br>通过VPN查找TLB和Cache的查找一样，如果是全相连则直接比较tag，如果是组相连则通过低位查找set，然后用高位和tag比较。</p>\n</li>\n<li><p>具有TLB和Cache的多级存储系统<br><img data-src=\"/f36.jpg\"><br>查找时，TLB和page table可以同步进行，如果在TLB中找到了，page table的查找就作废。</p>\n</li>\n</ol>\n<p><img data-src=\"/f37.jpg\"></p>\n<h3 id=\"段式虚拟存储器\"><a href=\"#段式虚拟存储器\" class=\"headerlink\" title=\"段式虚拟存储器\"></a>段式虚拟存储器</h3><p><img data-src=\"/f38.jpg\"><br>按程序的逻辑结构划分，段的长度因程序而异。虚拟地址分为段号和段内地址。虚地址和实地址的转换依靠段表。<br>段表每行记录某个段的&#x3D;&#x3D;段号、有效位、段长度、段起始地址&#x3D;&#x3D;。<br>段表本身也是段，一般驻留在主存中<br>&#x3D;&#x3D;分页对程序员是透明的，分段对程序员是不透明的&#x3D;&#x3D;</p>\n<blockquote>\n<p>段式虚拟存储器的优点：具有逻辑独立性，易于编译、管理、修改和保护，便于多道程序的共享<br>缺点：产生外碎片</p>\n</blockquote>\n<h3 id=\"段页式虚拟存储器\"><a href=\"#段页式虚拟存储器\" class=\"headerlink\" title=\"段页式虚拟存储器\"></a>段页式虚拟存储器</h3><p>把程序按逻辑结构分段，再在每段划分固定大小的页。因此段的长度必须是页长度的整数倍，段的起点必须是某一页的起点。<br>虚地址分为&#x3D;&#x3D;段号，段内页号，页内地址&#x3D;&#x3D;</p>\n<ul>\n<li>访问流程：从段表基址寄存器（STBR） 中读取段表的起始地址，用段号（s）作为索引，在段表中查找第 s 个表项，从该表项中取出该段对应的页表起始地址（即页表基址），与段内页号合成得到页表地址（页表项地址 &#x3D; PTBR + p × 页表项大小），读取第 p 个页表项得到物理页号（PPN），和页内地址合成得到物理地址</li>\n</ul>\n",
            "tags": [
                "存储系统"
            ]
        },
        {
            "id": "http://example.com/2025/07/01/computer-science/computer-organization/%E9%94%99%E9%A2%98%E9%9B%86%E5%90%88/",
            "url": "http://example.com/2025/07/01/computer-science/computer-organization/%E9%94%99%E9%A2%98%E9%9B%86%E5%90%88/",
            "title": "错题集合",
            "date_published": "2025-06-30T16:00:00.000Z",
            "content_html": "<h1 id=\"错题集合\"><a href=\"#错题集合\" class=\"headerlink\" title=\"错题集合\"></a>错题集合</h1><h2 id=\"Ch2\"><a href=\"#Ch2\" class=\"headerlink\" title=\"Ch2\"></a>Ch2</h2><ol>\n<li>某计算机字长为8位，CPU中有一个8位加法器，已知无符号数x&#x3D;69, y&#x3D;38，若在该加法器中计算x-y，则加法器的两个输入短信息和输入的低位进位信息分别为（）</li>\n</ol>\n<ul>\n<li>0100 0101, 1101 1001, 1 <blockquote>\n<p>无符号数减法，在加法器中输入x的原码，y的取反和1</p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"2\">\n<li>减法指令 “sub R1, R2, R3” 的功能为 “(R1) - (R2) -&gt; R3”, 该指令执行后将生成进位&#x2F;借位标志CF和溢出标志OF，若(R1) &#x3D; FFFF FFFFH, R2 &#x3D; FFFF FFF0H, 则该减法指令执行后，CF和OF分别为：</li>\n</ol>\n<ul>\n<li>CF &#x3D; 0, OF &#x3D; 0</li>\n</ul>\n<ol start=\"3\">\n<li>已知x, y为int类型，当x &#x3D; 100, y &#x3D; 200时，执行 “x - y”指令得到的溢出标志OF和结尾标志CF分别为0，1，那么当x &#x3D; 1-, y &#x3D; -20时，执行该指令得到的OF和CF分别为：</li>\n</ol>\n<ul>\n<li>OF &#x3D; 0, CF &#x3D; 1<blockquote>\n<p>ALU生成标志位时只负责计算，不管运算对象是有符号数还是无符号数。CF&#x3D;1表示当做无符号数运算时溢出，OF&#x3D;1表示当做有符号数运算时溢出。当做有符号数，10-(-20)没问题，所以OF&#x3D;0；把它俩当做无符号数的时候，x &#x3D; 10 &#x3D; 0000 0000 0000 0000 0000 0000 0000 1010，y &#x3D; -20 &#x3D; 1111 1111 1111 1111 1111 1111 1110 1100，此时x &lt; y，所以CF&#x3D;1。</p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"4\">\n<li>下列关于整数乘法运算的叙述中，错误的是：D</li>\n</ol>\n<ul>\n<li>A. 用阵列乘法器实现的乘运算可以在一个时钟周期内完成 –正确，因为是组合逻辑理论上可以在一个clc里完成</li>\n<li>B. 用ALU和移位器实现的乘运算无法在一个时钟周期内完成</li>\n<li>C. 变量与常数的乘运算可编译优化为若干移位及家&#x2F;减运算指令</li>\n<li>D. 两个变量的乘运算无法编译转换为移位及加法等指令的循环实现</li>\n</ul>\n<h2 id=\"Ch4\"><a href=\"#Ch4\" class=\"headerlink\" title=\"Ch4\"></a>Ch4</h2><ol>\n<li>简化地址结构的方式是尽量采用： 隐含寻址</li>\n</ol>\n",
            "tags": [
                "错题"
            ]
        },
        {
            "id": "http://example.com/2025/05/14/computer-science/computer-organization/ch2/",
            "url": "http://example.com/2025/05/14/computer-science/computer-organization/ch2/",
            "title": "Ch2",
            "date_published": "2025-05-13T16:00:00.000Z",
            "content_html": "<h1 id=\"Ch2-数据的表示和运算\"><a href=\"#Ch2-数据的表示和运算\" class=\"headerlink\" title=\"Ch2 数据的表示和运算\"></a>Ch2 数据的表示和运算</h1><h2 id=\"2-1-进位计数制及其相互转换\"><a href=\"#2-1-进位计数制及其相互转换\" class=\"headerlink\" title=\"2.1 进位计数制及其相互转换\"></a>2.1 进位计数制及其相互转换</h2><h3 id=\"2-1-1\"><a href=\"#2-1-1\" class=\"headerlink\" title=\"2.1.1\"></a>2.1.1</h3><ul>\n<li>十进制二进制八进制十六进制转换<ul>\n<li>略</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-1-2-定点数的编码表示\"><a href=\"#2-1-2-定点数的编码表示\" class=\"headerlink\" title=\"2.1.2 定点数的编码表示\"></a>2.1.2 定点数的编码表示</h3><ul>\n<li>定点数一般表示定点小数和定点整数，小数是符号位.xxx，整数是符号位xxxx.0</li>\n<li><blockquote>\n<p>感觉不是什么重要的东西，浮点数表示比较重要</p>\n</blockquote>\n</li>\n<li>原码，反码，补码<ul>\n<li>正数的原码反码补码相同</li>\n<li>原码表示的范围为 $-2^n+1 ~ 2^n-1$</li>\n<li>补码表示的范围为 $-2^n ~ 2^n-1$</li>\n<li>负数的原码是1+绝对值，反码是1+绝对值取反，补码是反码+1</li>\n</ul>\n</li>\n<li>移码：用来表示浮点数的阶码，只能表示整数<ul>\n<li>一般用移码表示浮点数的阶码，用补码表示定点整数<br>$$ [x]_移 &#x3D; 2^n + x $$<br>移码就是在真值x前面加一个offset，比如取offset为2^7，就在补码的第8位加上1</li>\n<li>比如正数10101，移码是10010101，负数-10101的补码是11101011，所以移码是01101011</li>\n<li>移码的作用是&#x3D;&#x3D;保持数据原有的大小顺序&#x3D;&#x3D;，移码大真值大，移码小真值小，所以可以直观地进行比较<br>:::warning<br>相同位数的补码和移码表示具有相同的数据表示范围，区别只是表示方法不同<br>补码与移码只差一个符号位。同一个数的补码和移码表示，其数值部分相同，而符号位相反。<br>:::</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-1-3-整数表示\"><a href=\"#2-1-3-整数表示\" class=\"headerlink\" title=\"2.1.3 整数表示\"></a>2.1.3 整数表示</h3><p>略</p>\n<h3 id=\"2-1-4\"><a href=\"#2-1-4\" class=\"headerlink\" title=\"2.1.4\"></a>2.1.4</h3><p>c中的强制转换<br>short转成unsigned short直接把二进制看成unsigned short，比如-1变成65535<br>int变成short直接截断<br>小字长转大字长不会改变值，如果是unsigned就会在前面补0，如果是有符号数就在前面补符号位<br>short转unsigned int，先对short进行符号扩展到int，再把它当做unsigned int，如果是unsigned short转int，就进行零扩展再看成int……</p>\n<p>一些题目<br>+++info example<br>;;;id3 t1<br>若$[x]_补 &#x3D; 1,x_1x_2x_3x_4x_5x_6$,其中$x_i$取0或1，若要x&gt;-32，应当满足：<br>C. $x_1$为1，$x_2…x_6$中至少有一位为1<br>1100000是-32，要比-32大所以绝对值要小，所以数值部分要大，所以$x_1$必须是1,后面随便有个1就行<br>;;;<br>;;;id3 t2<br>设x为正数，$[x]_补 &#x3D; 1,x_1x_2x_3x_4x_5$,若要x&lt;-16，应当满足：<br>C. $x_1$必须为0，其它任意<br>110000是-16，要小于-16所以数值部分绝对值要小，所以只要$x_1$为0就比-16小<br>;;;<br>;;;id3 t3<br>一个8位的二进制整数由2个“0”和6个“1”组成，采用补码或者移码表示，则<br>若采用移码表示，偏置值为127，则此整数最小为-64（偏置为127需要在补码加上1111111，&#x3D;&#x3D;要让数值最小，应该把1放低位&#x3D;&#x3D;，所以移码是00111111，补码是10111111是-64）</p>\n<blockquote>\n<p>：前面说过，移码大真值大，移码小真值小，所以要让数值最小把1放低位就行了</p>\n</blockquote>\n<p>若采用补码表示，则此整数最小为-97（10011111&#x3D;-97）<br>;;;<br>;;;id3 比较大小的方法<br>对于无符号数，数值大的数就大<br>对于有符号数的原码和反码比较大小：先看正负然后看数值，反码数值转成原码再比<br>对于补码比较大小，正数正常比较，负数数值部分越小，绝对值越大（前面1更多的数的绝对值越小，所以11111111是-1）<br>;;;<br>+++</p>\n<h2 id=\"2-2-运算方法和运算电路\"><a href=\"#2-2-运算方法和运算电路\" class=\"headerlink\" title=\"2.2 运算方法和运算电路\"></a>2.2 运算方法和运算电路</h2><h3 id=\"2-2-1-基本运算部件\"><a href=\"#2-2-1-基本运算部件\" class=\"headerlink\" title=\"2.2.1 基本运算部件\"></a>2.2.1 基本运算部件</h3><h4 id=\"一位全加器\"><a href=\"#一位全加器\" class=\"headerlink\" title=\"一位全加器\"></a>一位全加器</h4><ul>\n<li>用真值表实现的：进位C，和S<table>\n<thead>\n<tr>\n<th align=\"center\">A</th>\n<th align=\"center\">B</th>\n<th align=\"center\">Cin</th>\n<th align=\"center\">Cout</th>\n<th align=\"center\">S</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody></table>\n<ul>\n<li>可以用卡诺图或者直接理解<br><img data-src=\"/img2.jpg\"><br>$$<br>\\begin{aligned}<br>S &amp;&#x3D; \\overline{A} , \\overline{B} , C_i + \\overline{A} , B , \\overline{C_i} + A , \\overline{B} , \\overline{C_i} + A , B , C_i \\<br>&amp;&#x3D; A \\oplus B \\oplus C_i<br>\\end{aligned}<br>$$<br>$$<br>\\begin{aligned}<br>Co &amp;&#x3D; AB + A \\overline{B} C_i + \\overline{A} B C_i \\<br>&amp;&#x3D; AB + (A \\oplus B) \\cdot C_i<br>\\end{aligned}<br>$$</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"串行进位加法器\"><a href=\"#串行进位加法器\" class=\"headerlink\" title=\"串行进位加法器\"></a>串行进位加法器</h4><ul>\n<li>把n个一位全加器连起来<br><img data-src=\"/img3.png\"><br>Carry Propagation &amp; Delay</li>\n</ul>\n<h4 id=\"并行进位加法器\"><a href=\"#并行进位加法器\" class=\"headerlink\" title=\"并行进位加法器\"></a>并行进位加法器</h4><p>对Cin进行look ahead</p>\n<p><img data-src=\"/img4.png\"></p>\n<p>前面提到：<br>$$<br>\\begin{aligned}<br>Co &amp;&#x3D; AB + A \\overline{B} C_i + \\overline{A} B C_i \\<br>   &amp;&#x3D; AB + (A \\oplus B) \\cdot C_i<br>\\end{aligned}<br>$$<br>下一位的Cin等于上一位的Cout，所以可以进行look ahead，这里让<br>$$<br>\\begin{aligned}<br>G_i &amp;&#x3D; A_iB_i<br>\\end{aligned}<br>$$<br>$$<br>\\begin{aligned}<br>P_i &amp;&#x3D; A_i \\oplus B_i<br>\\end{aligned}<br>$$<br>所以<br>$$<br>\\begin{aligned}<br>C_{i+1} &amp;&#x3D; G_i + P_iC_i<br>\\end{aligned}<br>$$<br>$$<br>\\begin{aligned}<br>S_i &amp;&#x3D; P_i \\oplus C_i<br>\\end{aligned}<br>$$<br>就能得到超前进位的效果</p>\n<h4 id=\"带标志加法器\"><a href=\"#带标志加法器\" class=\"headerlink\" title=\"带标志加法器\"></a>带标志加法器</h4><p><img data-src=\"/img5.jpg\"></p>\n<ul>\n<li>溢出标志 $OF &#x3D; C_n  \\oplus C_{n-1}$，只能判断有符号数是否溢出<br>-两个正数加起来变成负数或者两个负数加起来变成正数，就会溢出<table>\n<thead>\n<tr>\n<th align=\"center\">A</th>\n<th align=\"center\">B</th>\n<th align=\"center\">$C_{n-1}$</th>\n<th align=\"center\">F</th>\n<th align=\"center\">$C_n$</th>\n<th align=\"center\">OF</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<blockquote>\n<p>第二行A&#x3D;0, B&#x3D;0, F&#x3D;1，正+正&#x3D;负<br>  第七行A&#x3D;0, B&#x3D;1, F&#x3D;0，负+负&#x3D;正<br>  所以OF&#x3D;1，表示有溢出<br>  观察发现$OF &#x3D; C_{n-1}  \\oplus C_n$</p>\n</blockquote>\n<ul>\n<li>符号标志 $SF &#x3D; F_{n-1}$，输出的最高位决定有符号数的正负</li>\n<li><code>CF</code>进位&#x2F;借位标志：用于判断无符号数的加减运算是否溢出<ul>\n<li>$CF &#x3D; Cin \\oplus Cout$</li>\n<li>此处的Cin和Cout表示最开始的输入和最后的输出，还没理解</li>\n</ul>\n</li>\n<li><code>ZF</code>零标志 当且仅当所有F&#x3D;0时为1，否则为0（把所有F作或非）</li>\n<li><code>SF</code>符号标志位,结果为负，即符号位为1时SF&#x3D;1，否则为0<br>具体可以看这篇：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dhYmJ5X19fXy9hcnRpY2xlL2RldGFpbHMvODA4MjU1NDk=\">https://blog.csdn.net/gabby____/article/details/80825549</span></li>\n</ul>\n<h4 id=\"ALU\"><a href=\"#ALU\" class=\"headerlink\" title=\"ALU\"></a>ALU</h4><p>略</p>\n<h3 id=\"2-2-2-定点数的移位运算\"><a href=\"#2-2-2-定点数的移位运算\" class=\"headerlink\" title=\"2.2.2 定点数的移位运算\"></a>2.2.2 定点数的移位运算</h3><ul>\n<li>左移一位*2，右移一位&#x2F;2</li>\n<li>逻辑移位：移完直接补0<ul>\n<li>无符号数若高位的1移出，则发生溢出</li>\n</ul>\n</li>\n<li>算数移位：有符号数右移时，补符号位，左移直接移，如果高位和符号位不同，则发生溢出</li>\n</ul>\n<h3 id=\"定点数的加减运算\"><a href=\"#定点数的加减运算\" class=\"headerlink\" title=\"定点数的加减运算\"></a>定点数的加减运算</h3><p>补码相加减，略<br>主要是溢出判断：符号相同的数相加或者符号相异的数相减会发生溢出</p>\n<ul>\n<li>一位符号位（参考前面OF）</li>\n<li>双符号位（模4补码）<ul>\n<li>符号位左边那一位表示正确的符号，0为正，1为负；右边那一位如果和左边的相同，如 “00”表示正且无溢出，”11”表示负且无溢出。如果右边那一位与左边那一位不一样，则表示有溢出</li>\n<li>溢出逻辑判断：若V为0则无溢出，V为1则溢出</li>\n<li>&#x3D;&#x3D;存储的时候，模4补码只需要一位符号位&#x3D;&#x3D;，因为任何一个正确的数值它的两个符号位是相同的。它只是把两个模4补码的数送往ALU进行运算的时候，把符号位同时送入ALU的双符号位中，即&#x3D;&#x3D;只在ALU中采用双符号位&#x3D;&#x3D;<br>$$<br>V &#x3D; S_{s1} \\oplus S_{s2}<br>$$<br>例子看这篇写的挺清楚：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bl9ib3lfYm95X3N1bi9hcnRpY2xlL2RldGFpbHMvODc5MTcwMjA=\">https://blog.csdn.net/sun_boy_boy_sun/article/details/87917020</span><br>总之两位不同则有溢出</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"定点数的乘除运算\"><a href=\"#定点数的乘除运算\" class=\"headerlink\" title=\"定点数的乘除运算\"></a>定点数的乘除运算</h3><p>略，列竖式即可</p>\n<h3 id=\"浮点数的表示与运算\"><a href=\"#浮点数的表示与运算\" class=\"headerlink\" title=\"浮点数的表示与运算\"></a>浮点数的表示与运算</h3><ol>\n<li>浮点数的表示格式<br>$$<br>N &#x3D; (-1)^s \\cdot M \\cdot R^E<br>$$<br>s符号，M尾数，E阶码，R基数</li>\n<li>浮点数的表示范围<br>范围关于原点对称，运算结果大于最大正数时成为正上溢，小遇绝对值最大负数是成为负上溢，统称上溢。运算结果在0-最小整数之间成为正下溢，负数同理，统称下溢（原因是精度不够）</li>\n<li>浮点数的规格化<br>化成$1.xxxxx… \\cdot 2^n$的形式</li>\n<li>IEEE754<br>符号，阶码，尾数<br>32位单精度：1 8 23，偏置为$2^7-1&#x3D;127$，真值为$(-1)^s \\cdot 2^{e-127} \\cdot (1.M)$<br>单精度表示的最小值为$1 \\cdot 2^{1-127} \\cdot (1.000…) &#x3D; 2^{-126}$，最大值为$1 \\cdot 2^{254-127} \\cdot (1.111…) &#x3D; (2 - 2^{-23}) \\cdot 2^{127}$}<br>64位双精度：1 11 52，偏置为$2^{10}-1&#x3D;1023$，真值为$(-1)^s \\cdot 2^{e-1023} \\cdot (1.M)$，最大值为$1 \\cdot 2^{2046-1023} \\cdot (1.111…) &#x3D; (2 - 2^{-52}) \\cdot 2^{1023}$<br>阶码全为0或者全为1有特殊意义<br><img data-src=\"/f1.jpg\"><br>阶码全1尾数不全0表示无穷大<br>阶码全1尾数全0表示NaN<br>阶码全0尾数不全0表示非规格化数，隐藏位为0（精度不够表示，需要特殊处理）</li>\n</ol>\n<h3 id=\"浮点数的加减运算\"><a href=\"#浮点数的加减运算\" class=\"headerlink\" title=\"浮点数的加减运算\"></a>浮点数的加减运算</h3><ol>\n<li>对阶</li>\n<li>尾数相加减</li>\n<li>尾数规格化，修改阶数</li>\n<li>舍入</li>\n</ol>\n<ul>\n<li>就近舍入：舍入为最近的可表示数，当结果是两个可表示数的中间时，选择结果为偶数</li>\n<li>正向舍入：朝数轴正无穷方向舍入，取右边最近的可表示数</li>\n<li>负向舍入：和正向相反</li>\n<li>截断法：直接截取所需位数，是一种趋向原点的舍入</li>\n</ul>\n<ol start=\"5\">\n<li>溢出判断<br>对阶码加减时要判断是否溢出</li>\n</ol>\n",
            "tags": [
                "数据的表示与运算"
            ]
        },
        {
            "id": "http://example.com/2025/05/13/computer-science/computer-organization/ch1/",
            "url": "http://example.com/2025/05/13/computer-science/computer-organization/ch1/",
            "title": "Ch1",
            "date_published": "2025-05-12T16:00:00.000Z",
            "content_html": "<blockquote>\n<p>计组考研复习笔记，参考资料：王道，zju数逻&#x2F;计组&#x2F;体系课程ppt<br>怕学完忘了写个笔记保留一下顺便加深印象x<br>王道书写得好烂、、</p>\n</blockquote>\n<h1 id=\"Ch1-计算机系统概述\"><a href=\"#Ch1-计算机系统概述\" class=\"headerlink\" title=\"Ch1 计算机系统概述\"></a>Ch1 计算机系统概述</h1><h2 id=\"1-1-计算机发展历程\"><a href=\"#1-1-计算机发展历程\" class=\"headerlink\" title=\"1.1 计算机发展历程\"></a>1.1 计算机发展历程</h2><ul>\n<li>四代计算机：电子管-&gt;晶体管-&gt;集成电路-&gt;超大规模集成电路</li>\n<li>摩尔定律：集成电路上可以容纳的晶体管数目在大约每经过18个月到24个月便会增加一倍</li>\n</ul>\n<h2 id=\"1-2-计算机系统层次结构\"><a href=\"#1-2-计算机系统层次结构\" class=\"headerlink\" title=\"1.2 计算机系统层次结构\"></a>1.2 计算机系统层次结构</h2><ul>\n<li>计算机系统：硬件+软件</li>\n<li>对于某一功能，既能用软件实现又能用硬件实现，称为软、硬件在逻辑功能上是等价的</li>\n</ul>\n<h3 id=\"1-2-2-硬件\"><a href=\"#1-2-2-硬件\" class=\"headerlink\" title=\"1.2.2 硬件\"></a>1.2.2 硬件</h3><ul>\n<li>冯·诺依曼机的特点：<ul>\n<li>采用“存储程序”的工作方式</li>\n<li>冯·诺依曼计算机由五大部件组成：运算器、控制器、存储器、输入设备和输出设备</li>\n<li>指令和数据以同等地位存储在存储器中</li>\n<li>指令和数据均用二进制代码表示</li>\n<li>指令由操作码和地址码组成</li>\n<li><img data-src=\"/img1.png\"></li>\n</ul>\n</li>\n<li>计算机的功能部件：<ul>\n<li>输入设备</li>\n<li>输出设备</li>\n<li>存储器：主存+外存<ul>\n<li>CPU能直接访问的是主存</li>\n<li><img data-src=\"/img2.jpg\"></li>\n<li>MAR位10位则最多有$2^{10}$个存储单元</li>\n<li>在现代计算机中MAR和MDR存在CPU中</li>\n</ul>\n</li>\n<li>运算器：进行算术运算和逻辑运算<ul>\n<li>核心是ALU：通用寄存器有&#x3D;&#x3D;累加器(ACC)，乘商寄存器(MQ)，操作数寄存器(X)&#x3D;&#x3D;，变址寄存器(IX)，基址寄存器(BR)等，前三个必备</li>\n<li>程序状态寄存器(PSW)</li>\n<li><img data-src=\"/img3.jpg\"></li>\n</ul>\n</li>\n<li>控制器：由PC, IR和control unit组成<ul>\n<li>: RISCV控制器</li>\n<li><img data-src=\"/img4.png\"></li>\n</ul>\n</li>\n<li>CPU由运算器、控制器和cache组成</li>\n<li>总线有地址总线、数据总线、控制总线</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-3-软件\"><a href=\"#1-2-3-软件\" class=\"headerlink\" title=\"1.2.3 软件\"></a>1.2.3 软件</h3><ul>\n<li>组成：系统软件(OS, DBMS, 编译器, …)+应用软件</li>\n<li>语言：汇编语言、机器语言、高级语言<ul>\n<li>汇编器：把汇编语言翻译成机器语言</li>\n<li>编译器：把高级语言翻译成汇编语言或机器语言</li>\n<li>解释器：把高级语言翻译成&#x3D;&#x3D;机器语言&#x3D;&#x3D;(比如python)<br>  +++info example<br>  ;;;id3 题目<br>  :chestnut:<br>  将高级语言源程序转换为机器级目标代码文件的程序是 []。<br>  A. 汇编程序<br>  B. 链接程序<br>  C. 编译程序<br>  D. 解释程序<br>  ;;;<br>  ;;;id3 答案<br>  C. 编译程序<br>  因为解释程序不生成目标代码，编译器可以把高级语言翻译成汇编语言或者直接翻译成机器语言<br>  ;;;<br>  +++</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-4-计算机系统的层次结构\"><a href=\"#1-2-4-计算机系统的层次结构\" class=\"headerlink\" title=\"1.2.4 计算机系统的层次结构\"></a>1.2.4 计算机系统的层次结构</h3><ul>\n<li>看看就好</li>\n<li><img data-src=\"/img5.png\"></li>\n</ul>\n<h3 id=\"1-2-5-计算机系统的工作原理\"><a href=\"#1-2-5-计算机系统的工作原理\" class=\"headerlink\" title=\"1.2.5 计算机系统的工作原理\"></a>1.2.5 计算机系统的工作原理</h3><ul>\n<li>程序执行前，需要把所含的指令和数据一起放入主存中</li>\n<li>五个阶段：IF-ID-EX-MEM-WB</li>\n<li>c程序怎么变成可执行文件的：直接看图<ul>\n<li><img data-src=\"/img6.png\"></li>\n<li>汇编器把指令打包成可重定位目标代码文件：使用相对地址和符号引用来表示各个代码段之间的关系（代码段、数据段、符号表、重定位表…）使得代码或数据能在内存中任意位置加载或运行</li>\n</ul>\n</li>\n<li>指令执行过程：后面几章会具体讲</li>\n</ul>\n<h2 id=\"1-3-计算机的性能指标\"><a href=\"#1-3-计算机的性能指标\" class=\"headerlink\" title=\"1.3 计算机的性能指标\"></a>1.3 计算机的性能指标</h2><h3 id=\"1-3-1-主要性能指标\"><a href=\"#1-3-1-主要性能指标\" class=\"headerlink\" title=\"1.3.1 主要性能指标\"></a>1.3.1 主要性能指标</h3><ul>\n<li>字长：一次整数运算所能处理的二进制数据的位数<br> :::info<br> 机器字长、指令字长和存储字长<br> :::</li>\n<li>带宽<code>bandwidth</code>：总线一次能并行传送信息的位数</li>\n<li>主存容量</li>\n<li>运算速度<ul>\n<li>吞吐量<code>throughput</code>：一次输入数据所对应的输出数据个数</li>\n<li>响应时间<code>Response (Execution) time</code></li>\n<li>主频</li>\n<li>clock cycle time( &#x3D; 1&#x2F;CPU frequency)</li>\n<li>MIPS: million instructions per second</li>\n<li>FLOPS: floating-point operations per second<blockquote>\n<p>CPI: clock cycles per instruction(IPC: CPI的倒数)</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p>$$ \\begin{aligned}<br>    \\text{CPU execution time} &amp;&#x3D; \\text{CPU clock cycles} \\times \\text{Clock cycle time} \\<br>    &amp;&#x3D; \\frac{\\text{CPU clock cycles}}{\\text{Clock rate}}<br>\\end{aligned}$$</p>\n<p>$$\\begin{aligned}<br>    \\text{CPU clock cycles} &amp;&#x3D; \\text{Instructions count} \\times \\text{Average cycles per instruction}<br>\\end{aligned}$$</p>\n<p>$$\\begin{aligned}<br>    \\text{CPU execution time} &amp;&#x3D; \\text{CPU clock cycles} \\times \\text{Clock cycle time} \\<br>    &amp;&#x3D; \\frac{\\text{CPU clock cycles}}{\\text{Clock rate}}<br>\\end{aligned} $$</p>\n<p>$$ \\begin{aligned}<br>     \\text{performance} &amp;&#x3D; \\frac{1}{\\text{CPU execution time}}<br>\\end{aligned}$$</p>\n<p>“Processor X is n times fast than Y” is<br>$$ \\begin{aligned}<br>    \\text{n} &amp;&#x3D; \\frac{\\text{CPU execution time of Y}}{\\text{CPU execution time of X}}<br>\\end{aligned}$$</p>\n<p>IPS: instructions per second<br>$$ \\begin{aligned}<br>    \\text{IPS} &amp;&#x3D; \\frac{\\text{CPU frequency}}{\\text{CPI}}<br>        &amp;&#x3D; \\frac{1}{\\text{CPU clock cycles} \\times \\text{CPU execution time}}<br>\\end{aligned}$$</p>\n<ul>\n<li>其他公式，，，用到再说吧</li>\n<li>兼容：软件或硬件的通用性</li>\n</ul>\n<blockquote>\n<p>在用于科学计算的计算机中，标志系统性能最有用的参数是浮点数运算相关的</p>\n<ul>\n<li>MFLOPS 10^6</li>\n<li>GFLOPS 10^9</li>\n<li>TFLOPS 10^12</li>\n<li>PFLOPS 10^15</li>\n<li>EFLOPS 10^18</li>\n<li>ZFLOPS 10^21</li>\n</ul>\n</blockquote>\n",
            "tags": [
                "计算机组成"
            ]
        }
    ]
}