<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>NoResponse&#39;s Blog • Posts by &#34;计算机组成&#34; category</title>
    <link href="http://example.com" />
    <updated>2025-08-09T16:00:00.000Z</updated>
    <category term="人工智能" />
    <category term="软件工程" />
    <category term="编译原理" />
    <category term="Liveness Analysis" />
    <category term="语法分析" />
    <category term="Register Allocation" />
    <category term="抽象语法" />
    <category term="词法分析" />
    <category term="中间代码" />
    <category term="活动记录" />
    <category term="语义分析" />
    <category term="Basic Blocks and Traces" />
    <category term="指令选择" />
    <category term="计算机网络" />
    <category term="计算机组成" />
    <category term="指令系统" />
    <category term="数据的表示与运算" />
    <category term="存储系统" />
    <category term="CPU" />
    <category term="错题" />
    <entry>
        <id>http://example.com/2025/08/10/computer-science/computer-organization/ch5/</id>
        <title>Ch5</title>
        <link rel="alternate" href="http://example.com/2025/08/10/computer-science/computer-organization/ch5/"/>
        <content type="html">&lt;h1 id=&#34;Ch5-中央处理器&#34;&gt;&lt;a href=&#34;#Ch5-中央处理器&#34; class=&#34;headerlink&#34; title=&#34;Ch5 中央处理器&#34;&gt;&lt;/a&gt;Ch5 中央处理器&lt;/h1&gt;&lt;h2 id=&#34;CPU的功能和基本结构&#34;&gt;&lt;a href=&#34;#CPU的功能和基本结构&#34; class=&#34;headerlink&#34; title=&#34;CPU的功能和基本结构&#34;&gt;&lt;/a&gt;CPU的功能和基本结构&lt;/h2&gt;&lt;h3 id=&#34;功能&#34;&gt;&lt;a href=&#34;#功能&#34; class=&#34;headerlink&#34; title=&#34;功能&#34;&gt;&lt;/a&gt;功能&lt;/h3&gt;&lt;p&gt;CPU由运算器和控制器组成，具体功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令控制&lt;/li&gt;
&lt;li&gt;操作控制&lt;/li&gt;
&lt;li&gt;时间控制&lt;/li&gt;
&lt;li&gt;数据加工&lt;/li&gt;
&lt;li&gt;中断处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基本结构&#34;&gt;&lt;a href=&#34;#基本结构&#34; class=&#34;headerlink&#34; title=&#34;基本结构&#34;&gt;&lt;/a&gt;基本结构&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;运算器：ALU, 暂存器, ACC, GPRs, PSW, 移位寄存器， 计数器…&lt;/li&gt;
&lt;li&gt;控制器：PC, IR, ID, 时序电路，未操作信号发生器…&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;CPU的寄存器&#34;&gt;&lt;a href=&#34;#CPU的寄存器&#34; class=&#34;headerlink&#34; title=&#34;CPU的寄存器&#34;&gt;&lt;/a&gt;CPU的寄存器&lt;/h3&gt;&lt;p&gt;按汇编程序是否可访问分为用户可见寄存器(GPRs, PSW, PC)和用户不可见寄存器(存储器地址寄存器，存储器数据寄存器，IR, 暂存寄存器，累加寄存器，移位寄存器)&lt;br&gt;各寄存器的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在运算器中：&lt;ul&gt;
&lt;li&gt;GPRs&lt;/li&gt;
&lt;li&gt;ACC: 通用寄存器，用于暂时存放ALU运算的结果&lt;/li&gt;
&lt;li&gt;SR（移位寄存器）：存放操作数且可以移位&lt;/li&gt;
&lt;li&gt;暂存寄存器：暂存从数据总线或通用寄存器送来的操作数，对应用程序员透明&lt;/li&gt;
&lt;li&gt;PSW：保留各种状态信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在控制器中：&lt;ul&gt;
&lt;li&gt;PC: 存放当前指令的地址&lt;/li&gt;
&lt;li&gt;IR: 存放当前指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;指令执行过程&#34;&gt;&lt;a href=&#34;#指令执行过程&#34; class=&#34;headerlink&#34; title=&#34;指令执行过程&#34;&gt;&lt;/a&gt;指令执行过程&lt;/h2&gt;&lt;h3 id=&#34;指令周期&#34;&gt;&lt;a href=&#34;#指令周期&#34; class=&#34;headerlink&#34; title=&#34;指令周期&#34;&gt;&lt;/a&gt;指令周期&lt;/h3&gt;&lt;p&gt;&amp;#x3D; 取值周期 + 执行周期&lt;br&gt;间址周期在取址和执行之间&lt;br&gt;如果CPU在每条指令结束前都要发中断查询信号 （轮询法），后面要加上中断周期&lt;/p&gt;
&lt;h3 id=&#34;指令周期的数据流&#34;&gt;&lt;a href=&#34;#指令周期的数据流&#34; class=&#34;headerlink&#34; title=&#34;指令周期的数据流&#34;&gt;&lt;/a&gt;指令周期的数据流&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;取址周期&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;PC-&amp;gt;MAR-&amp;gt;地址总线-&amp;gt;存储器&lt;/li&gt;
&lt;li&gt;CU发出读命令-&amp;gt;控制总线-&amp;gt;主存&lt;/li&gt;
&lt;li&gt;主存-&amp;gt;数据总线-&amp;gt;IR&lt;/li&gt;
&lt;li&gt;CU发出控制信号-&amp;gt;PC&amp;#x3D;PC+1&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;间址周期&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="CPU" />
        <updated>2025-08-09T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2025/08/01/computer-science/computer-organization/ch4/</id>
        <title>Ch4</title>
        <link rel="alternate" href="http://example.com/2025/08/01/computer-science/computer-organization/ch4/"/>
        <content type="html">&lt;h1 id=&#34;Ch4-指令系统&#34;&gt;&lt;a href=&#34;#Ch4-指令系统&#34; class=&#34;headerlink&#34; title=&#34;Ch4 指令系统&#34;&gt;&lt;/a&gt;Ch4 指令系统&lt;/h1&gt;&lt;h2 id=&#34;指令系统&#34;&gt;&lt;a href=&#34;#指令系统&#34; class=&#34;headerlink&#34; title=&#34;指令系统&#34;&gt;&lt;/a&gt;指令系统&lt;/h2&gt;&lt;h3 id=&#34;ISA（王道叫它指令集体系结构）&#34;&gt;&lt;a href=&#34;#ISA（王道叫它指令集体系结构）&#34; class=&#34;headerlink&#34; title=&#34;ISA（王道叫它指令集体系结构）&#34;&gt;&lt;/a&gt;ISA（王道叫它指令集体系结构）&lt;/h3&gt;&lt;p&gt;指令系统 vs ISA&lt;/p&gt;
&lt;p&gt;ISA完整地定义了软件和硬件之间的接口，规定了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令格式（指令寻址方式，操作类型，操作数）&lt;/li&gt;
&lt;li&gt;操作数的类型、寻址方式、大端小端存放（大端：高位放在低地址；小端：低位放在低地址）&lt;/li&gt;
&lt;li&gt;程序可访问的寄存器编号、个数和位数，存储空间大小和编址方式&lt;/li&gt;
&lt;li&gt;指令执行过程的控制方式（PC, condition code, …）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;指令的基本格式&#34;&gt;&lt;a href=&#34;#指令的基本格式&#34; class=&#34;headerlink&#34; title=&#34;指令的基本格式&#34;&gt;&lt;/a&gt;指令的基本格式&lt;/h3&gt;&lt;p&gt;操作码+地址码&lt;br&gt;主存一般是按字节编址，所以指令字长通常为字节的整数倍&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;零地址指令&lt;br&gt;NOP, HLT&lt;br&gt;不需要操作数。&lt;br&gt;零地址的运算类指令仅用在堆栈计算机中（操作数直接从栈顶弹出）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一地址指令&lt;br&gt;OP, A1&lt;br&gt;OP(A1) -&amp;gt; A1&lt;br&gt;加1，减1，取反，求补，移位等&lt;br&gt;可能有一个操作数或者两个操作数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;隐含约定目的地址的双操作数指令，地址码指明一个操作数，另一个操作数来自隐含寻址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;二地址指令&lt;br&gt;OP, A1, A2&lt;br&gt;(A1)OP(A2) -&amp;gt; A1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;三地址指令&lt;br&gt;OP, A1, A2, A3&lt;br&gt;(A1)OP(A2) -&amp;gt; A3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;四地址指令&lt;br&gt;OP, A1, A2, A3, A4&lt;br&gt;(A1)OP(A2) -&amp;gt; A3, A4 &amp;#x3D; 下一条将要执行指令的地址&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;定长操作码指令格式&#34;&gt;&lt;a href=&#34;#定长操作码指令格式&#34; class=&#34;headerlink&#34; title=&#34;定长操作码指令格式&#34;&gt;&lt;/a&gt;定长操作码指令格式&lt;/h3&gt;&lt;p&gt;n位opcode最多能表示2^n条指令&lt;br&gt;指令字长：单字长(PC &amp;#x3D; PC + 1)、双字长(PC &amp;#x3D; PC + 2)…&lt;/p&gt;
&lt;h3 id=&#34;扩展操作码指令格式&#34;&gt;&lt;a href=&#34;#扩展操作码指令格式&#34; class=&#34;headerlink&#34; title=&#34;扩展操作码指令格式&#34;&gt;&lt;/a&gt;扩展操作码指令格式&lt;/h3&gt;&lt;p&gt;才去可变长度操作码，分散地放在指令字的不同位置上&lt;br&gt;要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不允许短码是长码的前缀&lt;/li&gt;
&lt;li&gt;各指令的操作码不能重复&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;br&gt;RISC-V指令集&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;指令的操作类型&#34;&gt;&lt;a href=&#34;#指令的操作类型&#34; class=&#34;headerlink&#34; title=&#34;指令的操作类型&#34;&gt;&lt;/a&gt;指令的操作类型&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;数据传送&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;MOV: 寄存器到寄存器&lt;/li&gt;
&lt;li&gt;LOAD: 从内存读到寄存器&lt;/li&gt;
&lt;li&gt;STORE: 从寄存器写入内存&lt;/li&gt;
&lt;li&gt;PUSH&lt;/li&gt;
&lt;li&gt;POP&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;p&gt;算术和逻辑运算&lt;br&gt;ADD, SUB, MUL, DIV, MOD, AND, OR, XOR, NOT, XOR, INC(加一), DEC(减一)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;移位&lt;br&gt;算术移位，逻辑移位，循环移位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;转移&lt;br&gt;JMP, BRANCH, CALL, RET, TRAP（中断隐指令是硬件实现的，只有TRAP是软指令）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I&amp;#x2F;O操作&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;指令的寻址方式&#34;&gt;&lt;a href=&#34;#指令的寻址方式&#34; class=&#34;headerlink&#34; title=&#34;指令的寻址方式&#34;&gt;&lt;/a&gt;指令的寻址方式&lt;/h2&gt;&lt;h3 id=&#34;指令寻址与数据寻址&#34;&gt;&lt;a href=&#34;#指令寻址与数据寻址&#34; class=&#34;headerlink&#34; title=&#34;指令寻址与数据寻址&#34;&gt;&lt;/a&gt;指令寻址与数据寻址&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;指令寻址&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;顺序： PC &amp;#x3D; PC + 1&lt;/li&gt;
&lt;li&gt;跳转： 绝对转移(PC &amp;#x3D; 跳转地址) ,相对转移(PC &amp;#x3D; PC + offset)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;数据寻址&lt;br&gt;格式：操作码 寻址特征 形式地址A&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;立即寻址(addi, …)&lt;/li&gt;
&lt;li&gt;直接寻址（A直接表示地址）&lt;/li&gt;
&lt;li&gt;寄存器寻址(add, …)&lt;/li&gt;
&lt;li&gt;寄存器间接寻址(lw r1 offset(r2), …)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常见的数据寻址方式&#34;&gt;&lt;a href=&#34;#常见的数据寻址方式&#34; class=&#34;headerlink&#34; title=&#34;常见的数据寻址方式&#34;&gt;&lt;/a&gt;常见的数据寻址方式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;隐含寻址&lt;br&gt;比如单地址的第二个操作数由ACC提供: Intel 8080的&lt;code&gt;ADD A&lt;/code&gt;指令会将寄存器A的内容与指定的操作数（放在ACC内）相加，并将结果存储回累加器中&lt;br&gt;优点是缩短指令字长；缺点是需要增加存储操作数或隐含地址的硬件&lt;/li&gt;
&lt;li&gt;立即（数）寻址&lt;br&gt;比如riscv的&lt;code&gt;addi x5, x6, #1&lt;/code&gt;&lt;br&gt;优点是不用访存速度快，缺点是立即数位数有限&lt;/li&gt;
&lt;li&gt;直接寻址&lt;br&gt;&lt;code&gt;OP #A&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比如lc3的&lt;code&gt;LD R1, LABEL1&lt;/code&gt;翻译成汇编是&lt;code&gt;LD R1, x3100&lt;/code&gt;表示&lt;code&gt;R1 &amp;lt;- MEM[x3100]&lt;/code&gt;&lt;br&gt;形式地址A就是操作数的真实地址EA&lt;br&gt;优点是简单，缺点是寻址范围受A的位数限制&lt;br&gt;4. 间接寻址&lt;br&gt;EA &amp;#x3D; (A)&lt;br&gt;指令中给出的地址是包含实际地址的内存位置或寄存器&lt;br&gt;比如lc3的&lt;code&gt;LDI R1, LABEL1&lt;/code&gt;翻译成汇编是&lt;code&gt;LDI R1, x3100&lt;/code&gt;表示&lt;code&gt;R1 &amp;lt;- MEM[MEM[x3100]]&lt;/code&gt;&lt;br&gt;5. 寄存器寻址&lt;br&gt;EA &amp;#x3D; (Ri)&lt;br&gt;&lt;code&gt;ADD R1, R2, R3&lt;/code&gt;&lt;br&gt;6. 寄存器间接寻址&lt;br&gt;EA &amp;#x3D; (Ri)&lt;br&gt;比如&lt;code&gt;LW R1, offset(R2)&lt;/code&gt;&lt;br&gt;7. 相对寻址&lt;br&gt;相对PC寻址&lt;br&gt;EA &amp;#x3D; (PC) + A&lt;br&gt;比如branch&lt;br&gt;8. 基址寻址&lt;br&gt;EA &amp;#x3D; (BR) + A&lt;br&gt;面向操作系统，优点是扩大寻址范围，有利于躲到程序设计；缺点是偏移量(A)的位数较短&lt;br&gt;9. 变址寻址&lt;br&gt;EA &amp;#x3D; (IX) + A&lt;br&gt;比如用来访问数组&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;偏址寻址：相对寻址、基址寻址、变址寻址&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;堆栈寻址有一个堆栈指针SP，堆栈分为硬堆栈，软堆栈。寄存器堆栈是硬堆栈，内存是软堆栈。采用无操作数指令&lt;br&gt;&lt;img data-src=&#34;/f2.jpg&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;程序的机器级代码表示&#34;&gt;&lt;a href=&#34;#程序的机器级代码表示&#34; class=&#34;headerlink&#34; title=&#34;程序的机器级代码表示&#34;&gt;&lt;/a&gt;程序的机器级代码表示&lt;/h2&gt;&lt;p&gt;x86汇编&lt;/p&gt;
&lt;h3 id=&#34;常用汇编指令介绍&#34;&gt;&lt;a href=&#34;#常用汇编指令介绍&#34; class=&#34;headerlink&#34; title=&#34;常用汇编指令介绍&#34;&gt;&lt;/a&gt;常用汇编指令介绍&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;相关寄存器&lt;br&gt;x86架构有8个32位的通用寄存器：EAX、EBX、ECX、EDX、ESI、EDI、EBP、ESP&lt;br&gt;&lt;img data-src=&#34;/f3.jpg&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/f4.jpg&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/f5.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;汇编指令格式&lt;br&gt;x86汇编指令格式有两种：AT&amp;amp;T格式和Intel格式&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;AT&amp;amp;T只能小写，Intel大小写都行&lt;/li&gt;
&lt;li&gt;AT&amp;amp;T第一个操作数是源操作数，第二个是目的操作数；Intel第一个操作数是目的操作数，第二个是源操作数&lt;/li&gt;
&lt;li&gt;AT&amp;amp;T寄存器前缀%，立即数前缀$；Intel格式寄存器和立即数不需要加前缀&lt;/li&gt;
&lt;li&gt;内存寻址：AT&amp;amp;T格式为(addr)，Intel格式为[addr]&lt;/li&gt;
&lt;li&gt;处理复杂寻址方式时，AT&amp;amp;T格式为disp(base, index, scale)，表示偏移量，基址寄存器，变址寄存器，比例因子，表示的操作数为M[R[base]+R[index]*scale + disp];&lt;/li&gt;
&lt;li&gt;指定数据长度时，AT&amp;amp;T用b, w, l; Intel用byte ptr, word ptr, dword ptr(一个word是16位，一个dword是32位)&lt;br&gt;&lt;img data-src=&#34;/f6.jpg&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/f7.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;常用指令&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;reg&gt;表示任意寄存器，后面跟数字指定其位数&lt;/reg&gt;&lt;/li&gt;
&lt;li&gt;&lt;mem&gt;内存地址&lt;/mem&gt;&lt;/li&gt;
&lt;li&gt;&lt;con&gt;后面跟数字表示几位常数&lt;br&gt;常见的指令：&lt;/con&gt;&lt;/li&gt;
&lt;li&gt;数据传送指令&lt;ul&gt;
&lt;li&gt;mov&lt;ul&gt;
&lt;li&gt;mov &lt;reg&gt;, &lt;reg&gt;&lt;/reg&gt;&lt;/reg&gt;&lt;/li&gt;
&lt;li&gt;mov &lt;reg&gt;, &lt;mem&gt;&lt;/mem&gt;&lt;/reg&gt;&lt;/li&gt;
&lt;li&gt;mov &lt;mem&gt;, &lt;reg&gt;&lt;/reg&gt;&lt;/mem&gt;&lt;/li&gt;
&lt;li&gt;mov &lt;reg&gt;, &lt;con&gt;&lt;/con&gt;&lt;/reg&gt;&lt;/li&gt;
&lt;li&gt;mov &lt;mem&gt;, &lt;con&gt;&lt;/con&gt;&lt;/mem&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;push(ESP指向栈顶空的位置，push之前ESP &amp;#x3D; ESP - 4)&amp;#x3D;&amp;#x3D;栈中元素固定为32位&amp;#x3D;&amp;#x3D;&lt;ul&gt;
&lt;li&gt;push &amp;lt;reg32&lt;/li&gt;
&lt;li&gt;push &lt;mem&gt;&lt;/mem&gt;&lt;/li&gt;
&lt;li&gt;push &lt;con32&gt;&lt;/con32&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pop(pop之后ESP &amp;#x3D; ESP + 4)&lt;ul&gt;
&lt;li&gt;pop &lt;reg32&gt;&lt;/reg32&gt;&lt;/li&gt;
&lt;li&gt;pop &lt;mem&gt;&lt;/mem&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;算术和逻辑运算&lt;ul&gt;
&lt;li&gt;add&amp;#x2F;sub(把两个操作数相加&amp;#x2F;减，结果放回目的操作数)&lt;ul&gt;
&lt;li&gt;add eax, 10    # eax &amp;#x3D; eax + 10&lt;/li&gt;
&lt;li&gt;add byte ptr [var], 10    # 10与var指向的内存地址的一字节值相加，结果放回var指向的内存中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;inc&amp;#x2F;dec(把操作数自加1&amp;#x2F;自减1)&lt;ul&gt;
&lt;li&gt;dec eax    # eax &amp;#x3D; eax - 1&lt;/li&gt;
&lt;li&gt;inc dword ptr [var]    # var指向的32位值自加1，结果放回var指向的32位内存中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;imul(有符号数整数乘法, mul是无符号数乘法)目的操作数必须是寄存器，溢出时&lt;code&gt;OF = 1&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;imul &lt;reg32&gt;, &lt;reg32&gt;&lt;/reg32&gt;&lt;/reg32&gt;&lt;/li&gt;
&lt;li&gt;imul &lt;reg32&gt;, &lt;mem&gt;&lt;/mem&gt;&lt;/reg32&gt;&lt;/li&gt;
&lt;li&gt;imul &lt;reg32&gt;, &lt;reg32&gt;, &lt;con&gt;&lt;/con&gt;&lt;/reg32&gt;&lt;/reg32&gt;&lt;/li&gt;
&lt;li&gt;imul &lt;reg32&gt;, &lt;mem&gt;, &lt;con&gt;&lt;/con&gt;&lt;/mem&gt;&lt;/reg32&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;idiv(有符号数整数除法，&amp;#x3D;&amp;#x3D;只有一个操作数为除数，被除数有64位放在 &lt;code&gt;edx:eax&lt;/code&gt; 中，操作结果商放到&lt;code&gt;eax&lt;/code&gt;，余数放到&lt;code&gt;edx&lt;/code&gt;&amp;#x3D;&amp;#x3D;)&lt;ul&gt;
&lt;li&gt;idiv &lt;reg32&gt;&lt;/reg32&gt;&lt;/li&gt;
&lt;li&gt;idiv &lt;mem&gt;&lt;/mem&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;and&amp;#x2F;or&amp;#x2F;xor&lt;ul&gt;
&lt;li&gt;and&amp;#x2F;or&amp;#x2F;xor &lt;reg&gt;, &lt;reg&gt;&lt;/reg&gt;&lt;/reg&gt;&lt;/li&gt;
&lt;li&gt;and&amp;#x2F;or&amp;#x2F;xor &lt;reg&gt;, &lt;mem&gt;&lt;/mem&gt;&lt;/reg&gt;&lt;/li&gt;
&lt;li&gt;and&amp;#x2F;or&amp;#x2F;xor &lt;mem&gt;, &lt;reg&gt;&lt;/reg&gt;&lt;/mem&gt;&lt;/li&gt;
&lt;li&gt;and&amp;#x2F;or&amp;#x2F;xor &lt;reg&gt;, &lt;con&gt;&lt;/con&gt;&lt;/reg&gt;&lt;/li&gt;
&lt;li&gt;and&amp;#x2F;or&amp;#x2F;xor &lt;mem&gt;, &lt;con&gt;&lt;/con&gt;&lt;/mem&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;not(按位取反)&lt;ul&gt;
&lt;li&gt;not &lt;reg&gt;&lt;/reg&gt;&lt;/li&gt;
&lt;li&gt;not &lt;mem&gt;&lt;/mem&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;neg(取负)&lt;ul&gt;
&lt;li&gt;neg &lt;reg&gt;&lt;/reg&gt;&lt;/li&gt;
&lt;li&gt;neg &lt;mem&gt;&lt;/mem&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;shl&amp;#x2F;shr(逻辑左移&amp;#x2F;右移)&lt;ul&gt;
&lt;li&gt;shl &lt;reg&gt;, &lt;con8&gt;&lt;/con8&gt;&lt;/reg&gt;&lt;/li&gt;
&lt;li&gt;shl &lt;mem&gt;, &lt;con8&gt;&lt;/con8&gt;&lt;/mem&gt;&lt;/li&gt;
&lt;li&gt;shr &lt;reg&gt;, &lt;reg8&gt;&lt;/reg8&gt;&lt;/reg&gt;&lt;/li&gt;
&lt;li&gt;shr &lt;mem&gt;, &lt;reg8&gt;&lt;/reg8&gt;&lt;/mem&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制流&lt;ul&gt;
&lt;li&gt;jmp&lt;ul&gt;
&lt;li&gt;jmp &lt;label&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;jcondition&lt;ul&gt;
&lt;li&gt;je &lt;label&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;jz &lt;label&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;jne &lt;label&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;jg &lt;label&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;jge &lt;label&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;jl &lt;label&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;jle &lt;label&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cmp&amp;#x2F;test(cmp相当于相减，test相当于按位与，不保存操作结果仅设置条件码用于跳转指令)&lt;ul&gt;
&lt;li&gt;cmp&amp;#x2F;test &lt;reg&gt;, &lt;reg&gt;&lt;/reg&gt;&lt;/reg&gt;&lt;/li&gt;
&lt;li&gt;cmp&amp;#x2F;test &lt;reg&gt;, &lt;mem&gt;&lt;/mem&gt;&lt;/reg&gt;&lt;/li&gt;
&lt;li&gt;cmp&amp;#x2F;test &lt;mem&gt;, &lt;reg&gt;&lt;/reg&gt;&lt;/mem&gt;&lt;/li&gt;
&lt;li&gt;cmp&amp;#x2F;test &lt;reg&gt;, &lt;con&gt;&lt;/con&gt;&lt;/reg&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;call&amp;#x2F;ret(call将返回地址入栈然后跳转，ret弹出返回地址并跳转)&lt;ul&gt;
&lt;li&gt;call &lt;label&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;ret&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;选择语句的机器级表示&#34;&gt;&lt;a href=&#34;#选择语句的机器级表示&#34; class=&#34;headerlink&#34; title=&#34;选择语句的机器级表示&#34;&gt;&lt;/a&gt;选择语句的机器级表示&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;if(test_exp)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    then_stmt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else_stmt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;翻译成&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;if(!t)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    goto false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;then_stmt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;goto done;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;false:  else_stmt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;done:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;循环语句的机器级表示&#34;&gt;&lt;a href=&#34;#循环语句的机器级表示&#34; class=&#34;headerlink&#34; title=&#34;循环语句的机器级表示&#34;&gt;&lt;/a&gt;循环语句的机器级表示&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;do-while&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;do&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  body_stmt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  while(test_exp);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;翻译成：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;loop:   body_stmt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  t = test_exp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if(t)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    goto loop;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;while&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;while(test_exp)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  body_stmt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;翻译成：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;t = test_exp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if(!t)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  goto done;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;loop:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  body_stmt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  t = test_exp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if(t)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    goto loop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;done:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;for&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for(init_exp; test_exp; update_exp)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  body_stmt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;翻译成：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;init_exp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;t = test_exp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if(!t)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  goto done;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;loop:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  body_stmt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  update_exp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  t = test_exp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if(t)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    goto loop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;done:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;过程调用的机器级表示&#34;&gt;&lt;a href=&#34;#过程调用的机器级表示&#34; class=&#34;headerlink&#34; title=&#34;过程调用的机器级表示&#34;&gt;&lt;/a&gt;过程调用的机器级表示&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;caller将实参放到callee能访问的地方（寄存器放不下放栈里）&lt;/li&gt;
&lt;li&gt;caller保存返回地址（通过call指令实现）&lt;/li&gt;
&lt;li&gt;callee保存caller通用寄存器的内容，并为自己的非静态局部变量分配空间&lt;/li&gt;
&lt;li&gt;执行callee&lt;/li&gt;
&lt;li&gt;恢复caller的寄存器内容，将返回值放到caller能访问的地方（寄存器、栈），释放局部变量&lt;/li&gt;
&lt;li&gt;callee取出返回地址，恢复PC（ret实现）&lt;blockquote&gt;
&lt;p&gt;EAX, ECX, EDX是caller saved register&lt;br&gt;通常用于传递参数、存储临时变量或返回值，所以call的时候内容可能会变，要先保存再调用。比如返回值一般保存在EAX&lt;br&gt;EBX, ESI, EDI是callee saved register&lt;br&gt;这些寄存器的值在函数调用后应保持不变，所以由callee保存，ret的时候要恢复&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每个过程有自己的栈帧，&lt;code&gt;EBP&lt;/code&gt;保存栈帧的基址，&lt;code&gt;ESP&lt;/code&gt;指向栈顶位置，&lt;code&gt;EBP&lt;/code&gt;的值不变，当前栈帧的范围在&lt;code&gt;EBP&lt;/code&gt;和&lt;code&gt;ESP&lt;/code&gt;之间（详见编译原理&lt;code&gt;activated record&lt;/code&gt;）&lt;br&gt;&lt;img data-src=&#34;/f8.jpg&#34;&gt;&lt;br&gt;前三行的意思是新开一个栈帧，分配了24字节的栈帧空间。&lt;code&gt;push epb&lt;/code&gt;实际上就是把static link压栈。&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ub3Jlc3BvbnNlNTI1LmdpdGh1Yi5pby8yMDI1LzA2LzE1L2NvbXB1dGVyLXNjaWVuY2UvY29tcGlsZS1wcmluY2lwbGVzL2NoNi8jJUU1JTg3JUJEJUU2JTk1JUIwJUU4JUIwJTgzJUU3JTk0JUE4JUU2JUI1JTgxJUU3JUE4JThC&#34;&gt;详见编译原理笔记&lt;/span&gt;&lt;br&gt;执行&lt;code&gt;call&lt;/code&gt;之后，&lt;code&gt;call&lt;/code&gt;会先将返回地址压栈，然后跳转到&lt;code&gt;add&lt;/code&gt;的起始地址，为&lt;code&gt;add&lt;/code&gt;创建栈帧。&lt;code&gt;add&lt;/code&gt;的返回值存放在&lt;code&gt;EAX&lt;/code&gt;中。&lt;br&gt;执行&lt;code&gt;ret&lt;/code&gt;之前需要释放当前栈帧，恢复caller的栈帧。因此&lt;code&gt;leave&lt;/code&gt;相当于&lt;code&gt;mov esp, ebp&lt;/code&gt; &lt;code&gt;pop ebp&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;CISC和RISC的基本概念&#34;&gt;&lt;a href=&#34;#CISC和RISC的基本概念&#34; class=&#34;headerlink&#34; title=&#34;CISC和RISC的基本概念&#34;&gt;&lt;/a&gt;CISC和RISC的基本概念&lt;/h2&gt;&lt;p&gt;复杂指令系统计算机(CISC)：比如x86&lt;br&gt;精简指令系统计算机(RISC)：ARM, MIPS…&lt;/p&gt;
&lt;h3 id=&#34;CISC&#34;&gt;&lt;a href=&#34;#CISC&#34; class=&#34;headerlink&#34; title=&#34;CISC&#34;&gt;&lt;/a&gt;CISC&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;指令系统复杂庞大，指令数目多&lt;/li&gt;
&lt;li&gt;指令长度不固定，格式多，寻址方式多&lt;/li&gt;
&lt;li&gt;可以访存的指令不受限制（比如x86的add可以直接把reg和mem相加，但是riscv的只能reg和reg或者reg和imm）&lt;/li&gt;
&lt;li&gt;各种指令使用频度相差很大&lt;/li&gt;
&lt;li&gt;各种指令执行时间相差很大，大多指令需要多个时钟周期&lt;/li&gt;
&lt;li&gt;控制器大多采用微程序控制，无法采用硬连线控制&lt;/li&gt;
&lt;li&gt;难以用优化编译生成高效的目标代码程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;RISC&#34;&gt;&lt;a href=&#34;#RISC&#34; class=&#34;headerlink&#34; title=&#34;RISC&#34;&gt;&lt;/a&gt;RISC&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;选取使用频率最高的一些简单指令，复杂指令的功能由简单指令的组合来实现&lt;/li&gt;
&lt;li&gt;指令长度固定，指令格式种类少，寻址方式种类少&lt;/li&gt;
&lt;li&gt;只有LOAD&amp;#x2F;STORE访存，其余指令的操作只能访问寄存器&amp;#x2F;imm&lt;/li&gt;
&lt;li&gt;CPU中通用寄存器数量相当多&lt;/li&gt;
&lt;li&gt;采用流水线技术，大部分指令在一个时钟周期内完成&lt;/li&gt;
&lt;li&gt;硬布线控制为主，不用或少用微程序控制&lt;/li&gt;
&lt;li&gt;重视编译优化&lt;br&gt;CISC兼容性好，大多RISC不能和老机器兼容，但具有更强的实用性。CISC可以提供更多的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;CISC和RISC的比较&#34;&gt;&lt;a href=&#34;#CISC和RISC的比较&#34; class=&#34;headerlink&#34; title=&#34;CISC和RISC的比较&#34;&gt;&lt;/a&gt;CISC和RISC的比较&lt;/h3&gt;&lt;p&gt;和CISC相比，RISC的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RISC更能充分利用VLSI（超大规模集成电路）芯片的面积（减少了控制逻辑）&lt;/li&gt;
&lt;li&gt;RISC更能提高运算速度&lt;/li&gt;
&lt;li&gt;RISC便于设计，可以降低成本，提高可靠性&lt;/li&gt;
&lt;li&gt;有利于编译优化&lt;br&gt;&lt;img data-src=&#34;/f9.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="指令系统" />
        <updated>2025-07-31T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2025/07/01/computer-science/computer-organization/ch3/</id>
        <title>Ch3</title>
        <link rel="alternate" href="http://example.com/2025/07/01/computer-science/computer-organization/ch3/"/>
        <content type="html">&lt;h1 id=&#34;Ch3-存储系统&#34;&gt;&lt;a href=&#34;#Ch3-存储系统&#34; class=&#34;headerlink&#34; title=&#34;Ch3 存储系统&#34;&gt;&lt;/a&gt;Ch3 存储系统&lt;/h1&gt;&lt;h2 id=&#34;存储器概述&#34;&gt;&lt;a href=&#34;#存储器概述&#34; class=&#34;headerlink&#34; title=&#34;存储器概述&#34;&gt;&lt;/a&gt;存储器概述&lt;/h2&gt;&lt;h3 id=&#34;存储器的分类&#34;&gt;&lt;a href=&#34;#存储器的分类&#34; class=&#34;headerlink&#34; title=&#34;存储器的分类&#34;&gt;&lt;/a&gt;存储器的分类&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;按层次分&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;主存（小、快、成本高）&lt;/li&gt;
&lt;li&gt;辅存（大、慢、成本低）&lt;/li&gt;
&lt;li&gt;Cache&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;按存储介质分&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;磁表面存储器（磁盘、磁带）&lt;/li&gt;
&lt;li&gt;磁芯存储器&lt;/li&gt;
&lt;li&gt;半导体存储器（MOS型、双极型）&lt;/li&gt;
&lt;li&gt;光存储器（光盘）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;按存储方式分&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;RAM （随机存储器）:随机读取存储单元，存取时间与存储单元的物理位置无关。读写方便，主要用作主存和cache，分静态RAM和动态RAM。&lt;/li&gt;
&lt;li&gt;ROM （只读存储器）：只能读不能写，非易失性，随机读取。广义的ROM也可以通过电擦除进行写入(EEPROM)&lt;/li&gt;
&lt;li&gt;SAM （顺序存储器）：按顺序存储，存取时间与存储单元的物理位置有关&lt;/li&gt;
&lt;li&gt;DAM （直接存储器）：先选取信息所在区域，然后顺序存取。结合了RAM和SAM的特性（磁盘）&lt;/li&gt;
&lt;li&gt;Associated memory: 不根据地址而是根据存储内容来进行存取的存储器，可以实现快速地查找快表。既可以按照&amp;#x3D;&amp;#x3D;地址&amp;#x3D;&amp;#x3D;寻址也可以按照&amp;#x3D;&amp;#x3D;内容&amp;#x3D;&amp;#x3D;寻址（通常是某些字段）&lt;/li&gt;
&lt;li&gt;串行访问存储器：SAM和DAM都是，所以读写时间和物理位置有关&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;按信息的可保存性分类&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;易失性存储器：断电后丢失数据，如RAM&lt;/li&gt;
&lt;li&gt;非易失性存储器：断电后数据还在，如ROM，磁盘光盘&lt;/li&gt;
&lt;li&gt;破坏性读出：读出数据后数据被破坏&lt;/li&gt;
&lt;li&gt;非破坏性读出：读出数据后数据不改变&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;存储器的性能指标&#34;&gt;&lt;a href=&#34;#存储器的性能指标&#34; class=&#34;headerlink&#34; title=&#34;存储器的性能指标&#34;&gt;&lt;/a&gt;存储器的性能指标&lt;/h3&gt;&lt;p&gt;三个主要性能指标：存储容量、单位成本、存储速度&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;容量 &amp;#x3D; 存储字数 * 字长&lt;/li&gt;
&lt;li&gt;单位成本 &amp;#x3D; 总成本&amp;#x2F;总容量&lt;/li&gt;
&lt;li&gt;存储速度：&lt;br&gt;存取时间$T_a$: 启动一次存储器操作到完成该操作所经历的时间，分为读出时间和写入事件&lt;br&gt;存取周期$T_m$: 进行连续读&amp;#x2F;写操作所允许的最短时间间隔&lt;br&gt;主存带宽$B_m$: b&amp;#x2F;s, B&amp;#x2F;s, word&amp;#x2F;s&lt;blockquote&gt;
&lt;p&gt;存取时间仅为完成一次操作的时间，而存取周期不仅包含操作时间，还包括操作后线路的恢复时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;多级层次的存储系统&#34;&gt;&lt;a href=&#34;#多级层次的存储系统&#34; class=&#34;headerlink&#34; title=&#34;多级层次的存储系统&#34;&gt;&lt;/a&gt;多级层次的存储系统&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;br&gt;从上到下价格越来越低，速度越来越慢，容量越来越大，CPU访问频度越来越低&lt;br&gt;&lt;img data-src=&#34;/f2.jpg&#34;&gt;&lt;br&gt;存储时间与存储周期的关系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;透明（transparent）指的是某种机制或技术的存在对使用者来说是不可见或无感知的&lt;br&gt;主存-Cache之间的数据调用由硬件自动完成，对所有程序员均是透明的&lt;br&gt;主存-辅存的数据调用由硬件和操作系统共同完成，对应用程序员是透明的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;主存储器&#34;&gt;&lt;a href=&#34;#主存储器&#34; class=&#34;headerlink&#34; title=&#34;主存储器&#34;&gt;&lt;/a&gt;主存储器&lt;/h2&gt;&lt;p&gt;存储元件：MOS管&lt;/p&gt;
&lt;h3 id=&#34;SRAM-DRAM&#34;&gt;&lt;a href=&#34;#SRAM-DRAM&#34; class=&#34;headerlink&#34; title=&#34;SRAM &amp;amp; DRAM&#34;&gt;&lt;/a&gt;SRAM &amp;amp; DRAM&lt;/h3&gt;&lt;p&gt;RAM: SRAM静态随机存储器和DRAM动态随机存储器&lt;br&gt;&amp;#x3D;&amp;#x3D;主存主要是DRAM，Cache主要是SRAM&amp;#x3D;&amp;#x3D;，都易失&lt;/p&gt;
&lt;p&gt;DRAM芯片：使用栅极电容存储信息，只要一个晶体管，读写&amp;#x3D;&amp;#x3D;更慢&amp;#x3D;&amp;#x3D;，是&amp;#x3D;&amp;#x3D;破坏性读出&amp;#x3D;&amp;#x3D;，需要重写，&amp;#x3D;&amp;#x3D;成本低，集成度高，功耗低&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;SRAM芯片：使用双稳态触发器存储信息（六晶体管MOS，RS, JK, D）。读写&amp;#x3D;&amp;#x3D;更快&amp;#x3D;&amp;#x3D;，是非破坏性读出，&amp;#x3D;&amp;#x3D;成本高，集成度低，功耗大&amp;#x3D;&amp;#x3D;&lt;br&gt;&lt;img data-src=&#34;/f4.jpg&#34;&gt;&lt;br&gt;栅极电容需要一直刷新给电容充电，触发器不需要刷新，只要不断电状态不会改变&lt;/p&gt;
&lt;h4 id=&#34;DRAM的刷新&#34;&gt;&lt;a href=&#34;#DRAM的刷新&#34; class=&#34;headerlink&#34; title=&#34;DRAM的刷新&#34;&gt;&lt;/a&gt;DRAM的刷新&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;多久需要刷新一次？ 刷新周期：一般为2ms&lt;/li&gt;
&lt;li&gt;每次刷新多少存储单元？以行为单位，每次刷新一行存储单元&lt;br&gt;——为什么要用行列地址？减少选通线的数量&lt;/li&gt;
&lt;li&gt;在什么时刻刷新？&lt;br&gt;有硬件支持，读出一行的信息后重新写入，占用1个读&amp;#x2F;写周期&lt;br&gt;假设DRAM内部结构排列成128×128的形式，读&amp;#x2F;写周期0.5us&lt;br&gt;2ms共 2ms&amp;#x2F;0.5us &amp;#x3D; 4000 个周期&lt;br&gt;三种刷新方式：&lt;br&gt;&lt;img data-src=&#34;/f5.jpg&#34;&gt;&lt;br&gt;刷新以行为单位，再生（重写）只需要恢复被读出来的存储单元&lt;br&gt;刷新由存储器独立完成，不需要CPU控制&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;DRAM的地址引脚复用技术&#34;&gt;&lt;a href=&#34;#DRAM的地址引脚复用技术&#34; class=&#34;headerlink&#34; title=&#34;DRAM的地址引脚复用技术&#34;&gt;&lt;/a&gt;DRAM的地址引脚复用技术&lt;/h5&gt;&lt;p&gt;&lt;img data-src=&#34;/f6.jpg&#34;&gt;&lt;br&gt;行列地址分成两次送，节省了一半的地址线&lt;br&gt;行列数优化原则：尽量使行、列数相同，且行数较少（因为按行刷新）&lt;br&gt;目前常用SDRAM（同步DRAM），数据交换同步于CPU的时钟信号，使得CPU不需要等待&lt;/p&gt;
&lt;h3 id=&#34;ROM&#34;&gt;&lt;a href=&#34;#ROM&#34; class=&#34;headerlink&#34; title=&#34;ROM&#34;&gt;&lt;/a&gt;ROM&lt;/h3&gt;&lt;p&gt;结构简单、非易失性&lt;br&gt;类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MROM 掩模式ROM&lt;br&gt;在芯片生产过程中写入，无法改变，可靠性高，急程度高，价格便宜，灵活性差&lt;/li&gt;
&lt;li&gt;PROM 一次可编程ROM&lt;br&gt;可以用专门的设备写入一次，一旦写入无法改变&lt;/li&gt;
&lt;li&gt;EPROM 可擦除可编程ROM&lt;br&gt;可以写入并多次改写，但是编程次数有限且时间长&lt;/li&gt;
&lt;li&gt;Flash&lt;br&gt;兼有RAM和ROM的优点，可以不加电长期保存信息，又能在线快速擦除和重写，价格便宜，急程度高，电可擦除重写且速度快&lt;br&gt;SSD 固态硬盘基于Flash，由控制单元和Flash组成，长期保存、快速擦除和重写，对比传统硬盘读写速度快。低功耗。但是价格高&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;主存储器的基本组成&#34;&gt;&lt;a href=&#34;#主存储器的基本组成&#34; class=&#34;headerlink&#34; title=&#34;主存储器的基本组成&#34;&gt;&lt;/a&gt;主存储器的基本组成&lt;/h3&gt;&lt;p&gt;核心部件：一个个存储0或1的存储单元构成的存储矩阵&lt;br&gt;访问主存时，CPU把地址送到MAR，MAR通过地址总线把地址送到主存中的地址寄存器，地址译码器进行译码，选中相应的内存单元，然后通过控制电路决定读&amp;#x2F;写操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读操作：将选中的内存单元的内容通过数据总线送到MDR中&lt;/li&gt;
&lt;li&gt;写操作：将MDR中的内容通过数据总线送到选中的内存单元中&lt;br&gt;MDR的位数和数据总线位数相同，通常等于存储字长；MAR的位数和地址总线位数相同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多模块存储器&#34;&gt;&lt;a href=&#34;#多模块存储器&#34; class=&#34;headerlink&#34; title=&#34;多模块存储器&#34;&gt;&lt;/a&gt;多模块存储器&lt;/h3&gt;&lt;p&gt;DRAM芯片的恢复时间比较长，有可能是存取时间的几倍（SRAM的恢复时间较短）。CPU的读写速度比主存快很多，主存恢复时间太长&lt;br&gt; —— 利用多个完全相同的存储模块并行工作来提高吞吐率：单体多字存储器，多体低位交叉存储器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;双端口RAM（408不考，了解即可）&lt;br&gt;&lt;img data-src=&#34;/f7.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;单体多字存储器&lt;br&gt;一般一个存储单元只存储一个word，但是单体多字存储器一个存储单元存储多个word，然后读的时候一次性读取这多个字。好处是快，缺点是只有指令和数据连续存放时才能提高存取速度，否则造成不必要的读取。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;多体并行存储器（重点）&amp;#x3D;&amp;#x3D;&lt;br&gt;分为高位交叉编址和低位交叉编址两种&lt;br&gt;&lt;img data-src=&#34;/f8.jpg&#34;&gt;&lt;br&gt;高位交叉编址每一块存储体的高位是一样的，实际上还是顺序存储。因此访问连续内存实际上访问的还是同一块存储体，并不能通过并行加快访问速度&lt;br&gt;低位交叉编址的每一块存储体低位相同，因此可以在恢复时间并行存取下一块内存的数据&lt;br&gt;存取周期为&lt;code&gt;T&lt;/code&gt;, 存取时间为&lt;code&gt;r&lt;/code&gt;, T &amp;#x3D; r + 恢复时间&lt;br&gt;对于n个存储器并行访问的存储器：&lt;br&gt;采用高位交叉编址的时间为&lt;code&gt;n*T&lt;/code&gt;&lt;br&gt;低位交叉编址为&lt;code&gt;T + (n-1)*r&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/f9.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;轮流启动：每个bank的存储位数等于数据总线的位数，此时采用轮流启动&lt;ul&gt;
&lt;li&gt;对于低位交叉编址，要保证&lt;code&gt;m&amp;gt;=T/r&lt;/code&gt;，以保证流水线不间断&lt;/li&gt;
&lt;li&gt;理想情况下，m个bank的交叉存储器每隔&lt;code&gt;T/m&lt;/code&gt;个周期可以读&amp;#x2F;写一个数据，若相邻m次访问的当存地址出现在同一个模块内，则会发生访存冲突，此时需要延迟发生冲突的访问请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同时启动：如果m个bank的总位数加起来刚好等于数据总线的位数，则m个同时存&amp;#x2F;取&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;主存储器与CPU的连接&#34;&gt;&lt;a href=&#34;#主存储器与CPU的连接&#34; class=&#34;headerlink&#34; title=&#34;主存储器与CPU的连接&#34;&gt;&lt;/a&gt;主存储器与CPU的连接&lt;/h2&gt;&lt;h3 id=&#34;连接原理&#34;&gt;&lt;a href=&#34;#连接原理&#34; class=&#34;headerlink&#34; title=&#34;连接原理&#34;&gt;&lt;/a&gt;连接原理&lt;/h3&gt;&lt;p&gt;通过总线连接（控制、地址、数据）&lt;br&gt;传输速率 &amp;#x3D; 总线宽度&amp;#x2F;传输时间&lt;br&gt;地址总线的位数决定了可寻址的最大内存空间&lt;br&gt;控制总线指出总线周期的类型和本次输入输出完成的时刻&lt;br&gt;将多个芯片集成在内存条上，由多个内存条和主板上的ROM芯片组成计算机所需的主存空间，通过总线与CPU连接&lt;/p&gt;
&lt;h3 id=&#34;主存容量的扩展&#34;&gt;&lt;a href=&#34;#主存容量的扩展&#34; class=&#34;headerlink&#34; title=&#34;主存容量的扩展&#34;&gt;&lt;/a&gt;主存容量的扩展&lt;/h3&gt;&lt;p&gt;数据总线宽度&amp;gt;存储字长 —— 位扩展&lt;br&gt;地址总线宽度&amp;gt;存储字数量所需的宽度&lt;br&gt;&lt;img data-src=&#34;/f10.jpg&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;位扩展法：增加存储字长&lt;br&gt;由于数据总线宽度大于存储字长，存在浪费情况，必须进行位扩展使数据位数与数据总线位数相等&lt;br&gt;如图：&lt;br&gt;&lt;img data-src=&#34;/f11.jpg&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字扩展法&lt;br&gt;地址总线存在浪费情况，对存储字的数量进行扩展&lt;br&gt;用多出来的地址线提供CS片选信号，决定输出的是哪个芯片的数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;线选法：n条多余的地址线，对应n个选片信号，地址空间不连续造成地址空间浪费（只能有一个1有效），电路简单&lt;br&gt;&lt;img data-src=&#34;/f13.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;译码器选法：n条多余的线对应$2^n$个选片信号，地址空间可以连续&lt;br&gt;&lt;img data-src=&#34;/f12.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;字、位同时扩展&lt;br&gt;既增加存储字的数量，又增加存储字长&lt;br&gt;&lt;img data-src=&#34;/f14.jpg&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;存储芯片的地址分配和片选&#34;&gt;&lt;a href=&#34;#存储芯片的地址分配和片选&#34; class=&#34;headerlink&#34; title=&#34;存储芯片的地址分配和片选&#34;&gt;&lt;/a&gt;存储芯片的地址分配和片选&lt;/h3&gt;&lt;p&gt;见上方线选法译码器选法&lt;/p&gt;
&lt;h3 id=&#34;存储器与CPU的连接&#34;&gt;&lt;a href=&#34;#存储器与CPU的连接&#34; class=&#34;headerlink&#34; title=&#34;存储器与CPU的连接&#34;&gt;&lt;/a&gt;存储器与CPU的连接&lt;/h3&gt;&lt;p&gt;……&lt;br&gt;片选信号还与CPU的方寸控制信号$\overline{MREQ}$有关（低电平有效），若CPU访问IO则此信号为高电平&lt;br&gt;MAR位数要看主存地址空间大小，而不能看实际上用了多少位&lt;/p&gt;
&lt;h2 id=&#34;外部存储器&#34;&gt;&lt;a href=&#34;#外部存储器&#34; class=&#34;headerlink&#34; title=&#34;外部存储器&#34;&gt;&lt;/a&gt;外部存储器&lt;/h2&gt;&lt;p&gt;磁盘存储器是以磁盘为存储介质的存储器，优点：容量大，价格低；记录介质可重复使用；可以长期保存；非破坏性读出。缺点：存取速度慢；机械结构复杂；对工作环境要求高&lt;/p&gt;
&lt;h3 id=&#34;磁盘存储器&#34;&gt;&lt;a href=&#34;#磁盘存储器&#34; class=&#34;headerlink&#34; title=&#34;磁盘存储器&#34;&gt;&lt;/a&gt;磁盘存储器&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;磁盘存储器&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;组成：磁盘驱动器，磁盘控制器，盘片&lt;br&gt;&lt;img data-src=&#34;/f15.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;存储区域：&amp;#x3D;&amp;#x3D;扇区（也称块）是磁盘读写的最小单位&amp;#x3D;&amp;#x3D;，按块存取&lt;ul&gt;
&lt;li&gt;磁头数(Heads)：一个记录面对应一个磁头&lt;/li&gt;
&lt;li&gt;柱面数(Cylinders)：表示每面盘片上的磁道数，不同记录面的相同位置的磁道构成一个柱面&lt;/li&gt;
&lt;li&gt;扇区数(Sectors)：每条磁道上有多少扇区&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disk Cache&lt;ul&gt;
&lt;li&gt;在内存上的一片区域，用来缓冲被送到磁盘上的数据。优点：写磁盘时按簇进行，可以避免频繁地用小块数据写；中间结果数据写回之前可以被快速再次使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;磁记录原理&lt;ul&gt;
&lt;li&gt;原理：当磁头和磁性记录介质有相对运动时，通过电磁转换完成读&amp;#x2F;写操作。&lt;/li&gt;
&lt;li&gt;编码方法：按某种方案（规律），把一连串的二进制信息变换成存储介质磁层中一个磁化翻转状态的序列，并使读&amp;#x2F;写控制电路容易、可靠地实现转换。&lt;/li&gt;
&lt;li&gt;磁记录方式：通常采用调频制（FM）和改进型调频制（MFM）的记录方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能指标&lt;ul&gt;
&lt;li&gt;&lt;p&gt;磁盘的容量：一个磁盘所能存储的字节总数称为磁盘容量。磁盘容量有非格式化容量和格式化容量之分。&lt;br&gt;非格式化容量是指磁记录表面可以利用的磁化单元总数，非格式化容量 &amp;#x3D; 记录面数 * 柱面数 * 每条磁道的磁化单元数&lt;br&gt;格式化容量是指按照某种特定的记录格式所能存储信息的总量，格式化容量 &amp;#x3D; 记录面数 * 柱面数 * 每道扇区数 * 每个扇区的容量&lt;br&gt;&amp;#x3D;&amp;#x3D;格式化容量 &amp;lt; 非格式化容量&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;记录密度:记录密度是指盘片单位面积上记录的二进制的信息量，通常以&lt;code&gt;道密度&lt;/code&gt;、&lt;code&gt;位密度&lt;/code&gt;和&lt;code&gt;面密度&lt;/code&gt;表示。道密度是&amp;#x3D;&amp;#x3D;沿磁盘半径方向单位长度上的磁道数&amp;#x3D;&amp;#x3D;；位密度是&amp;#x3D;&amp;#x3D;磁道单位长度上能记录的二进制代码位数&amp;#x3D;&amp;#x3D;；面密度是位密度和道密度的乘积。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;磁盘所有磁道记录的信息量一定是相等的，并不是圆越大信息越多，故每个磁道的位密度都不同，越靠近圆心位密度越大&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;平均存取时间：&lt;br&gt;&amp;#x3D;&amp;#x3D;平均存取时间 &amp;#x3D; 寻道时间（磁头移动到目的磁道）+ 旋转延迟时间（磁头定位到所在扇区）+ 传输时间（传输数据所花费的时间）&amp;#x3D;&amp;#x3D;&lt;br&gt;&amp;#x3D;&amp;#x3D;寻道时间通常取从最外道到最内道时间的一半，旋转延迟时间通常取旋转半周的时间&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据传输率：磁盘存储器在单位时间内向主机传送数据的字节数，称为数据传输率&lt;br&gt;假设磁盘转速为r（转&amp;#x2F;秒），每条磁道容量为N个字节，则数据传输率为$D_r&amp;#x3D;rN$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;磁盘地址&lt;br&gt;&lt;img data-src=&#34;/f16.jpg&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;磁盘的工作原理&lt;br&gt;硬盘的主要操作是寻址、读盘、写盘。每个操作都对应一个控制字，硬盘工作时，第一步是取控制字，第二步是执行控制字。&lt;br&gt;硬盘属于机械式部件，其读写操作是串行的，不可能在同一时刻既读又写，也不可能在同一时刻读两组数据或写两组数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;RAID&lt;br&gt;将多个独立的物理磁盘组成一个独立的逻辑磁盘，数据分割交叉存储，并行访问。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;RAID0：无冗余和无校验的磁盘阵列。&lt;/li&gt;
&lt;li&gt;RAID1：镜像磁盘阵列。每份数据存两遍，成本太高&lt;/li&gt;
&lt;li&gt;RAID2：采用纠错的海明码的磁盘阵列。&lt;br&gt;逻辑上连续的几个bit物理上分散存储在各个盘中4bit信息位+3bit海明校验位——可纠正1bit错误&lt;br&gt;每个码字有 &lt;code&gt;m&lt;/code&gt; 个信息位和 &lt;code&gt;r&lt;/code&gt; 个冗余位，$ (m+r+1)≤2^r$&lt;br&gt;参考xyx学长的计网笔记：&lt;br&gt;&lt;img data-src=&#34;/f17.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;RAID3：位交叉奇偶校验的磁盘阵列。前三个盘的奇偶校验位写在第四个盘上&lt;/li&gt;
&lt;li&gt;RAID4：块交叉奇偶校验的磁盘阵列。&lt;/li&gt;
&lt;li&gt;RAID5：无独立校验的奇偶校验磁盘阵列。在所有磁盘之间分条，并且每个数据块的奇偶校验块 (P) 写入到同一条带上&lt;br&gt;RAID1-RAID5数据不会损坏&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;固态硬盘-SSD&#34;&gt;&lt;a href=&#34;#固态硬盘-SSD&#34; class=&#34;headerlink&#34; title=&#34;固态硬盘(SSD)&#34;&gt;&lt;/a&gt;固态硬盘(SSD)&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;特性&lt;br&gt;属于Flash memory, EEPROM&lt;br&gt;组成：闪存翻译层，存储介质&lt;br&gt;&lt;img data-src=&#34;/f18.jpg&#34;&gt;&lt;br&gt;&amp;#x3D;&amp;#x3D;数据以页为单位读写，以块为单位擦除&amp;#x3D;&amp;#x3D;只有整个块被擦除之后才能写这一页，若视图修改包含已有数据的页$P_i$，则这个快中所有含有有用数据的页必须被复制到新的空白的块中，才能对$P_i$进行写操作&lt;br&gt;SSD的优点：&amp;#x3D;&amp;#x3D;随机写很慢，随机读比机械磁盘块&amp;#x3D;&amp;#x3D;，没噪声，能耗低，抗震性好，安全性高&lt;/li&gt;
&lt;li&gt;Wear Leveling 磨损均衡&lt;br&gt;重复擦写块就会磨损坏，一般是几百次到几千次&lt;br&gt;(1) 动态磨损均衡：&amp;#x3D;&amp;#x3D;写入时&amp;#x3D;&amp;#x3D;优先选择擦除次数少的新闪存块，只在写入时触发，仅考虑可用空间（对于冷数据不包括在空间池中，减少了可以用的block数量）&lt;br&gt;(2) 静态磨损均衡：就算没有写入，SSD也会监测并自动进行数据分配，让老的闪存快以读为主，让新的块腾出空间，以写为主：将数据从写入&amp;#x2F;擦除次数较低的block移动到其他block中，这样可以将低擦写次数的block释放出来，添加到可用可用空间池中，以便后续使用。仅覆盖单个闪存芯片单元&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Cache&#34;&gt;&lt;a href=&#34;#Cache&#34; class=&#34;headerlink&#34; title=&#34;Cache&#34;&gt;&lt;/a&gt;Cache&lt;/h2&gt;&lt;p&gt;解决CPU和主存速度不一致问题，由SRAM组成，通常集成在CPU中&lt;/p&gt;
&lt;h3 id=&#34;程序访问的局部性原理&#34;&gt;&lt;a href=&#34;#程序访问的局部性原理&#34; class=&#34;headerlink&#34; title=&#34;程序访问的局部性原理&#34;&gt;&lt;/a&gt;程序访问的局部性原理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;时间局部性：比如循环、数组（每次循环访问一次数组能体现时间局部性）&lt;/li&gt;
&lt;li&gt;空间局部性：最近的未来用到的信息很可能和正在使用的信息在存储空间上是临近的（顺序访问数组能体现空间局部性）&lt;br&gt;Cache利用局部性原理，将最近或频繁访问的数据复制到更快但容量较小的存储中，以便提高访问速度和系统性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::primary&lt;br&gt;&lt;strong&gt;hit&amp;#x2F;miss计算&lt;/strong&gt;&lt;br&gt;设$t_c$为访问一次Cache所需时间，$t_m$为访问一次内存所需时间，则Cache和主存同时被访问总时间为$t &amp;#x3D; Ht_c + (1 - H)t_m$&lt;br&gt;若先访问Cache再访问主存则时间为：$t &amp;#x3D; t_c + (1 - H)t_m$&lt;br&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;Cache工作原理&#34;&gt;&lt;a href=&#34;#Cache工作原理&#34; class=&#34;headerlink&#34; title=&#34;Cache工作原理&#34;&gt;&lt;/a&gt;Cache工作原理&lt;/h3&gt;&lt;p&gt;主存和Cache之间以&amp;#x3D;&amp;#x3D;块(Block)&amp;#x3D;&amp;#x3D;为单位进行数据交换&lt;/p&gt;
&lt;h3 id=&#34;映射方式&#34;&gt;&lt;a href=&#34;#映射方式&#34; class=&#34;headerlink&#34; title=&#34;映射方式&#34;&gt;&lt;/a&gt;映射方式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;直接映射 Directed mapped&lt;br&gt;&lt;img data-src=&#34;/f20.jpg&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/f27.jpg&#34;&gt;&lt;br&gt;cache 行号 &amp;#x3D; 主存块号 mod cache行数&lt;br&gt;物理地址结构：&lt;br&gt;| tag | index（行号） | byte offset |&lt;br&gt;&lt;img data-src=&#34;/f19.jpg&#34;&gt;&lt;br&gt;$$ index的位数 &amp;#x3D; log_2(cache的block数) $$&lt;br&gt;$$ byte\ offset的位数 &amp;#x3D; log_2(cache的block的字节数) $$&lt;br&gt;$$ tag的位数 &amp;#x3D; 32 - index的位数 - byte\ offset的位数 $$&lt;br&gt;在32位系统中，一个word是4B；64位系统中，一个word是8B&lt;br&gt;Cache的一行构成：&lt;br&gt;| valid bit | dirty bit | tag | data |&lt;br&gt;+++primary example&lt;br&gt;&lt;img data-src=&#34;/f21.jpg&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/f22.jpg&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/f23.jpg&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/f24.jpg&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/f25.jpg&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/f26.jpg&#34;&gt;&lt;br&gt;+++&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;全相连 Full Associative&lt;br&gt;block can go anywhere in cache&lt;br&gt;主存地址：&lt;br&gt;| tag | byte offset |&lt;br&gt;好处是能降低冲突率，每次需要和所有block比较是否hit开销大，不适合大容量Cache&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;组相连 Set Associative&lt;br&gt;&lt;img data-src=&#34;/f28.jpg&#34;&gt;&lt;br&gt;物理地址构成：&lt;br&gt;| tag | set index | 块内偏移 |&lt;br&gt;set index的位数表示有多少组，&lt;br&gt;$$ setNum &amp;#x3D;  \frac{Cache大小}{blockSize * 路数} $$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++primary&lt;br&gt;一个四路相联cache，CPU字长为4字节，内存和cache都是以字节编址，cache和内存交换单位为块，每个块大小为512字节，cache能够容纳1024个块。如果物理内存为32位地址:&lt;br&gt;set数 &amp;#x3D; 1024&amp;#x2F;4 &amp;#x3D; 256&lt;br&gt;index位数 &amp;#x3D; log2(256) &amp;#x3D; 8&lt;br&gt;blockOffset位数 &amp;#x3D; log2(512) &amp;#x3D; 9&lt;br&gt;tag位数 &amp;#x3D; 32 - 8 - 9 &amp;#x3D; 17&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;物理地址构成：| tag 17位 | set index 8位 | block offset 9 位 |&lt;/li&gt;
&lt;li&gt;计算内存地址FAB12389（16进制）在cache中可能的位置块号:&lt;br&gt;1111 1010 1011 0001 0010 0011 1000 1001&lt;br&gt;set index是10010001也就是145，所以可能的block号是145*4 &amp;#x3D; 580, 581, 582, 583&lt;br&gt;+++&lt;br&gt;&lt;img data-src=&#34;/f29.jpg&#34;&gt;&lt;br&gt;&amp;#x3D;&amp;#x3D;n路组相连需要n个比较器，位数&amp;#x3D;tag位数&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;替换算法&#34;&gt;&lt;a href=&#34;#替换算法&#34; class=&#34;headerlink&#34; title=&#34;替换算法&#34;&gt;&lt;/a&gt;替换算法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Random Replacement&lt;br&gt;随机找一块替换，实现简单，命中率低&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FIFO&lt;br&gt;选择最早进入的Cache行的进行替换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LRU&lt;br&gt;选择近期用得最少的Cache行进行替换，对每个Cache行维护一个计数器表示访问的次数，每次替换掉数值最小的。&lt;br&gt;2-way Cache要用1 bit来记录，4-way Cache要用2 bit来记录&lt;br&gt;+++primary&lt;br&gt;4-way Cache，有五个块映射到Cache同一组，访问顺序是{1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5}&lt;br&gt;&lt;img data-src=&#34;/f30.jpg&#34;&gt;&lt;br&gt;+++&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Cache一致性问题&#34;&gt;&lt;a href=&#34;#Cache一致性问题&#34; class=&#34;headerlink&#34; title=&#34;Cache一致性问题&#34;&gt;&lt;/a&gt;Cache一致性问题&lt;/h3&gt;&lt;p&gt;当write hit时：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write through 直写&amp;#x2F;全写法&lt;br&gt;Cache hit的时候，CPU不仅写入Cache，而且写入主存&lt;br&gt;为了减少写入主存的时间小号，增加一个write buffer，CPU同时写入Cache和write buffer，write buffer采用FIFO，当write buffer满时，将write buffer中的数据写入主存&lt;/li&gt;
&lt;li&gt;Write back 写回法&lt;br&gt;write hit时，只把数据写入Cache，只有此块被replace的时候才写入主存。减少了方寸次数，所以给cache行设置一个dirty bit，CPU写数据时将dirty bit置为1表示此块被修改过，repalce时需要写入主存&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;write miss时：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write Allocate 写分配法&lt;br&gt;如果发生write miss，会从内存中加载对应的数据块到 cache 中，然后进行写操作。和 write-back搭配使用，把后续对该块的修改都缓存在 cache 中&lt;/li&gt;
&lt;li&gt;Not-Write-Allocate 非写分配法&lt;br&gt;只更新主存不把主存写入Cache，适用于 write-through，因为即使写入 cache，也会马上写回内存，没必要占用 cache 空间。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;write through通常和not-write-allocate一起用，write back 通常和write allocate一起用&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;h4 id=&#34;使用分离的指令Cache和数据Cache&#34;&gt;&lt;a href=&#34;#使用分离的指令Cache和数据Cache&#34; class=&#34;headerlink&#34; title=&#34;使用分离的指令Cache和数据Cache&#34;&gt;&lt;/a&gt;使用分离的指令Cache和数据Cache&lt;/h4&gt;&lt;p&gt;+++primary&lt;br&gt;&lt;img data-src=&#34;/f31.jpg&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/f32.jpg&#34;&gt;&lt;br&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;虚拟存储器&#34;&gt;&lt;a href=&#34;#虚拟存储器&#34; class=&#34;headerlink&#34; title=&#34;虚拟存储器&#34;&gt;&lt;/a&gt;虚拟存储器&lt;/h2&gt;&lt;h3 id=&#34;基本概念&#34;&gt;&lt;a href=&#34;#基本概念&#34; class=&#34;headerlink&#34; title=&#34;基本概念&#34;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;p&gt;主存和辅存共同构成了虚拟存储器，对于应用程序员而言，虚拟存储器是透明的。（对OS开系统程序员不透明，他们必须管理TLB）&lt;br&gt;虚拟存储器具有主存的速度和辅存的容量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许多个程序之间高效、安全地共享内存&lt;/li&gt;
&lt;li&gt;允许单个程序使用超过内存容量的内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+++primary&lt;br&gt;实地址&amp;#x3D;主存页号+页内字地址&lt;br&gt;虚地址&amp;#x3D;虚存页号+页内字地址&lt;br&gt;辅存地址&amp;#x3D;磁盘号+盘面号+磁道号+扇区号&lt;br&gt;+++&lt;/p&gt;
&lt;p&gt;虚拟存储器缺页访问辅存的代价很大，当程序访问某个virtual page时，如果该页当前不在主存中，就会发生page fault，操作系统需要从辅存加载该页到主存，访问很慢所以访问代价大。因此采用&lt;code&gt;full associative&lt;/code&gt;允许virtual page可以加载到主存的任何一个空闲物理页框中，提高命中率。&lt;br&gt;写操作中处理一致性问题时采用 &lt;code&gt;write back&lt;/code&gt;。主存中的页面状态维护一个dirty标志位。当操作系统需要将该页替换出主存时，会检查该页的脏页标志：如果dirty，说明主存页面数据修改过，必须写回辅存；如果dirty为0，说明主存数据和辅存一致，直接丢弃主存页面，无需写回&lt;/p&gt;
&lt;h3 id=&#34;页式虚拟存储器&#34;&gt;&lt;a href=&#34;#页式虚拟存储器&#34; class=&#34;headerlink&#34; title=&#34;页式虚拟存储器&#34;&gt;&lt;/a&gt;页式虚拟存储器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基本单位：页&lt;br&gt;主存和虚拟地址空间被划分为相同大小的页，主存中的成为物理页（实页、页框、frame），虚拟地址空间中的页称为虚拟页（虚页）&lt;br&gt;页表(page table)记录了程序的虚页调入贮存时被安排在主存中的位置&lt;br&gt;一般的page大小从4KiB ~ 64KiB不等&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;页表(page table)&lt;br&gt;页表放在主存中。&lt;br&gt;&lt;img data-src=&#34;/f33.jpg&#34;&gt;&lt;br&gt;有效位（Valid Bit）：用于指示一个页面是否已经被加载到主存中。如果有效位被设置为1，这意味着对应的页面已经在物理内存中，可以立即被访问。如果有效位为0，则表示该页面当前不在内存中，可能需要从磁盘或其他存储设备中调入。当一个程序尝试访问一个页面时，操作系统会检查页表中的有效位，如果发现页面不在内存中，就会触发一个page fault，然后将页面从磁盘加载到内存中。&lt;br&gt;引用位（Reference Bit）：引用位主要用于页面置换算法中，它记录了页面最近是否被访问过。每当一个页面被访问时，操作系统会将该页面的引用位置为1。随着时间的推移，如果一个页面长时间没有被访问，它的引用位可能会被清零。当操作系统需要选择一个页面进行置换时，它可能会优先选择那些引用位为0的页面。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;转换过程：当一个程序尝试访问内存时，它会生成一个虚拟地址。虚拟地址包含两部分信息：页号（Page Number）和页内偏移（Offset）。用VPN作为索引查询page table，检查valid bit是否为1，从页表条目中获取PPN，PPN和page offset组合成物理地址。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;页式虚拟存储器的优点：页面长度固定，页表简单，调入方便&lt;br&gt;缺点：产生内碎片&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;p&gt;地址转换&lt;br&gt;&lt;img data-src=&#34;/f34.png&#34;&gt;&lt;br&gt;每个进程都有一个页表基址寄存器，存放该进程的页表首地址。然后通过VPN作为索引在页表中查找对应的页表项。物理地址&amp;#x3D;物理页号 + 页内地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TLB（快表）&lt;br&gt;为了减少访问主存的此书，TLB相当于page table的cache。&lt;br&gt;TLB用&lt;code&gt;SRAM&lt;/code&gt;实现，不在主存中，工作原理类似于Cache，通常采用full associative或者set associative。&lt;br&gt;&lt;img data-src=&#34;/f35.jpg&#34;&gt;&lt;br&gt;通过VPN查找TLB和Cache的查找一样，如果是全相连则直接比较tag，如果是组相连则通过低位查找set，然后用高位和tag比较。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具有TLB和Cache的多级存储系统&lt;br&gt;&lt;img data-src=&#34;/f36.jpg&#34;&gt;&lt;br&gt;查找时，TLB和page table可以同步进行，如果在TLB中找到了，page table的查找就作废。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/f37.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;段式虚拟存储器&#34;&gt;&lt;a href=&#34;#段式虚拟存储器&#34; class=&#34;headerlink&#34; title=&#34;段式虚拟存储器&#34;&gt;&lt;/a&gt;段式虚拟存储器&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/f38.jpg&#34;&gt;&lt;br&gt;按程序的逻辑结构划分，段的长度因程序而异。虚拟地址分为段号和段内地址。虚地址和实地址的转换依靠段表。&lt;br&gt;段表每行记录某个段的&amp;#x3D;&amp;#x3D;段号、有效位、段长度、段起始地址&amp;#x3D;&amp;#x3D;。&lt;br&gt;段表本身也是段，一般驻留在主存中&lt;br&gt;&amp;#x3D;&amp;#x3D;分页对程序员是透明的，分段对程序员是不透明的&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;段式虚拟存储器的优点：具有逻辑独立性，易于编译、管理、修改和保护，便于多道程序的共享&lt;br&gt;缺点：产生外碎片&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;段页式虚拟存储器&#34;&gt;&lt;a href=&#34;#段页式虚拟存储器&#34; class=&#34;headerlink&#34; title=&#34;段页式虚拟存储器&#34;&gt;&lt;/a&gt;段页式虚拟存储器&lt;/h3&gt;&lt;p&gt;把程序按逻辑结构分段，再在每段划分固定大小的页。因此段的长度必须是页长度的整数倍，段的起点必须是某一页的起点。&lt;br&gt;虚地址分为&amp;#x3D;&amp;#x3D;段号，段内页号，页内地址&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问流程：从段表基址寄存器（STBR） 中读取段表的起始地址，用段号（s）作为索引，在段表中查找第 s 个表项，从该表项中取出该段对应的页表起始地址（即页表基址），与段内页号合成得到页表地址（页表项地址 &amp;#x3D; PTBR + p × 页表项大小），读取第 p 个页表项得到物理页号（PPN），和页内地址合成得到物理地址&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="存储系统" />
        <updated>2025-06-30T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2025/07/01/computer-science/computer-organization/%E9%94%99%E9%A2%98%E9%9B%86%E5%90%88/</id>
        <title>错题集合</title>
        <link rel="alternate" href="http://example.com/2025/07/01/computer-science/computer-organization/%E9%94%99%E9%A2%98%E9%9B%86%E5%90%88/"/>
        <content type="html">&lt;h1 id=&#34;错题集合&#34;&gt;&lt;a href=&#34;#错题集合&#34; class=&#34;headerlink&#34; title=&#34;错题集合&#34;&gt;&lt;/a&gt;错题集合&lt;/h1&gt;&lt;h2 id=&#34;Ch2&#34;&gt;&lt;a href=&#34;#Ch2&#34; class=&#34;headerlink&#34; title=&#34;Ch2&#34;&gt;&lt;/a&gt;Ch2&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;某计算机字长为8位，CPU中有一个8位加法器，已知无符号数x&amp;#x3D;69, y&amp;#x3D;38，若在该加法器中计算x-y，则加法器的两个输入短信息和输入的低位进位信息分别为（）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;0100 0101, 1101 1001, 1 &lt;blockquote&gt;
&lt;p&gt;无符号数减法，在加法器中输入x的原码，y的取反和1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;减法指令 “sub R1, R2, R3” 的功能为 “(R1) - (R2) -&amp;gt; R3”, 该指令执行后将生成进位&amp;#x2F;借位标志CF和溢出标志OF，若(R1) &amp;#x3D; FFFF FFFFH, R2 &amp;#x3D; FFFF FFF0H, 则该减法指令执行后，CF和OF分别为：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;CF &amp;#x3D; 0, OF &amp;#x3D; 0&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;已知x, y为int类型，当x &amp;#x3D; 100, y &amp;#x3D; 200时，执行 “x - y”指令得到的溢出标志OF和结尾标志CF分别为0，1，那么当x &amp;#x3D; 1-, y &amp;#x3D; -20时，执行该指令得到的OF和CF分别为：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;OF &amp;#x3D; 0, CF &amp;#x3D; 1&lt;blockquote&gt;
&lt;p&gt;ALU生成标志位时只负责计算，不管运算对象是有符号数还是无符号数。CF&amp;#x3D;1表示当做无符号数运算时溢出，OF&amp;#x3D;1表示当做有符号数运算时溢出。当做有符号数，10-(-20)没问题，所以OF&amp;#x3D;0；把它俩当做无符号数的时候，x &amp;#x3D; 10 &amp;#x3D; 0000 0000 0000 0000 0000 0000 0000 1010，y &amp;#x3D; -20 &amp;#x3D; 1111 1111 1111 1111 1111 1111 1110 1100，此时x &amp;lt; y，所以CF&amp;#x3D;1。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;下列关于整数乘法运算的叙述中，错误的是：D&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;A. 用阵列乘法器实现的乘运算可以在一个时钟周期内完成 –正确，因为是组合逻辑理论上可以在一个clc里完成&lt;/li&gt;
&lt;li&gt;B. 用ALU和移位器实现的乘运算无法在一个时钟周期内完成&lt;/li&gt;
&lt;li&gt;C. 变量与常数的乘运算可编译优化为若干移位及家&amp;#x2F;减运算指令&lt;/li&gt;
&lt;li&gt;D. 两个变量的乘运算无法编译转换为移位及加法等指令的循环实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Ch4&#34;&gt;&lt;a href=&#34;#Ch4&#34; class=&#34;headerlink&#34; title=&#34;Ch4&#34;&gt;&lt;/a&gt;Ch4&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;简化地址结构的方式是尽量采用： 隐含寻址&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="错题" />
        <updated>2025-06-30T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2025/05/14/computer-science/computer-organization/ch2/</id>
        <title>Ch2</title>
        <link rel="alternate" href="http://example.com/2025/05/14/computer-science/computer-organization/ch2/"/>
        <content type="html">&lt;h1 id=&#34;Ch2-数据的表示和运算&#34;&gt;&lt;a href=&#34;#Ch2-数据的表示和运算&#34; class=&#34;headerlink&#34; title=&#34;Ch2 数据的表示和运算&#34;&gt;&lt;/a&gt;Ch2 数据的表示和运算&lt;/h1&gt;&lt;h2 id=&#34;2-1-进位计数制及其相互转换&#34;&gt;&lt;a href=&#34;#2-1-进位计数制及其相互转换&#34; class=&#34;headerlink&#34; title=&#34;2.1 进位计数制及其相互转换&#34;&gt;&lt;/a&gt;2.1 进位计数制及其相互转换&lt;/h2&gt;&lt;h3 id=&#34;2-1-1&#34;&gt;&lt;a href=&#34;#2-1-1&#34; class=&#34;headerlink&#34; title=&#34;2.1.1&#34;&gt;&lt;/a&gt;2.1.1&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;十进制二进制八进制十六进制转换&lt;ul&gt;
&lt;li&gt;略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-1-2-定点数的编码表示&#34;&gt;&lt;a href=&#34;#2-1-2-定点数的编码表示&#34; class=&#34;headerlink&#34; title=&#34;2.1.2 定点数的编码表示&#34;&gt;&lt;/a&gt;2.1.2 定点数的编码表示&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定点数一般表示定点小数和定点整数，小数是符号位.xxx，整数是符号位xxxx.0&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;感觉不是什么重要的东西，浮点数表示比较重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;原码，反码，补码&lt;ul&gt;
&lt;li&gt;正数的原码反码补码相同&lt;/li&gt;
&lt;li&gt;原码表示的范围为 $-2^n+1 ~ 2^n-1$&lt;/li&gt;
&lt;li&gt;补码表示的范围为 $-2^n ~ 2^n-1$&lt;/li&gt;
&lt;li&gt;负数的原码是1+绝对值，反码是1+绝对值取反，补码是反码+1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移码：用来表示浮点数的阶码，只能表示整数&lt;ul&gt;
&lt;li&gt;一般用移码表示浮点数的阶码，用补码表示定点整数&lt;br&gt;$$ [x]_移 &amp;#x3D; 2^n + x $$&lt;br&gt;移码就是在真值x前面加一个offset，比如取offset为2^7，就在补码的第8位加上1&lt;/li&gt;
&lt;li&gt;比如正数10101，移码是10010101，负数-10101的补码是11101011，所以移码是01101011&lt;/li&gt;
&lt;li&gt;移码的作用是&amp;#x3D;&amp;#x3D;保持数据原有的大小顺序&amp;#x3D;&amp;#x3D;，移码大真值大，移码小真值小，所以可以直观地进行比较&lt;br&gt;:::warning&lt;br&gt;相同位数的补码和移码表示具有相同的数据表示范围，区别只是表示方法不同&lt;br&gt;补码与移码只差一个符号位。同一个数的补码和移码表示，其数值部分相同，而符号位相反。&lt;br&gt;:::&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-1-3-整数表示&#34;&gt;&lt;a href=&#34;#2-1-3-整数表示&#34; class=&#34;headerlink&#34; title=&#34;2.1.3 整数表示&#34;&gt;&lt;/a&gt;2.1.3 整数表示&lt;/h3&gt;&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&#34;2-1-4&#34;&gt;&lt;a href=&#34;#2-1-4&#34; class=&#34;headerlink&#34; title=&#34;2.1.4&#34;&gt;&lt;/a&gt;2.1.4&lt;/h3&gt;&lt;p&gt;c中的强制转换&lt;br&gt;short转成unsigned short直接把二进制看成unsigned short，比如-1变成65535&lt;br&gt;int变成short直接截断&lt;br&gt;小字长转大字长不会改变值，如果是unsigned就会在前面补0，如果是有符号数就在前面补符号位&lt;br&gt;short转unsigned int，先对short进行符号扩展到int，再把它当做unsigned int，如果是unsigned short转int，就进行零扩展再看成int……&lt;/p&gt;
&lt;p&gt;一些题目&lt;br&gt;+++info example&lt;br&gt;;;;id3 t1&lt;br&gt;若$[x]_补 &amp;#x3D; 1,x_1x_2x_3x_4x_5x_6$,其中$x_i$取0或1，若要x&amp;gt;-32，应当满足：&lt;br&gt;C. $x_1$为1，$x_2…x_6$中至少有一位为1&lt;br&gt;1100000是-32，要比-32大所以绝对值要小，所以数值部分要大，所以$x_1$必须是1,后面随便有个1就行&lt;br&gt;;;;&lt;br&gt;;;;id3 t2&lt;br&gt;设x为正数，$[x]_补 &amp;#x3D; 1,x_1x_2x_3x_4x_5$,若要x&amp;lt;-16，应当满足：&lt;br&gt;C. $x_1$必须为0，其它任意&lt;br&gt;110000是-16，要小于-16所以数值部分绝对值要小，所以只要$x_1$为0就比-16小&lt;br&gt;;;;&lt;br&gt;;;;id3 t3&lt;br&gt;一个8位的二进制整数由2个“0”和6个“1”组成，采用补码或者移码表示，则&lt;br&gt;若采用移码表示，偏置值为127，则此整数最小为-64（偏置为127需要在补码加上1111111，&amp;#x3D;&amp;#x3D;要让数值最小，应该把1放低位&amp;#x3D;&amp;#x3D;，所以移码是00111111，补码是10111111是-64）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;：前面说过，移码大真值大，移码小真值小，所以要让数值最小把1放低位就行了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;若采用补码表示，则此整数最小为-97（10011111&amp;#x3D;-97）&lt;br&gt;;;;&lt;br&gt;;;;id3 比较大小的方法&lt;br&gt;对于无符号数，数值大的数就大&lt;br&gt;对于有符号数的原码和反码比较大小：先看正负然后看数值，反码数值转成原码再比&lt;br&gt;对于补码比较大小，正数正常比较，负数数值部分越小，绝对值越大（前面1更多的数的绝对值越小，所以11111111是-1）&lt;br&gt;;;;&lt;br&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;2-2-运算方法和运算电路&#34;&gt;&lt;a href=&#34;#2-2-运算方法和运算电路&#34; class=&#34;headerlink&#34; title=&#34;2.2 运算方法和运算电路&#34;&gt;&lt;/a&gt;2.2 运算方法和运算电路&lt;/h2&gt;&lt;h3 id=&#34;2-2-1-基本运算部件&#34;&gt;&lt;a href=&#34;#2-2-1-基本运算部件&#34; class=&#34;headerlink&#34; title=&#34;2.2.1 基本运算部件&#34;&gt;&lt;/a&gt;2.2.1 基本运算部件&lt;/h3&gt;&lt;h4 id=&#34;一位全加器&#34;&gt;&lt;a href=&#34;#一位全加器&#34; class=&#34;headerlink&#34; title=&#34;一位全加器&#34;&gt;&lt;/a&gt;一位全加器&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;用真值表实现的：进位C，和S&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;A&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;B&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Cin&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Cout&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;S&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;可以用卡诺图或者直接理解&lt;br&gt;&lt;img data-src=&#34;/img2.jpg&#34;&gt;&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;S &amp;amp;&amp;#x3D; \overline{A} , \overline{B} , C_i + \overline{A} , B , \overline{C_i} + A , \overline{B} , \overline{C_i} + A , B , C_i \&lt;br&gt;&amp;amp;&amp;#x3D; A \oplus B \oplus C_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;Co &amp;amp;&amp;#x3D; AB + A \overline{B} C_i + \overline{A} B C_i \&lt;br&gt;&amp;amp;&amp;#x3D; AB + (A \oplus B) \cdot C_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;串行进位加法器&#34;&gt;&lt;a href=&#34;#串行进位加法器&#34; class=&#34;headerlink&#34; title=&#34;串行进位加法器&#34;&gt;&lt;/a&gt;串行进位加法器&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;把n个一位全加器连起来&lt;br&gt;&lt;img data-src=&#34;/img3.png&#34;&gt;&lt;br&gt;Carry Propagation &amp;amp; Delay&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;并行进位加法器&#34;&gt;&lt;a href=&#34;#并行进位加法器&#34; class=&#34;headerlink&#34; title=&#34;并行进位加法器&#34;&gt;&lt;/a&gt;并行进位加法器&lt;/h4&gt;&lt;p&gt;对Cin进行look ahead&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;前面提到：&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;Co &amp;amp;&amp;#x3D; AB + A \overline{B} C_i + \overline{A} B C_i \&lt;br&gt;   &amp;amp;&amp;#x3D; AB + (A \oplus B) \cdot C_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;下一位的Cin等于上一位的Cout，所以可以进行look ahead，这里让&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;G_i &amp;amp;&amp;#x3D; A_iB_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;P_i &amp;amp;&amp;#x3D; A_i \oplus B_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;所以&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;C_{i+1} &amp;amp;&amp;#x3D; G_i + P_iC_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;S_i &amp;amp;&amp;#x3D; P_i \oplus C_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;就能得到超前进位的效果&lt;/p&gt;
&lt;h4 id=&#34;带标志加法器&#34;&gt;&lt;a href=&#34;#带标志加法器&#34; class=&#34;headerlink&#34; title=&#34;带标志加法器&#34;&gt;&lt;/a&gt;带标志加法器&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;/img5.jpg&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;溢出标志 $OF &amp;#x3D; C_n  \oplus C_{n-1}$，只能判断有符号数是否溢出&lt;br&gt;-两个正数加起来变成负数或者两个负数加起来变成正数，就会溢出&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;A&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;B&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;$C_{n-1}$&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;F&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;$C_n$&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;OF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;第二行A&amp;#x3D;0, B&amp;#x3D;0, F&amp;#x3D;1，正+正&amp;#x3D;负&lt;br&gt;  第七行A&amp;#x3D;0, B&amp;#x3D;1, F&amp;#x3D;0，负+负&amp;#x3D;正&lt;br&gt;  所以OF&amp;#x3D;1，表示有溢出&lt;br&gt;  观察发现$OF &amp;#x3D; C_{n-1}  \oplus C_n$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;符号标志 $SF &amp;#x3D; F_{n-1}$，输出的最高位决定有符号数的正负&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CF&lt;/code&gt;进位&amp;#x2F;借位标志：用于判断无符号数的加减运算是否溢出&lt;ul&gt;
&lt;li&gt;$CF &amp;#x3D; Cin \oplus Cout$&lt;/li&gt;
&lt;li&gt;此处的Cin和Cout表示最开始的输入和最后的输出，还没理解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ZF&lt;/code&gt;零标志 当且仅当所有F&amp;#x3D;0时为1，否则为0（把所有F作或非）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SF&lt;/code&gt;符号标志位,结果为负，即符号位为1时SF&amp;#x3D;1，否则为0&lt;br&gt;具体可以看这篇：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dhYmJ5X19fXy9hcnRpY2xlL2RldGFpbHMvODA4MjU1NDk=&#34;&gt;https://blog.csdn.net/gabby____/article/details/80825549&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ALU&#34;&gt;&lt;a href=&#34;#ALU&#34; class=&#34;headerlink&#34; title=&#34;ALU&#34;&gt;&lt;/a&gt;ALU&lt;/h4&gt;&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&#34;2-2-2-定点数的移位运算&#34;&gt;&lt;a href=&#34;#2-2-2-定点数的移位运算&#34; class=&#34;headerlink&#34; title=&#34;2.2.2 定点数的移位运算&#34;&gt;&lt;/a&gt;2.2.2 定点数的移位运算&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;左移一位*2，右移一位&amp;#x2F;2&lt;/li&gt;
&lt;li&gt;逻辑移位：移完直接补0&lt;ul&gt;
&lt;li&gt;无符号数若高位的1移出，则发生溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;算数移位：有符号数右移时，补符号位，左移直接移，如果高位和符号位不同，则发生溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定点数的加减运算&#34;&gt;&lt;a href=&#34;#定点数的加减运算&#34; class=&#34;headerlink&#34; title=&#34;定点数的加减运算&#34;&gt;&lt;/a&gt;定点数的加减运算&lt;/h3&gt;&lt;p&gt;补码相加减，略&lt;br&gt;主要是溢出判断：符号相同的数相加或者符号相异的数相减会发生溢出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一位符号位（参考前面OF）&lt;/li&gt;
&lt;li&gt;双符号位（模4补码）&lt;ul&gt;
&lt;li&gt;符号位左边那一位表示正确的符号，0为正，1为负；右边那一位如果和左边的相同，如 “00”表示正且无溢出，”11”表示负且无溢出。如果右边那一位与左边那一位不一样，则表示有溢出&lt;/li&gt;
&lt;li&gt;溢出逻辑判断：若V为0则无溢出，V为1则溢出&lt;/li&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;存储的时候，模4补码只需要一位符号位&amp;#x3D;&amp;#x3D;，因为任何一个正确的数值它的两个符号位是相同的。它只是把两个模4补码的数送往ALU进行运算的时候，把符号位同时送入ALU的双符号位中，即&amp;#x3D;&amp;#x3D;只在ALU中采用双符号位&amp;#x3D;&amp;#x3D;&lt;br&gt;$$&lt;br&gt;V &amp;#x3D; S_{s1} \oplus S_{s2}&lt;br&gt;$$&lt;br&gt;例子看这篇写的挺清楚：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bl9ib3lfYm95X3N1bi9hcnRpY2xlL2RldGFpbHMvODc5MTcwMjA=&#34;&gt;https://blog.csdn.net/sun_boy_boy_sun/article/details/87917020&lt;/span&gt;&lt;br&gt;总之两位不同则有溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定点数的乘除运算&#34;&gt;&lt;a href=&#34;#定点数的乘除运算&#34; class=&#34;headerlink&#34; title=&#34;定点数的乘除运算&#34;&gt;&lt;/a&gt;定点数的乘除运算&lt;/h3&gt;&lt;p&gt;略，列竖式即可&lt;/p&gt;
&lt;h3 id=&#34;浮点数的表示与运算&#34;&gt;&lt;a href=&#34;#浮点数的表示与运算&#34; class=&#34;headerlink&#34; title=&#34;浮点数的表示与运算&#34;&gt;&lt;/a&gt;浮点数的表示与运算&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;浮点数的表示格式&lt;br&gt;$$&lt;br&gt;N &amp;#x3D; (-1)^s \cdot M \cdot R^E&lt;br&gt;$$&lt;br&gt;s符号，M尾数，E阶码，R基数&lt;/li&gt;
&lt;li&gt;浮点数的表示范围&lt;br&gt;范围关于原点对称，运算结果大于最大正数时成为正上溢，小遇绝对值最大负数是成为负上溢，统称上溢。运算结果在0-最小整数之间成为正下溢，负数同理，统称下溢（原因是精度不够）&lt;/li&gt;
&lt;li&gt;浮点数的规格化&lt;br&gt;化成$1.xxxxx… \cdot 2^n$的形式&lt;/li&gt;
&lt;li&gt;IEEE754&lt;br&gt;符号，阶码，尾数&lt;br&gt;32位单精度：1 8 23，偏置为$2^7-1&amp;#x3D;127$，真值为$(-1)^s \cdot 2^{e-127} \cdot (1.M)$&lt;br&gt;单精度表示的最小值为$1 \cdot 2^{1-127} \cdot (1.000…) &amp;#x3D; 2^{-126}$，最大值为$1 \cdot 2^{254-127} \cdot (1.111…) &amp;#x3D; (2 - 2^{-23}) \cdot 2^{127}$}&lt;br&gt;64位双精度：1 11 52，偏置为$2^{10}-1&amp;#x3D;1023$，真值为$(-1)^s \cdot 2^{e-1023} \cdot (1.M)$，最大值为$1 \cdot 2^{2046-1023} \cdot (1.111…) &amp;#x3D; (2 - 2^{-52}) \cdot 2^{1023}$&lt;br&gt;阶码全为0或者全为1有特殊意义&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;br&gt;阶码全1尾数不全0表示无穷大&lt;br&gt;阶码全1尾数全0表示NaN&lt;br&gt;阶码全0尾数不全0表示非规格化数，隐藏位为0（精度不够表示，需要特殊处理）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;浮点数的加减运算&#34;&gt;&lt;a href=&#34;#浮点数的加减运算&#34; class=&#34;headerlink&#34; title=&#34;浮点数的加减运算&#34;&gt;&lt;/a&gt;浮点数的加减运算&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;对阶&lt;/li&gt;
&lt;li&gt;尾数相加减&lt;/li&gt;
&lt;li&gt;尾数规格化，修改阶数&lt;/li&gt;
&lt;li&gt;舍入&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;就近舍入：舍入为最近的可表示数，当结果是两个可表示数的中间时，选择结果为偶数&lt;/li&gt;
&lt;li&gt;正向舍入：朝数轴正无穷方向舍入，取右边最近的可表示数&lt;/li&gt;
&lt;li&gt;负向舍入：和正向相反&lt;/li&gt;
&lt;li&gt;截断法：直接截取所需位数，是一种趋向原点的舍入&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;溢出判断&lt;br&gt;对阶码加减时要判断是否溢出&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="数据的表示与运算" />
        <updated>2025-05-13T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2025/05/13/computer-science/computer-organization/ch1/</id>
        <title>Ch1</title>
        <link rel="alternate" href="http://example.com/2025/05/13/computer-science/computer-organization/ch1/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;计组考研复习笔记，参考资料：王道，zju数逻&amp;#x2F;计组&amp;#x2F;体系课程ppt&lt;br&gt;怕学完忘了写个笔记保留一下顺便加深印象x&lt;br&gt;王道书写得好烂、、&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Ch1-计算机系统概述&#34;&gt;&lt;a href=&#34;#Ch1-计算机系统概述&#34; class=&#34;headerlink&#34; title=&#34;Ch1 计算机系统概述&#34;&gt;&lt;/a&gt;Ch1 计算机系统概述&lt;/h1&gt;&lt;h2 id=&#34;1-1-计算机发展历程&#34;&gt;&lt;a href=&#34;#1-1-计算机发展历程&#34; class=&#34;headerlink&#34; title=&#34;1.1 计算机发展历程&#34;&gt;&lt;/a&gt;1.1 计算机发展历程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;四代计算机：电子管-&amp;gt;晶体管-&amp;gt;集成电路-&amp;gt;超大规模集成电路&lt;/li&gt;
&lt;li&gt;摩尔定律：集成电路上可以容纳的晶体管数目在大约每经过18个月到24个月便会增加一倍&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-2-计算机系统层次结构&#34;&gt;&lt;a href=&#34;#1-2-计算机系统层次结构&#34; class=&#34;headerlink&#34; title=&#34;1.2 计算机系统层次结构&#34;&gt;&lt;/a&gt;1.2 计算机系统层次结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;计算机系统：硬件+软件&lt;/li&gt;
&lt;li&gt;对于某一功能，既能用软件实现又能用硬件实现，称为软、硬件在逻辑功能上是等价的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-2-硬件&#34;&gt;&lt;a href=&#34;#1-2-2-硬件&#34; class=&#34;headerlink&#34; title=&#34;1.2.2 硬件&#34;&gt;&lt;/a&gt;1.2.2 硬件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;冯·诺依曼机的特点：&lt;ul&gt;
&lt;li&gt;采用“存储程序”的工作方式&lt;/li&gt;
&lt;li&gt;冯·诺依曼计算机由五大部件组成：运算器、控制器、存储器、输入设备和输出设备&lt;/li&gt;
&lt;li&gt;指令和数据以同等地位存储在存储器中&lt;/li&gt;
&lt;li&gt;指令和数据均用二进制代码表示&lt;/li&gt;
&lt;li&gt;指令由操作码和地址码组成&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img1.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;计算机的功能部件：&lt;ul&gt;
&lt;li&gt;输入设备&lt;/li&gt;
&lt;li&gt;输出设备&lt;/li&gt;
&lt;li&gt;存储器：主存+外存&lt;ul&gt;
&lt;li&gt;CPU能直接访问的是主存&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img2.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;MAR位10位则最多有$2^{10}$个存储单元&lt;/li&gt;
&lt;li&gt;在现代计算机中MAR和MDR存在CPU中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;运算器：进行算术运算和逻辑运算&lt;ul&gt;
&lt;li&gt;核心是ALU：通用寄存器有&amp;#x3D;&amp;#x3D;累加器(ACC)，乘商寄存器(MQ)，操作数寄存器(X)&amp;#x3D;&amp;#x3D;，变址寄存器(IX)，基址寄存器(BR)等，前三个必备&lt;/li&gt;
&lt;li&gt;程序状态寄存器(PSW)&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img3.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制器：由PC, IR和control unit组成&lt;ul&gt;
&lt;li&gt;: RISCV控制器&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img4.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU由运算器、控制器和cache组成&lt;/li&gt;
&lt;li&gt;总线有地址总线、数据总线、控制总线&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-3-软件&#34;&gt;&lt;a href=&#34;#1-2-3-软件&#34; class=&#34;headerlink&#34; title=&#34;1.2.3 软件&#34;&gt;&lt;/a&gt;1.2.3 软件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;组成：系统软件(OS, DBMS, 编译器, …)+应用软件&lt;/li&gt;
&lt;li&gt;语言：汇编语言、机器语言、高级语言&lt;ul&gt;
&lt;li&gt;汇编器：把汇编语言翻译成机器语言&lt;/li&gt;
&lt;li&gt;编译器：把高级语言翻译成汇编语言或机器语言&lt;/li&gt;
&lt;li&gt;解释器：把高级语言翻译成&amp;#x3D;&amp;#x3D;机器语言&amp;#x3D;&amp;#x3D;(比如python)&lt;br&gt;  +++info example&lt;br&gt;  ;;;id3 题目&lt;br&gt;  :chestnut:&lt;br&gt;  将高级语言源程序转换为机器级目标代码文件的程序是 []。&lt;br&gt;  A. 汇编程序&lt;br&gt;  B. 链接程序&lt;br&gt;  C. 编译程序&lt;br&gt;  D. 解释程序&lt;br&gt;  ;;;&lt;br&gt;  ;;;id3 答案&lt;br&gt;  C. 编译程序&lt;br&gt;  因为解释程序不生成目标代码，编译器可以把高级语言翻译成汇编语言或者直接翻译成机器语言&lt;br&gt;  ;;;&lt;br&gt;  +++&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-4-计算机系统的层次结构&#34;&gt;&lt;a href=&#34;#1-2-4-计算机系统的层次结构&#34; class=&#34;headerlink&#34; title=&#34;1.2.4 计算机系统的层次结构&#34;&gt;&lt;/a&gt;1.2.4 计算机系统的层次结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;看看就好&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img5.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-5-计算机系统的工作原理&#34;&gt;&lt;a href=&#34;#1-2-5-计算机系统的工作原理&#34; class=&#34;headerlink&#34; title=&#34;1.2.5 计算机系统的工作原理&#34;&gt;&lt;/a&gt;1.2.5 计算机系统的工作原理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;程序执行前，需要把所含的指令和数据一起放入主存中&lt;/li&gt;
&lt;li&gt;五个阶段：IF-ID-EX-MEM-WB&lt;/li&gt;
&lt;li&gt;c程序怎么变成可执行文件的：直接看图&lt;ul&gt;
&lt;li&gt;&lt;img data-src=&#34;/img6.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;汇编器把指令打包成可重定位目标代码文件：使用相对地址和符号引用来表示各个代码段之间的关系（代码段、数据段、符号表、重定位表…）使得代码或数据能在内存中任意位置加载或运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指令执行过程：后面几章会具体讲&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-3-计算机的性能指标&#34;&gt;&lt;a href=&#34;#1-3-计算机的性能指标&#34; class=&#34;headerlink&#34; title=&#34;1.3 计算机的性能指标&#34;&gt;&lt;/a&gt;1.3 计算机的性能指标&lt;/h2&gt;&lt;h3 id=&#34;1-3-1-主要性能指标&#34;&gt;&lt;a href=&#34;#1-3-1-主要性能指标&#34; class=&#34;headerlink&#34; title=&#34;1.3.1 主要性能指标&#34;&gt;&lt;/a&gt;1.3.1 主要性能指标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;字长：一次整数运算所能处理的二进制数据的位数&lt;br&gt; :::info&lt;br&gt; 机器字长、指令字长和存储字长&lt;br&gt; :::&lt;/li&gt;
&lt;li&gt;带宽&lt;code&gt;bandwidth&lt;/code&gt;：总线一次能并行传送信息的位数&lt;/li&gt;
&lt;li&gt;主存容量&lt;/li&gt;
&lt;li&gt;运算速度&lt;ul&gt;
&lt;li&gt;吞吐量&lt;code&gt;throughput&lt;/code&gt;：一次输入数据所对应的输出数据个数&lt;/li&gt;
&lt;li&gt;响应时间&lt;code&gt;Response (Execution) time&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;主频&lt;/li&gt;
&lt;li&gt;clock cycle time( &amp;#x3D; 1&amp;#x2F;CPU frequency)&lt;/li&gt;
&lt;li&gt;MIPS: million instructions per second&lt;/li&gt;
&lt;li&gt;FLOPS: floating-point operations per second&lt;blockquote&gt;
&lt;p&gt;CPI: clock cycles per instruction(IPC: CPI的倒数)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ \begin{aligned}&lt;br&gt;    \text{CPU execution time} &amp;amp;&amp;#x3D; \text{CPU clock cycles} \times \text{Clock cycle time} \&lt;br&gt;    &amp;amp;&amp;#x3D; \frac{\text{CPU clock cycles}}{\text{Clock rate}}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;    \text{CPU clock cycles} &amp;amp;&amp;#x3D; \text{Instructions count} \times \text{Average cycles per instruction}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;    \text{CPU execution time} &amp;amp;&amp;#x3D; \text{CPU clock cycles} \times \text{Clock cycle time} \&lt;br&gt;    &amp;amp;&amp;#x3D; \frac{\text{CPU clock cycles}}{\text{Clock rate}}&lt;br&gt;\end{aligned} $$&lt;/p&gt;
&lt;p&gt;$$ \begin{aligned}&lt;br&gt;     \text{performance} &amp;amp;&amp;#x3D; \frac{1}{\text{CPU execution time}}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;“Processor X is n times fast than Y” is&lt;br&gt;$$ \begin{aligned}&lt;br&gt;    \text{n} &amp;amp;&amp;#x3D; \frac{\text{CPU execution time of Y}}{\text{CPU execution time of X}}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;IPS: instructions per second&lt;br&gt;$$ \begin{aligned}&lt;br&gt;    \text{IPS} &amp;amp;&amp;#x3D; \frac{\text{CPU frequency}}{\text{CPI}}&lt;br&gt;        &amp;amp;&amp;#x3D; \frac{1}{\text{CPU clock cycles} \times \text{CPU execution time}}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其他公式，，，用到再说吧&lt;/li&gt;
&lt;li&gt;兼容：软件或硬件的通用性&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在用于科学计算的计算机中，标志系统性能最有用的参数是浮点数运算相关的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MFLOPS 10^6&lt;/li&gt;
&lt;li&gt;GFLOPS 10^9&lt;/li&gt;
&lt;li&gt;TFLOPS 10^12&lt;/li&gt;
&lt;li&gt;PFLOPS 10^15&lt;/li&gt;
&lt;li&gt;EFLOPS 10^18&lt;/li&gt;
&lt;li&gt;ZFLOPS 10^21&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</content>
        <category term="计算机组成" />
        <updated>2025-05-12T16:00:00.000Z</updated>
    </entry>
</feed>
