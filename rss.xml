<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>NoResponse&#39;s Blog</title>
        <link>http://example.com</link>
        <description>成分复杂的CSer from ZJU</description>
        <language>en</language>
        <pubDate>Thu, 19 Jun 2025 00:00:00 +0800</pubDate>
        <lastBuildDate>Thu, 19 Jun 2025 00:00:00 +0800</lastBuildDate>
        <category>人工智能</category>
        <category>软件工程</category>
        <category>Liveness Analysis</category>
        <category>语法分析</category>
        <category>Register Allocation</category>
        <category>抽象语法</category>
        <category>编译原理</category>
        <category>词法分析</category>
        <category>语义分析</category>
        <category>活动记录</category>
        <category>Basic Blocks and Traces</category>
        <category>中间代码</category>
        <category>指令选择</category>
        <category>计算机网络</category>
        <category>计算机组成</category>
        <category>数据的表示与运算</category>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/19/SE/diagram/</guid>
            <title>画图题</title>
            <link>http://example.com/2025/06/19/SE/diagram/</link>
            <category>软件工程</category>
            <pubDate>Thu, 19 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;ol&gt;
&lt;li&gt;用例图 Use Case Diagram&lt;br&gt;Use-Cases: A collection of user scenarios that describe the thread of usage of a system&lt;br&gt;主要包含涉及的角色，角色对应的行为，第三方参与部分&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;参与者：与系统交互的用户或其他软硬件系统，用小人形表示&lt;/li&gt;
&lt;li&gt;用例：系统中执行的一系列动作，用椭圆表示。&lt;/li&gt;
&lt;li&gt;关系参与者与用例、参与者之间、用例之间的联系。连线&lt;/li&gt;
&lt;li&gt;边界：一组用例描述的系统或子系统，用矩形框表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+++primary example: SafeHome&lt;br&gt;;;;id3 题目&lt;br&gt;Our research indicates that the market for home security systems is growing at a rate of 40% per year. We would like to enter this market by building a &amp;#x3D;&amp;#x3D;microprocessor-based&amp;#x3D;&amp;#x3D; home security system that would protect against and&amp;#x2F;or recognize a variety of &amp;#x3D;&amp;#x3D;undesirable situations&amp;#x3D;&amp;#x3D; such as illegal entry, fire, flooding, and others. The product will use appropriate &amp;#x3D;&amp;#x3D;sensors&amp;#x3D;&amp;#x3D; to detect each situation, can be programmed by the &amp;#x3D;&amp;#x3D;homeowner&amp;#x3D;&amp;#x3D;, and will automatically telephone a monitoring agency when a situation is detected.&lt;br&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id3 答案&lt;br&gt;&lt;img data-src=&#34;/useCase.jpg&#34;&gt;&lt;br&gt;我的理解是找到里面的人(onwer, monitoring agency, 然后可以加个administrator)，物件(sensor)，中间的框是个系统，然后里面的椭圆写上对应的交互行为，连上线，感觉比较主观&lt;br&gt;;;;&lt;br&gt;+++&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;p&gt;CRC Card&lt;br&gt;每个卡片应该包含：类名，类的描述信息，职责，合作类&lt;br&gt;+++primary example&lt;br&gt;&lt;img data-src=&#34;/CRC.jpg&#34;&gt;&lt;br&gt;+++&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类图 class diagram&lt;br&gt;主要的信息：类名，属性(name: type)，方法(name(parameter): return type)&lt;br&gt;+++primary example&lt;br&gt;;;;id4 例子1&lt;br&gt;&lt;img data-src=&#34;/class.jpg&#34;&gt;&lt;br&gt;;;;&lt;br&gt;;;;id4 例子2&lt;br&gt;&lt;img data-src=&#34;/class2.jpg&#34;&gt;&lt;br&gt;;;;&lt;br&gt;+++&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;状态图 state diagram&lt;br&gt;&lt;strong&gt;节点&lt;/strong&gt;：开始状态，结束状态，状态&lt;br&gt;&lt;strong&gt;边&lt;/strong&gt;：行为&lt;br&gt;状态：圆角矩形&lt;br&gt;转移：带有标记的箭头&lt;br&gt;初始状态：实心圆&lt;br&gt;终止状态：实心环&lt;br&gt;分支：菱形&lt;br&gt;+++primary example&lt;br&gt;&lt;img data-src=&#34;/state.jpg&#34;&gt;&lt;br&gt;+++&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;时序图 sequence diagram&lt;br&gt;对象（参与者上面要画个人）、生命线（对象下面的虚线）、控制焦点、消息&lt;br&gt;&lt;img data-src=&#34;/seq.jpg&#34;&gt;&lt;br&gt;实心箭头表示同步消息：一个对象向另一个对象发出同步消息后，将处于阻塞状态，一直等到另一个对象的回应（图里面的请求是同步的）&lt;br&gt;简单箭头表示异步&lt;br&gt;:::warning&lt;br&gt;箭头的画法存疑&lt;br&gt;:::&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据流图 data flow diagram&lt;br&gt;外部实体（数据的原点和终点）：软件系统外部环境中的实体（包括人、组织或其他软件系统），用&amp;#x3D;&amp;#x3D;方框&amp;#x3D;&amp;#x3D;&lt;br&gt;加工Process：对数据进行处理的单元，比如内部的xx系统，用&amp;#x3D;&amp;#x3D;圆角矩形&amp;#x3D;&amp;#x3D;或椭圆&lt;br&gt;数据存储：数据库，用&amp;#x3D;&amp;#x3D;右侧开口的矩形或者左右开口的矩形&amp;#x3D;&amp;#x3D;&lt;br&gt;数据流：箭头方向即数据流动方向，数据流名标在数据流线上面&lt;br&gt;看例子：&lt;br&gt;&lt;img data-src=&#34;/dataflow.jpg&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;软件架构图 architecture&lt;br&gt;以前后端分离的系统为例（前端，后端，数据库）&lt;br&gt;&lt;img data-src=&#34;/arch.jpg&#34;&gt;&lt;br&gt;三个大框分别是客户端、服务器、数据库层&lt;br&gt;里面小框，前端就是Web app和移动app，后端就是各种系统，数据库就是各种数据库（表？）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;泳道图 Swimlane Diagram&lt;br&gt;跨职能流程图。旨在展示工作流中每个步骤涉及的流程和职能部门。在表示use-case的同时，描述对活动负责的actor&amp;#x2F;analysis class&lt;br&gt;最上面放实体，然后分成一列一列，其他的和流程图一样&lt;br&gt;&lt;img data-src=&#34;/swim.jpg&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/19/SE/note/</guid>
            <title>SE note</title>
            <link>http://example.com/2025/06/19/SE/note/</link>
            <category>软件工程</category>
            <pubDate>Thu, 19 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Ch2-Software-Engineering&#34;&gt;&lt;a href=&#34;#Ch2-Software-Engineering&#34; class=&#34;headerlink&#34; title=&#34;Ch2 Software Engineering&#34;&gt;&lt;/a&gt;Ch2 Software Engineering&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Definition: The application of a &amp;#x3D;&amp;#x3D;systematic&amp;#x3D;&amp;#x3D;, &amp;#x3D;&amp;#x3D;disciplined&amp;#x3D;&amp;#x3D;, &amp;#x3D;&amp;#x3D;quantifiable（可量化）&amp;#x3D;&amp;#x3D; approach to the &amp;#x3D;&amp;#x3D;development&amp;#x3D;&amp;#x3D;, &amp;#x3D;&amp;#x3D;operation&amp;#x3D;&amp;#x3D;, and &amp;#x3D;&amp;#x3D;maintenance&amp;#x3D;&amp;#x3D; of software&lt;/li&gt;
&lt;li&gt;软件工程是一个多层次的技术体系(a layered technology)&lt;ul&gt;
&lt;li&gt;从下往上是a “quality” focus, process model, methods, tools, 反映了构建高质量软件产品的逻辑流程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件过程（The Software Process）中的两个重要概念：通用过程框架（Common Process Framework）和 伞形活动（Umbrella Activities）&lt;ul&gt;
&lt;li&gt;通用过程框架（Common Process Framework）： 软件开发过程中的一些基本要素&lt;ul&gt;
&lt;li&gt;工作任务（work tasks）：指在软件开发的不同阶段中需要完成的具体任务。&lt;/li&gt;
&lt;li&gt;工作产品（work products）：指在执行工作任务过程中产生的各种文档、代码等成果物。&lt;/li&gt;
&lt;li&gt;里程碑与交付物（milestones &amp;amp; deliverables）：里程碑是项目进展的重要节点，而交付物是在这些节点上需要提交的成果。&lt;/li&gt;
&lt;li&gt;质量保证检查点（QA checkpoints）：在整个开发过程中设置的检查点，用于评估和确保软件产品的质量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;伞形活动（Umbrella Activities）：软件开发过程中需要执行的活动&lt;ul&gt;
&lt;li&gt;项目管理（Project management）：负责项目的规划、组织、协调和控制，确保项目按计划进行。&lt;/li&gt;
&lt;li&gt;质量保证（Quality assurance）：通过一系列措施确保软件产品的质量符合预定标准。&lt;/li&gt;
&lt;li&gt;工作产品生产（Work product production）：涉及创建和维护软件开发过程中产生的各种工作产品。&lt;/li&gt;
&lt;li&gt;测量（Measurement）：收集和分析数据以评估项目的状态和进度。&lt;/li&gt;
&lt;li&gt;正式技术评审（Formal technical reviews）：对软件的技术设计和实现进行系统性的审查。&lt;/li&gt;
&lt;li&gt;配置管理（Configuration management）：管理软件开发过程中各种配置项的变化，确保版本的一致性和可追溯性。&lt;/li&gt;
&lt;li&gt;重用管理（Reusability management）：促进软件组件和模块的重用，提高开发效率和软件质量。&lt;/li&gt;
&lt;li&gt;风险管理（Risk management）：识别、评估和应对可能影响项目成功的各种风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generic Process Framework&lt;/strong&gt; 通用的软件开发过程框架&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Communication&lt;/strong&gt;: 与客户协作并收集需求&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Planning&lt;/strong&gt;: establishes engineering work plan, describes technical risks, lists resource requirements, work products produced, and defines work schedule&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modeling&lt;/strong&gt;: 创建模型以帮助开发者和客户理解需求和设计&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Construction&lt;/strong&gt;: code &amp;amp; test&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deployment&lt;/strong&gt;: 交付软件供客户评估和反馈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Process Adaptation&lt;/strong&gt; 过程适配: 根据项目的具体需求、限制条件和特点，对软件开发过程进行定制和调整&lt;ul&gt;
&lt;li&gt;overall &amp;#x3D;&amp;#x3D;flow&amp;#x3D;&amp;#x3D; of activities, actions, and tasks and the interdependencies among them&lt;/li&gt;
&lt;li&gt;degree to which &amp;#x3D;&amp;#x3D;actions and tasks&amp;#x3D;&amp;#x3D; are defined within each framework activity&lt;/li&gt;
&lt;li&gt;degree to which &amp;#x3D;&amp;#x3D;work products&amp;#x3D;&amp;#x3D; are identified and required&lt;/li&gt;
&lt;li&gt;manner which &amp;#x3D;&amp;#x3D;quality assurance&amp;#x3D;&amp;#x3D; activities are applied&lt;/li&gt;
&lt;li&gt;manner in which &amp;#x3D;&amp;#x3D;project tracking and control&amp;#x3D;&amp;#x3D; activities are applied&lt;/li&gt;
&lt;li&gt;overall degree of &amp;#x3D;&amp;#x3D;detail and rigor&amp;#x3D;&amp;#x3D; with which the process is described&lt;/li&gt;
&lt;li&gt;degree to which the &amp;#x3D;&amp;#x3D;customer and other stakeholders&amp;#x3D;&amp;#x3D; are involved with the project&lt;/li&gt;
&lt;li&gt;level of autonomy given to the &amp;#x3D;&amp;#x3D;software team&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;li&gt;degree to which &amp;#x3D;&amp;#x3D;team organization and roles&amp;#x3D;&amp;#x3D; are prescribed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Essence of Practice&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Understand the problem&lt;/strong&gt; (communication and analysis).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plan a solution&lt;/strong&gt; (modeling and software design).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Carry out the plan&lt;/strong&gt; (code generation).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Examine the result for accuracy&lt;/strong&gt; (testing and quality assurance).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;General Principles 通用原则：软件开发过程中应遵循的一些核心指导思想或基本原则&lt;ul&gt;
&lt;li&gt;The reason it all exists — Provide Value to users&lt;/li&gt;
&lt;li&gt;KISS — Keep It Simple, Stupid!&lt;/li&gt;
&lt;li&gt;Maintain the Vision&lt;/li&gt;
&lt;li&gt;What you produce, others will consume&lt;/li&gt;
&lt;li&gt;Be open to the future&lt;/li&gt;
&lt;li&gt;Plan ahead for reuse&lt;/li&gt;
&lt;li&gt;Think!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Software Development Myths 软件开发管理中常见的误解（Myth）及其背后的现实情况（Reality）&lt;ul&gt;
&lt;li&gt;Management myths&lt;ul&gt;
&lt;li&gt;标准和流程的有效性依赖于团队的理解和接受程度。&lt;/li&gt;
&lt;li&gt;软件开发是一个高度协作和复杂的创造性过程，简单地增加人力并不能解决进度问题。&lt;/li&gt;
&lt;li&gt;外包项目同样需要良好的管理和沟通能力，不能因为外包就忽视了对项目的控制和监督&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Customer myths&lt;ul&gt;
&lt;li&gt;详细的需求分析和规划&lt;/li&gt;
&lt;li&gt;充分的沟通与确认&lt;/li&gt;
&lt;li&gt;合理的进度评估&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Practitioner’s myths&lt;ul&gt;
&lt;li&gt;错误：一旦我们编写好程序并使其正常运行，我们的工作就完成了&lt;/li&gt;
&lt;li&gt;过早进入编码阶段可能会导致更多的返工和调整，从而延长项目周期&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Ch3-Software-Process-Structure&#34;&gt;&lt;a href=&#34;#Ch3-Software-Process-Structure&#34; class=&#34;headerlink&#34; title=&#34;Ch3 Software Process Structure&#34;&gt;&lt;/a&gt;Ch3 Software Process Structure&lt;/h1&gt;&lt;p&gt;Umbrella Activities是贯穿整个软件开发过程的活动，Framework Activity是软件开发的核心阶段，如沟通、计划、建模、构建和部署，每个框架活动下都有具体的task set，每个task set中又包含多个具体的action&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Process flow&lt;/strong&gt; 过程流（对于之前提到的Generic Process Framework的五步）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;线性过程流（Linear process flow）&lt;/li&gt;
&lt;li&gt;迭代过程流（Iterative process flow）&lt;/li&gt;
&lt;li&gt;演化过程流（Evolutionary process flow）&lt;/li&gt;
&lt;li&gt;并行过程流（Parallel process flow）&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Process Patterns&lt;/strong&gt; 过程模式&lt;br&gt;Process patterns define a set of activities, actions, work tasks, work products and&amp;#x2F;or related behaviors&lt;br&gt;提供了一种&lt;code&gt;template&lt;/code&gt;用于定义模式&lt;br&gt;&lt;strong&gt;Generic software pattern elements&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pattern name &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Intent (objective of pattern) &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type (Task pattern, Stage pattern, Phase pattern)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initial context&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Solution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Resulting context&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Related patterns&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Known uses&amp;#x2F;examples&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Process Assessment&lt;/strong&gt;&lt;br&gt;几种评估软件过程的方法：&lt;br&gt;SCAMPI (Standard CMMI Appraisal Method for Process Improvement)&lt;br&gt;SPICE (ISO&amp;#x2F;IEC 15504)&lt;br&gt;CBA IPI (Capability Benchmarking Appraisal using the Integrated Process Improvement method)&lt;br&gt;ISO 9001:2000 for Software&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Capability Maturity Model Integration 能力成熟度模型集成（CMMI）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Level 0: Incomplete &lt;/li&gt;
&lt;li&gt;Level 1: Performed &lt;/li&gt;
&lt;li&gt;Level 2: Managed&lt;/li&gt;
&lt;li&gt;Level 3: Defined&lt;/li&gt;
&lt;li&gt;Level 4: Quantitatively Managed 定量管理&lt;/li&gt;
&lt;li&gt;Level 5: Optimizing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Ch4-Process-Models&#34;&gt;&lt;a href=&#34;#Ch4-Process-Models&#34; class=&#34;headerlink&#34; title=&#34;Ch4 Process Models&#34;&gt;&lt;/a&gt;Ch4 Process Models&lt;/h1&gt;&lt;h2 id=&#34;Prescriptive-Models&#34;&gt;&lt;a href=&#34;#Prescriptive-Models&#34; class=&#34;headerlink&#34; title=&#34;Prescriptive Models&#34;&gt;&lt;/a&gt;Prescriptive Models&lt;/h2&gt;&lt;p&gt;Prescriptive(规范的) process models advocate an orderly approach to software engineering&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Waterfall Model&lt;br&gt;&lt;img data-src=&#34;/4-1.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;The V Model&lt;br&gt;&lt;img data-src=&#34;/4-2.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;Incremental Process Models 增量过程模型&lt;ul&gt;
&lt;li&gt;The Incremental Model 增量模型: 将整个系统划分为多个可交付的“增量”部分，每个增量都作为一个独立的小项目进行五步流程&lt;br&gt; &lt;img data-src=&#34;/4-3.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;The Rapid Application Development (RAD) Model 快速应用开发模型: 短时间内交付功能完善的系统，communication和planning之后分成好几个team进行modeling和construction，最后合并deployment&lt;br&gt; &lt;img data-src=&#34;/4-4.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Evolutionary Process Models 进化式过程模型&lt;ul&gt;
&lt;li&gt;Prototyping 原型化方法: 当客户有明确的需求但不清楚具体细节时，通过原型，客户可以直观地看到系统的雏形并提出修改意见；原型通常是“抛弃型”的，即在验证概念后会被丢弃，而不是直接作为最终产品的一部分&lt;ul&gt;
&lt;li&gt;Prototype Model: Communication, Quick Plan, Modeling &amp;amp; Quick Design, Construction of prototype, Deployment Delivery &amp;amp; Feedback&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Spiral Model 螺旋模型: 螺旋模型将整个开发过程视为一个逐渐扩大的螺旋线，每个环代表一个开发阶段或迭代周期&lt;br&gt; &lt;img data-src=&#34;/4-5.jpg&#34;&gt; &lt;/li&gt;
&lt;li&gt;The Concurrent Development Model 并行开发模型&lt;ul&gt;
&lt;li&gt;并行开发模型定义了一系列事件，这些事件将触发每个活动、动作或任务从一个状态到另一个状态的转换&lt;/li&gt;
&lt;li&gt;Especially good for client&amp;#x2F;server applications&lt;/li&gt;
&lt;li&gt;并行开发模型定义了一个活动网络，而不是简单的线性事件序列&lt;/li&gt;
&lt;li&gt;需要在Flexibility, Extensibility, Speed of development 和 high quality 中权衡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Specialized-Process-Models-专业化的软件过程模型&#34;&gt;&lt;a href=&#34;#Specialized-Process-Models-专业化的软件过程模型&#34; class=&#34;headerlink&#34; title=&#34;Specialized Process Models 专业化的软件过程模型&#34;&gt;&lt;/a&gt;Specialized Process Models 专业化的软件过程模型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Component-Based Development （强调reuse）&lt;/li&gt;
&lt;li&gt;Formal methods （形式化方法强调使用数学手段来精确地描述需求）&lt;/li&gt;
&lt;li&gt;Aspect-Oriented Software Development （面向切面，切面指那些横跨多个模块或功能的通用关注点）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;The-Unified-Process-统一过程&#34;&gt;&lt;a href=&#34;#The-Unified-Process-统一过程&#34; class=&#34;headerlink&#34; title=&#34;The Unified Process 统一过程&#34;&gt;&lt;/a&gt;The Unified Process 统一过程&lt;/h2&gt;&lt;p&gt;统一过程是一种“用例驱动、以架构为中心、迭代和增量”的软件开发过程&lt;br&gt;A &amp;#x3D;&amp;#x3D;“use-case driven, architecture-centric, iterative and incremental”&amp;#x3D;&amp;#x3D; software process closely aligned with the Unified Modeling Language (UML)&lt;br&gt;&lt;img data-src=&#34;/4-6.png&#34;&gt;&lt;br&gt;五个阶段: &amp;#x3D;&amp;#x3D;Inception, Elaboration, Construction, Transition, Production&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;h3 id=&#34;统一过程（Unified-Process-UP）在各个阶段产生的工作产品（Work-Products）&#34;&gt;&lt;a href=&#34;#统一过程（Unified-Process-UP）在各个阶段产生的工作产品（Work-Products）&#34; class=&#34;headerlink&#34; title=&#34;统一过程（Unified Process, UP）在各个阶段产生的工作产品（Work Products）&#34;&gt;&lt;/a&gt;统一过程（Unified Process, UP）在各个阶段产生的工作产品（&lt;code&gt;Work Products&lt;/code&gt;）&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Inception Phase（启动阶段）&lt;br&gt;Vision Document（愿景文档）：概述项目的总体目标、范围和预期结果。&lt;br&gt;Initial Use-case Model（初始用例模型）：描述系统的主要功能和用户交互场景。&lt;br&gt;Initial Project Glossary（初始项目术语表）：定义项目中使用的专业术语和缩写。&lt;br&gt;Initial Business Case（初始商业案例）：分析项目的商业价值和可行性。&lt;br&gt;Initial Risk Assessment（初始风险评估）：识别和评估项目可能面临的风险。&lt;br&gt;Project Plan Phases and Iterations（项目计划阶段和迭代）：制定项目的整体计划，包括阶段划分和迭代安排。&lt;br&gt;Business Model（业务模型）：描述项目的业务流程和商业模式。&lt;br&gt;Prototypes（原型）：创建系统的初步原型，用于验证需求和设计。&lt;/li&gt;
&lt;li&gt;Elaboration Phase（细化阶段）&lt;br&gt;Use-case Model（用例模型）：进一步完善和细化用例模型，明确系统功能。&lt;br&gt;Functional and Non-functional Requirements（功能性与非功能性需求）：详细描述系统需要满足的功能性和非功能性要求。&lt;br&gt;Analysis Model（分析模型）：基于需求分析建立的系统逻辑模型。&lt;br&gt;Software Architecture Description（软件架构描述）：定义系统的整体架构和关键组件。&lt;br&gt;Executable Architectural Prototype（可执行架构原型）：实现一个可运行的架构原型，验证架构的可行性和性能。&lt;br&gt;Preliminary Design Model（初步设计模型）：基于架构描述进行初步的设计。&lt;br&gt;Revise Risk List（修订风险列表）：根据新的信息和发现更新风险评估。&lt;br&gt;Project Plan Iteration Plan, Workflow, Milestones（项目计划迭代计划、工作流、里程碑）：细化项目计划，包括具体的迭代安排、工作流程和关键里程碑。&lt;br&gt;Preliminary User Manual（初步用户手册）：编写系统的初步使用说明。&lt;/li&gt;
&lt;li&gt;Construction Phase（构建阶段）&lt;br&gt;Design Model（设计模型）：完成详细的系统设计，包括模块设计和接口设计。&lt;br&gt;Software Components（软件组件）：开发和实现各个软件组件。&lt;br&gt;Integrated Software Increment（集成软件增量）：将各个组件集成在一起，形成可运行的软件增量。&lt;br&gt;Test Plan（测试计划）：制定详细的测试计划，包括测试策略和资源安排。&lt;br&gt;Test Cases（测试用例）：编写具体的测试用例，用于验证系统功能和质量。&lt;br&gt;Support Documentation User Installation Increment（支持文档用户安装增量）：编写用户安装和操作指南，帮助用户正确安装和使用系统。&lt;/li&gt;
&lt;li&gt;Transition Phase（过渡阶段）&lt;br&gt;Delivered Software Increment（交付的软件增量）：向用户交付经过测试和验证的软件增量。&lt;br&gt;Beta Test Reports（Beta测试报告）：收集和整理Beta测试期间的反馈和问题报告。&lt;br&gt;User Feedback（用户反馈）：收集用户的实际使用反馈，为后续改进提供依据。&lt;/li&gt;
&lt;li&gt;Production&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;个人软件过程（Personal-Software-Process-PSP）&#34;&gt;&lt;a href=&#34;#个人软件过程（Personal-Software-Process-PSP）&#34; class=&#34;headerlink&#34; title=&#34;个人软件过程（Personal Software Process, PSP）&#34;&gt;&lt;/a&gt;个人软件过程（Personal Software Process, PSP）&lt;/h3&gt;&lt;p&gt;Five Framework Activities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Planning&lt;/li&gt;
&lt;li&gt;High-Level Design&lt;/li&gt;
&lt;li&gt;High-Level Design Review&lt;/li&gt;
&lt;li&gt;Development&lt;/li&gt;
&lt;li&gt;Postmortem（事后分析）&lt;br&gt;Stresses the Need for Error Identification and Understanding&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;团队软件过程（Team-Software-Process-TSP）&#34;&gt;&lt;a href=&#34;#团队软件过程（Team-Software-Process-TSP）&#34; class=&#34;headerlink&#34; title=&#34;团队软件过程（Team Software Process, TSP）&#34;&gt;&lt;/a&gt;团队软件过程（Team Software Process, TSP）&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Each project is “launched” using a “script” that defines the tasks to be accomplished&lt;/li&gt;
&lt;li&gt;Teams are self-directed&lt;/li&gt;
&lt;li&gt;Measurement is encouraged&lt;/li&gt;
&lt;li&gt;Measures are analyzed with the intent of improving the team process&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;Ch5-Agile-Development-敏捷开发&#34;&gt;&lt;a href=&#34;#Ch5-Agile-Development-敏捷开发&#34; class=&#34;headerlink&#34; title=&#34;Ch5 Agile Development 敏捷开发&#34;&gt;&lt;/a&gt;Ch5 Agile Development 敏捷开发&lt;/h1&gt;&lt;p&gt;What is Agility?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Effective (rapid and adaptive) response to change&lt;/li&gt;
&lt;li&gt;Effective communication among all stakeholders&lt;/li&gt;
&lt;li&gt;Drawing the customer onto the team&lt;/li&gt;
&lt;li&gt;Organizing a team so that it is in control of the work performed&lt;/li&gt;
&lt;li&gt;Rapid, incremental delivery of software&lt;br&gt;An Agile Process&lt;/li&gt;
&lt;li&gt;Is driven by customer descriptions of what is required (scenarios)&lt;/li&gt;
&lt;li&gt;Recognizes that plans are short-lived&lt;/li&gt;
&lt;li&gt;Develops software iteratively with a heavy emphasis on construction activities&lt;/li&gt;
&lt;li&gt;Delivers multiple ‘software increments’&lt;/li&gt;
&lt;li&gt;Adapts as changes occur&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Extreme Programming 极限编程(XP)&lt;br&gt;XP plan:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;begin with user stories&lt;/li&gt;
&lt;li&gt;assigns a cost&lt;/li&gt;
&lt;li&gt;Stories are grouped to for a deliverable increment&lt;/li&gt;
&lt;li&gt;commitment&lt;/li&gt;
&lt;li&gt;project velocity&lt;br&gt;&lt;img data-src=&#34;/5-1.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Industrial XP (IXP)&lt;br&gt;IXP incorporates six new practices: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Readiness assessment 准备评估&lt;/li&gt;
&lt;li&gt;Project community 项目社区&lt;/li&gt;
&lt;li&gt;Project chartering 项目章程制定&lt;/li&gt;
&lt;li&gt;Test driven management 测试驱动管理&lt;/li&gt;
&lt;li&gt;Retrospectives 团队自省&lt;/li&gt;
&lt;li&gt;Continuous learning  持续学习&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scrum 一种流行的敏捷开发框架&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Development work is partitioned into “packets”&lt;/li&gt;
&lt;li&gt;Testing and documentation are on-going (测试和文档贯穿开发流程)&lt;/li&gt;
&lt;li&gt;Work occurs in “sprints” and is derived from a “backlog” (Sprint 是 Scrum 的核心时间单位，通常为 1 到 4 周)&lt;/li&gt;
&lt;li&gt;Meetings are very short 高效沟通&lt;/li&gt;
&lt;li&gt;“demos” are delivered to the customer with the time-box allocated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dynamic Systems Development Method  - DSDM&lt;/p&gt;
&lt;p&gt;Agile Modeling (&lt;code&gt;AM&lt;/code&gt;) principals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model with a purpose&lt;/li&gt;
&lt;li&gt;Use multiple models &lt;/li&gt;
&lt;li&gt;Travel light &lt;/li&gt;
&lt;li&gt;Content is more important than representation&lt;/li&gt;
&lt;li&gt;Know the models and the tools you use to create them&lt;/li&gt;
&lt;li&gt;Adapt locally&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Agile Unified Process (&lt;code&gt;AUP&lt;/code&gt;) 敏捷统一流程：一个精简的软件开发过程&lt;br&gt;Each AUP iteration addresses these activities: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modeling&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Deployment &lt;/li&gt;
&lt;li&gt;Configuration and project management &lt;/li&gt;
&lt;li&gt;Environment management&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Ch6-Human-Aspects-of-Software-Engineering&#34;&gt;&lt;a href=&#34;#Ch6-Human-Aspects-of-Software-Engineering&#34; class=&#34;headerlink&#34; title=&#34;Ch6 Human Aspects of Software Engineering&#34;&gt;&lt;/a&gt;Ch6 Human Aspects of Software Engineering&lt;/h1&gt;&lt;p&gt;Traits of Successful Software Engineers: 责任感、对需求敏感、直言不讳、有弹性(Resilient under pressure)、公平意识、注重细节、务实(Pragmatic)&lt;br&gt;The Psychology Of Software Engineering 没看懂不管了&lt;br&gt;Effective Software Team Attributes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sense of purpose&lt;/li&gt;
&lt;li&gt;Sense of involvement&lt;/li&gt;
&lt;li&gt;Sense of trust&lt;/li&gt;
&lt;li&gt;Sense of improvement&lt;/li&gt;
&lt;li&gt;Diversity of team member skill sets&lt;br&gt;Avoid Team “Toxicity” 毒性&lt;br&gt;A frenzied work atmosphere, high frustication, Fragmented or poorly coordinated procedures(或者定义不当的模型), Unclear definition of roles, Continuous and repeated exposure to failure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Factors Affecting Team Structure&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;difficulty of the problem&lt;/li&gt;
&lt;li&gt;size of the resultant program(s)&lt;/li&gt;
&lt;li&gt;the time that the team will stay together&lt;/li&gt;
&lt;li&gt;the degree to which the problem can be modularized&lt;/li&gt;
&lt;li&gt;the required quality and reliability of the system&lt;/li&gt;
&lt;li&gt;the rigidity of the delivery date 交付日期是不是很死&lt;/li&gt;
&lt;li&gt;the degree of sociability required&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Organizational Paradigms 组织范式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Closed paradigm&lt;/li&gt;
&lt;li&gt;Random paradigm&lt;/li&gt;
&lt;li&gt;Open paradigm&lt;/li&gt;
&lt;li&gt;Synchronous paradigm&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;范式&lt;/th&gt;
&lt;th&gt;组织方式&lt;/th&gt;
&lt;th&gt;控制程度&lt;/th&gt;
&lt;th&gt;创新程度&lt;/th&gt;
&lt;th&gt;沟通频率&lt;/th&gt;
&lt;th&gt;适用项目类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Closed&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;层级权威&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;td&gt;自上而下&lt;/td&gt;
&lt;td&gt;传统行业、安全关键系统&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Random&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;松散自由&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;无固定模式&lt;/td&gt;
&lt;td&gt;初创项目、探索性任务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Open&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;半结构化&lt;/td&gt;
&lt;td&gt;中等&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;高频协作&lt;/td&gt;
&lt;td&gt;敏捷开发、创新型项目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Synchronous&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;模块化分工&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;中等&lt;/td&gt;
&lt;td&gt;极少&lt;/td&gt;
&lt;td&gt;分布式系统、大型项目&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Generic Agile Teams（通用敏捷团队）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;individual competency coupled with group collaboration&lt;/li&gt;
&lt;li&gt;People trump process and politics can trump people&lt;/li&gt;
&lt;li&gt;self-organizing and have many structures&lt;/li&gt;
&lt;li&gt;Planning is kept to a minimum 不反对规划，但强调“轻量级规划”比如Sprint&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XP Team Values&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Communication&lt;/li&gt;
&lt;li&gt;Simplicity: design for immediate needs nor future needs&lt;/li&gt;
&lt;li&gt;Feedback&lt;/li&gt;
&lt;li&gt;Courage&lt;/li&gt;
&lt;li&gt;Respect&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Impact of Social Media &lt;/p&gt;
&lt;p&gt;Software Engineering using the Cloud&lt;/p&gt;
&lt;p&gt;协作工具：Services of collaborative development environments(CDEs)&lt;br&gt;Namespace, Calendar, Template, Metrics support, Communication analysis, Artifact clustering归类&lt;/p&gt;
&lt;p&gt;Team Decisions Making Complications&lt;br&gt;&lt;img data-src=&#34;/6-1.jpg&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;Ch7-Principles-that-Guide-Practice&#34;&gt;&lt;a href=&#34;#Ch7-Principles-that-Guide-Practice&#34; class=&#34;headerlink&#34; title=&#34;Ch7 Principles that Guide Practice&#34;&gt;&lt;/a&gt;Ch7 Principles that Guide Practice&lt;/h1&gt;&lt;p&gt;Principles that Guide Process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Be agile&lt;/li&gt;
&lt;li&gt;Focus on quality at every step&lt;/li&gt;
&lt;li&gt;Be ready to adapt&lt;/li&gt;
&lt;li&gt;Build an effective team&lt;/li&gt;
&lt;li&gt;Establish mechanisms for communication and coordination&lt;/li&gt;
&lt;li&gt;Manage change&lt;/li&gt;
&lt;li&gt;Assess risk&lt;/li&gt;
&lt;li&gt;Create work products that provide value for others&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Principles that Guide Practice:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Divide and conquer&lt;/li&gt;
&lt;li&gt;Understand the use of abstraction&lt;/li&gt;
&lt;li&gt;Strive for consistency&lt;/li&gt;
&lt;li&gt;Focus on the transfer of information 注意接口的设计&lt;/li&gt;
&lt;li&gt;Build software that exhibits effective modularity&lt;/li&gt;
&lt;li&gt;Look for patterns&lt;/li&gt;
&lt;li&gt;When possible, represent the problem and its solution from a number of different perspectives&lt;/li&gt;
&lt;li&gt;Remember that someone will maintain the software&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Communication Principle： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Listen&lt;/li&gt;
&lt;li&gt;Prepare before you communicate&lt;/li&gt;
&lt;li&gt;Someone should facilitate the activity&lt;/li&gt;
&lt;li&gt;Face-to-face communication is best&lt;/li&gt;
&lt;li&gt;Take notes and document decisions&lt;/li&gt;
&lt;li&gt;Strive for collaboration&lt;/li&gt;
&lt;li&gt;Stay focused, modularize your discussion&lt;/li&gt;
&lt;li&gt;If something is unclear, draw a picture&lt;/li&gt;
&lt;li&gt;不管怎样, Move on&lt;/li&gt;
&lt;li&gt;Nigotiation(谈判) works best when both parties win&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Planning Principles：&lt;br&gt;懒得写了考了我吃&lt;/p&gt;
&lt;p&gt;Modeling Principles： 创建两类模型&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Requirements models (also called analysis models) 需求模型&lt;/li&gt;
&lt;li&gt;Design models 设计模型&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Agile Modeling Principles 记不住，懒得写了再说&lt;/p&gt;
&lt;p&gt;Requirements Modeling Principles&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The information domain of a problem must be represented and understood  对问题领域内信息的全面了解是构建有效软件的基础&lt;/li&gt;
&lt;li&gt;The functions that the software performs must be defined  定义软件的功能，明确描述软件应提供的功能和服务&lt;/li&gt;
&lt;li&gt;The behavior of the software (as a consequence of external events) must be represented  定义软件的行为，如何响应外界事件或输入&lt;/li&gt;
&lt;li&gt;The models that depict information, function, and behavior must be partitioned in a manner that uncovers detail in a layered (or hierarchical) fashion  使用结构化的、分层次的方法来组织模型&lt;/li&gt;
&lt;li&gt;The analysis task should move from essential information toward implementation detail  先关注核心需求和架构设计，再细化到具体的实现方案&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Design Modeling Principles&lt;br&gt;太多了懒得看&lt;/p&gt;
&lt;p&gt;Living Modeling Principles&lt;br&gt;懒得看&lt;/p&gt;
&lt;p&gt;Construction Principles&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The construction activity encompasses a set of coding and testing tasks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Coding principles and concepts&lt;/code&gt; are closely aligned programming style, programming languages, and programming methods&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Testing principles and concepts&lt;/code&gt; lead to the design of tests that systematically uncover different classes of errors and to do so with a minimum amount of time and effort&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…..一堆principle，看了也记不住，不看了&lt;/p&gt;
&lt;h1 id=&#34;Ch8-Understanding-Requirements&#34;&gt;&lt;a href=&#34;#Ch8-Understanding-Requirements&#34; class=&#34;headerlink&#34; title=&#34;Ch8 Understanding Requirements&#34;&gt;&lt;/a&gt;Ch8 Understanding Requirements&lt;/h1&gt;&lt;p&gt;Requirements Engineering:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Inception &lt;/li&gt;
&lt;li&gt;Elicitation&lt;/li&gt;
&lt;li&gt;Elaboration&lt;/li&gt;
&lt;li&gt;Negotiation&lt;/li&gt;
&lt;li&gt;Specification&lt;/li&gt;
&lt;li&gt;Validation&lt;/li&gt;
&lt;li&gt;Requirements management&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Negotiating Requirements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Identify the key stakeholders&lt;/li&gt;
&lt;li&gt;Determine each of the stakeholders “win conditions”&lt;/li&gt;
&lt;li&gt;Negotiate&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Requirements Monitoring:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Distributed debugging&lt;/li&gt;
&lt;li&gt;Run-time verification&lt;/li&gt;
&lt;li&gt;Run-time validation&lt;/li&gt;
&lt;li&gt;Business activity monitoring&lt;/li&gt;
&lt;li&gt;Evolution and co-design&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Validating Requirements:&lt;br&gt;consistent, 是否在level of abstraction规定了, 是否essential, unambiguous, 每个要求注明来源, requirements 之间是否 conflict, achievable, testable, properly reflect the information, function and behavior, partitioned方式, …&lt;/p&gt;
&lt;h1 id=&#34;Ch9-Requirements-Modeling：Scenario-Based-Methods-基于场景的需求建模方法&#34;&gt;&lt;a href=&#34;#Ch9-Requirements-Modeling：Scenario-Based-Methods-基于场景的需求建模方法&#34; class=&#34;headerlink&#34; title=&#34;Ch9 Requirements Modeling：Scenario-Based Methods 基于场景的需求建模方法&#34;&gt;&lt;/a&gt;Ch9 Requirements Modeling：Scenario-Based Methods 基于场景的需求建模方法&lt;/h1&gt;&lt;p&gt;需求分析的目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述客户所需的内容 Describe what the customer requires&lt;/li&gt;
&lt;li&gt;为软件设计提供基础 Establish a basis for the creation of a software design&lt;/li&gt;
&lt;li&gt;定义一组可以验证的需求 Define a set of requirements that can be validated&lt;br&gt;Rules of Thumb（基本原则）：&lt;/li&gt;
&lt;li&gt;The model should focus on requirements that are visible within the problem or business domain. The level of abstraction should be relatively high.&lt;/li&gt;
&lt;li&gt;Each element of the analysis model should add to an overall understanding of software requirements and provide insight into the information domain, function and behavior of the system.&lt;/li&gt;
&lt;li&gt;Delay consideration of infrastructure and other non-functional models until design.&lt;/li&gt;
&lt;li&gt;Minimize coupling throughout the system.&lt;/li&gt;
&lt;li&gt;Be certain that the analysis model provides value to all stakeholders.&lt;/li&gt;
&lt;li&gt;Keep the model as simple as it can be.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Domain Analysis（领域分析）：&lt;br&gt;Software domain analysis is the identification, analysis, and specification of common requirements from a specific application domain, typically for reuse on multiple projects within that application domain…&lt;/p&gt;
&lt;p&gt;Use-Case Diagram, Activity Diagrams, Swim Lane Diagrams&lt;/p&gt;
&lt;h1 id=&#34;Ch10-Requirements-Modeling-Class-Based-Methods&#34;&gt;&lt;a href=&#34;#Ch10-Requirements-Modeling-Class-Based-Methods&#34; class=&#34;headerlink&#34; title=&#34;Ch10 Requirements Modeling: Class-Based Methods&#34;&gt;&lt;/a&gt;Ch10 Requirements Modeling: Class-Based Methods&lt;/h1&gt;&lt;p&gt;Class-Based需求建模的方法：structured analysis, object- oriented analysis&lt;br&gt;Class-Based Modeling: objects, operations, relationships, collaborations&lt;br&gt;类图&lt;br&gt;CRC Cards&lt;br&gt;见画图题&lt;/p&gt;
&lt;h1 id=&#34;Ch11-Requirements-Modeling-Behavior-Patterns-and-Web-Mobile-Apps&#34;&gt;&lt;a href=&#34;#Ch11-Requirements-Modeling-Behavior-Patterns-and-Web-Mobile-Apps&#34; class=&#34;headerlink&#34; title=&#34;Ch11 Requirements Modeling: Behavior, Patterns, and Web&amp;#x2F;Mobile Apps&#34;&gt;&lt;/a&gt;Ch11 Requirements Modeling: Behavior, Patterns, and Web&amp;#x2F;Mobile Apps&lt;/h1&gt;&lt;p&gt;行为建模: use-cases, events, sequences, state diagram, 审查&lt;br&gt;行为建模三种图：state diagram, sequence diagram, data-flow diagram&lt;/p&gt;
&lt;h2 id=&#34;Requirements-Modeling-for-WebApps&#34;&gt;&lt;a href=&#34;#Requirements-Modeling-for-WebApps&#34; class=&#34;headerlink&#34; title=&#34;Requirements Modeling for WebApps:&#34;&gt;&lt;/a&gt;Requirements Modeling for WebApps:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;内容分析 Content Analysis：描述文本、图形和图像、视频、音频等。&lt;/li&gt;
&lt;li&gt;交互分析 Interaction Analysis：使用案例。&lt;/li&gt;
&lt;li&gt;功能分析 Functional Analysis：定义应用于WebApp内容的操作，暗示其他处理功能。&lt;/li&gt;
&lt;li&gt;配置分析 Configuration Analysis：环境和基础设施。&lt;/li&gt;
&lt;li&gt;导航分析 Navigation Analysis：关注总体要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置模型 Configuration Model&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器端 Server-side：必须指定服务器硬件和操作系统环境、考虑服务器端互操作性、指定适当的接口、通信协议及相关协作信息。&lt;/li&gt;
&lt;li&gt;客户端 Client-side：必须识别浏览器配置问题、定义测试要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;导航建模 Navigation Modeling&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;考虑哪些元素应更容易到达（需要更少的导航步骤），优先级如何？&lt;/li&gt;
&lt;li&gt;如何处理导航错误？&lt;/li&gt;
&lt;li&gt;是否应该通过链接、基于搜索的访问或其他方式完成导航？&lt;/li&gt;
&lt;li&gt;是否应根据之前导航动作的上下文向用户展示某些元素？&lt;/li&gt;
&lt;li&gt;是否应维护用户的导航日志？&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Ch12-Design-Concepts&#34;&gt;&lt;a href=&#34;#Ch12-Design-Concepts&#34; class=&#34;headerlink&#34; title=&#34;Ch12 Design Concepts&#34;&gt;&lt;/a&gt;Ch12 Design Concepts&lt;/h1&gt;&lt;p&gt;好的软件设计应该具备：坚固性 Firmness, 实用性 Commodity, 愉悦感 Delight&lt;br&gt;Software Engineering Design：设计原则与质量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data&amp;#x2F;Class design&lt;/li&gt;
&lt;li&gt;Architectural design&lt;/li&gt;
&lt;li&gt;Interface design&lt;/li&gt;
&lt;li&gt;Component-level design&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Analysis Model -&amp;gt; Design Model（需求模型到设计模型）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计必须实施分析模型中包含的所有显式需求(explicit requirements)，并适应客户希望的所有隐式需求。&lt;/li&gt;
&lt;li&gt;设计应当是可读且易于理解(readable, understandable guide)的指南，帮助编写代码的人以及测试和支持软件的人。&lt;/li&gt;
&lt;li&gt;设计应该提供软件的完整画面(a complete picture)，从实现的角度解决数据、功能和行为领域的问题&lt;br&gt;&lt;img data-src=&#34;/12-1.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;质量指南 Quality Guidelines&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计应展示一种使用公认的架构风格创建的架构。&lt;/li&gt;
&lt;li&gt;设计应由展现良好设计特性的组件组成。&lt;/li&gt;
&lt;li&gt;设计可以逐步实现。&lt;/li&gt;
&lt;li&gt;设计应模块化，即将软件逻辑划分为元素或子系统。&lt;/li&gt;
&lt;li&gt;设计应包含数据、架构、接口和组件的不同表示形式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设计原则 Design Principles&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计过程不应有“隧道视野”，即应全面考虑各种因素。&lt;/li&gt;
&lt;li&gt;设计应可追溯到分析模型。&lt;/li&gt;
&lt;li&gt;设计不应重新发明轮子（即不应重复已有的解决方案）。&lt;/li&gt;
&lt;li&gt;设计应“最小化软件与现实世界中存在的问题之间的智力距离”。&lt;/li&gt;
&lt;li&gt;设计应统一且整合。&lt;/li&gt;
&lt;li&gt;设计应能够适应变化。&lt;/li&gt;
&lt;li&gt;设计应以温和的方式降级，即使遇到异常数据、事件或操作条件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OO Design Concepts: Design classes(Entity classes, Boundary classes, Controller classes), Inheritance, Messages, Polymorphism&lt;br&gt;:::warning&lt;br&gt;后面看不下去先不管了&lt;br&gt;:::&lt;/p&gt;
&lt;h1 id=&#34;Ch13-Architectural-Design&#34;&gt;&lt;a href=&#34;#Ch13-Architectural-Design&#34; class=&#34;headerlink&#34; title=&#34;Ch13 Architectural Design&#34;&gt;&lt;/a&gt;Ch13 Architectural Design&lt;/h1&gt;&lt;p&gt;架构风格：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data-centered architectures&lt;/li&gt;
&lt;li&gt;Data flow architectures &lt;/li&gt;
&lt;li&gt;Call and return architectures&lt;/li&gt;
&lt;li&gt;Object-oriented architectures&lt;/li&gt;
&lt;li&gt;Layered architectures&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Ch14-Component-Level-Design&#34;&gt;&lt;a href=&#34;#Ch14-Component-Level-Design&#34; class=&#34;headerlink&#34; title=&#34;Ch14 Component-Level Design&#34;&gt;&lt;/a&gt;Ch14 Component-Level Design&lt;/h1&gt;&lt;p&gt;Component: a modular, deployable, and replaceable part of a system&lt;br&gt;OO角度：一个组件包含一组协作类&lt;br&gt;传统角度：数据结构和接口&lt;br&gt;Basic Design Principles：OCP, LSP, DIP, ISP, REP, CCP, CRP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open-Closed Principle: 开放扩展，关闭修改&lt;/li&gt;
&lt;li&gt;Liskov Substitution Principle: 子类可被父类替换&lt;/li&gt;
&lt;li&gt;Dependency Inversion Principles: 依赖抽象，不要依赖具体实现&lt;/li&gt;
&lt;li&gt;Interface Segregation Principle: 多个特定于客户端的接口比一个通用接口更好&lt;/li&gt;
&lt;li&gt;Release Reuse Equivalency Principle: 发布的粒度是重用的粒度&lt;/li&gt;
&lt;li&gt;Common Closure Principle: 一起变化的类应该放在一起&lt;/li&gt;
&lt;li&gt;Common Reuse Principle: 不一起重用的类不应放在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本设计原则（Basic Design Principles）:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;命名约定 Components &lt;/li&gt;
&lt;li&gt;接口 Interfaces&lt;/li&gt;
&lt;li&gt;依赖关系和继承：建议从左到右建模依赖关系，从底向上（派生类）到底部（基类）建模继承关系&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;设计指南（Design Guidelines）:&lt;br&gt;单一职责原则 Cohension&lt;br&gt;耦合度级别：内容耦合、公共耦合、控制耦合等 Coupling&lt;/p&gt;
&lt;p&gt;WebApps 组件设计：通常包含content design and functional design&lt;br&gt;……&lt;/p&gt;
&lt;h1 id=&#34;Ch15-User-Interface-Design&#34;&gt;&lt;a href=&#34;#Ch15-User-Interface-Design&#34; class=&#34;headerlink&#34; title=&#34;Ch15 User Interface Design&#34;&gt;&lt;/a&gt;Ch15 User Interface Design&lt;/h1&gt;&lt;p&gt;Golden Rule：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Place the user in control&lt;/li&gt;
&lt;li&gt;Reduce the user’s memory load&lt;/li&gt;
&lt;li&gt;Make the interface consistent&lt;br&gt;User Interface Design Model:&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模型名称&lt;/th&gt;
&lt;th&gt;中文解释&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;User Model&lt;/td&gt;
&lt;td&gt;用户模型&lt;/td&gt;
&lt;td&gt;描述用户是谁、他们的需求和行为&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Design Model&lt;/td&gt;
&lt;td&gt;设计模型&lt;/td&gt;
&lt;td&gt;将用户模型转化为界面设计方案&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mental Model&lt;/td&gt;
&lt;td&gt;心理模型&lt;/td&gt;
&lt;td&gt;用户对界面的主观理解和预期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Implementation Model&lt;/td&gt;
&lt;td&gt;实现模型&lt;/td&gt;
&lt;td&gt;开发者实际构建的界面及其交互逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;User Interface Design Process: 螺旋模型&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Interface Analysis&lt;br&gt;Interface Analysis旨在理解以下几点：people(user), task, content, environment&lt;/p&gt;
&lt;h1 id=&#34;Ch16-Pattern-Based-Design&#34;&gt;&lt;a href=&#34;#Ch16-Pattern-Based-Design&#34; class=&#34;headerlink&#34; title=&#34;Ch16 Pattern-Based Design&#34;&gt;&lt;/a&gt;Ch16 Pattern-Based Design&lt;/h1&gt;&lt;p&gt;A design pattern is a three-part rule which expresses a relation between a certain &amp;#x3D;&amp;#x3D;context&amp;#x3D;&amp;#x3D;, a &amp;#x3D;&amp;#x3D;problem&amp;#x3D;&amp;#x3D;, and a &amp;#x3D;&amp;#x3D;solution&amp;#x3D;&amp;#x3D;.&lt;/p&gt;
&lt;p&gt;Describing a Pattern: By detailing various dimensions such as pattern name, problem, motivation, context, forces, solution, intent, collaborations, consequences, implementation, known uses, related patterns, etc. &lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/18/computer-science/compile-principles/ch10/</guid>
            <title>Liveness Analysis</title>
            <link>http://example.com/2025/06/18/computer-science/compile-principles/ch10/</link>
            <category>Liveness Analysis</category>
            <pubDate>Wed, 18 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Liveness-Analysis-活跃变量分析&#34;&gt;&lt;a href=&#34;#Liveness-Analysis-活跃变量分析&#34; class=&#34;headerlink&#34; title=&#34;Liveness Analysis 活跃变量分析&#34;&gt;&lt;/a&gt;Liveness Analysis 活跃变量分析&lt;/h1&gt;&lt;p&gt;判断在程序执行的某个点上，一个变量的值是否可能在未来被使用，是寄存器分配、死代码消除的基础&lt;/p&gt;
&lt;h2 id=&#34;Compiler-Optimizations&#34;&gt;&lt;a href=&#34;#Compiler-Optimizations&#34; class=&#34;headerlink&#34; title=&#34;Compiler Optimizations&#34;&gt;&lt;/a&gt;Compiler Optimizations&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Local: 基于basic blocks&lt;/li&gt;
&lt;li&gt;Intraprocedural (or “global’): 基本块的控制流转移&lt;/li&gt;
&lt;li&gt;Interprocedural (or “whole-program”): Operate on &amp;gt; 1 procedure, up to whole program; Sometimes, at link time (LTO, link time optimization)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Analyze program to gather “facts”&lt;/li&gt;
&lt;li&gt;Apply transformation (e.g., optimizations)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Dataflow-Analysis&#34;&gt;&lt;a href=&#34;#Dataflow-Analysis&#34; class=&#34;headerlink&#34; title=&#34;Dataflow Analysis&#34;&gt;&lt;/a&gt;Dataflow Analysis&lt;/h2&gt;&lt;p&gt;Control Flow Graph: A directed graph 数据流图&lt;br&gt;– Nodes represent statements&lt;br&gt;– Edges represent control flow&lt;/p&gt;
&lt;p&gt;CFG的简化：基本块&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;变量的活跃性：&#34;&gt;&lt;a href=&#34;#变量的活跃性：&#34; class=&#34;headerlink&#34; title=&#34;变量的活跃性：&#34;&gt;&lt;/a&gt;变量的活跃性：&lt;/h3&gt;&lt;p&gt;变量x在语句s处（执行s之前）处于活动状态，当且仅当满足以下三个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存在一个使用x的语句s’；&lt;/li&gt;
&lt;li&gt;存在从s到s’的路径；&lt;/li&gt;
&lt;li&gt;这条路径上没有对x进行任何赋值操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过分析liveness，我们可以实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Register Allocation&lt;/li&gt;
&lt;li&gt;Code Optimizations：Remove unused assignments&lt;/li&gt;
&lt;li&gt;IR Construction： Optimize the construction of SSA&lt;/li&gt;
&lt;li&gt;Security&amp;#x2F;Reliability: Detect the use of uninitialized variables&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Dataflow-Equations-for-Liveness-构建数据流方程&#34;&gt;&lt;a href=&#34;#Dataflow-Equations-for-Liveness-构建数据流方程&#34; class=&#34;headerlink&#34; title=&#34;Dataflow Equations for Liveness 构建数据流方程&#34;&gt;&lt;/a&gt;Dataflow Equations for Liveness 构建数据流方程&lt;/h2&gt;&lt;p&gt;A CFG node has&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;out-edges: lead to successor nodes&lt;/li&gt;
&lt;li&gt;in-edges: come from predecessor nodes&lt;/li&gt;
&lt;li&gt;pred[n]: the predecessors of node n       前驱&lt;/li&gt;
&lt;li&gt;succ[n]: the successors of node n     后继&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;几个定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use[n]: 在节点n被读取或使用(x &amp;#x3D; a + b的a和b, if(a &amp;lt; b)的a和b, return c的c)&lt;/li&gt;
&lt;li&gt;def[n]: 在节点n被定义(x &amp;#x3D; a + b的x)&lt;/li&gt;
&lt;li&gt;in[n]: 在节点n之前，所有活跃变量的集合&lt;/li&gt;
&lt;li&gt;out[n]: 在节点n之后，所有活跃变量的集合&lt;br&gt;三条活跃性规则：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;if $a \in in[n]$ then for $\all m \in pred[n]$ we have $a \in out[m]$&lt;/li&gt;
&lt;li&gt;if $a \in use[n]$ then $a \in in[n]$&lt;/li&gt;
&lt;li&gt;if $a \in out[n]$ and $a \notin def[n]$ then $a \in in[n]$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;得到以下两个数据流方程：&lt;br&gt;$$&lt;br&gt;out[n] &amp;#x3D; \cup_{s \in succ[n]} in[s]&lt;br&gt;$$&lt;br&gt; 一个节点在n的出口处活跃当且仅当在它后继的入口处是活跃的（活跃性的反向传播）&lt;br&gt;$$&lt;br&gt;in[n] &amp;#x3D; use[n] \cup (out[n] - def[n])&lt;br&gt;$$&lt;/p&gt;
&lt;h2 id=&#34;求解数据流方程&#34;&gt;&lt;a href=&#34;#求解数据流方程&#34; class=&#34;headerlink&#34; title=&#34;求解数据流方程&#34;&gt;&lt;/a&gt;求解数据流方程&lt;/h2&gt;&lt;p&gt;有了上面的两个数据流方程，就可以求解数据流方程了&lt;br&gt;算法：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;figcaption&gt;&lt;span&gt;pseudo&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for each n&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    in[n] ←&amp;#123;&amp;#125;; out[n] ←&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;repeat&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for each n&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        in′[n] ← in[n]; out′[n] ← out[n]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        in[n] ← use[n] ∪ (out[n] − def[n])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        out[n] ← ⋃( ∈()**[+] in[s]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;until in′[n] = in[n] and out′[n] = out[n] for all n&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;将所有节点的 &lt;code&gt;in&lt;/code&gt; 和 &lt;code&gt;out&lt;/code&gt; 集合初始化为空集。&lt;/li&gt;
&lt;li&gt;写出&lt;code&gt;use[n]&lt;/code&gt;和&lt;code&gt;def[n]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用数据流方程更新&lt;code&gt;in&lt;/code&gt;和&lt;code&gt;out&lt;/code&gt;集合&lt;/li&gt;
&lt;li&gt;直到&lt;code&gt;in&lt;/code&gt;和&lt;code&gt;out&lt;/code&gt;集合不再改变为止&lt;br&gt;例：&lt;br&gt;&lt;img data-src=&#34;/f2.jpg&#34;&gt;&lt;br&gt;对于这个CFG&lt;br&gt;每一次迭代如图：&lt;br&gt;&lt;img data-src=&#34;/f3.jpg&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Improvements&#34;&gt;&lt;a href=&#34;#Improvements&#34; class=&#34;headerlink&#34; title=&#34;Improvements&#34;&gt;&lt;/a&gt;Improvements&lt;/h2&gt;&lt;h3 id=&#34;Use-Basic-Block&#34;&gt;&lt;a href=&#34;#Use-Basic-Block&#34; class=&#34;headerlink&#34; title=&#34;Use Basic Block&#34;&gt;&lt;/a&gt;Use Basic Block&lt;/h3&gt;&lt;p&gt;后面有点懒得看，先放着&lt;/p&gt;
&lt;h2 id=&#34;集合的表示方法&#34;&gt;&lt;a href=&#34;#集合的表示方法&#34; class=&#34;headerlink&#34; title=&#34;集合的表示方法&#34;&gt;&lt;/a&gt;集合的表示方法&lt;/h2&gt;&lt;p&gt;对于in, out, use, def集合的表示和操作对性能有很大影响&lt;/p&gt;
&lt;h3 id=&#34;Bit-Arrays&#34;&gt;&lt;a href=&#34;#Bit-Arrays&#34; class=&#34;headerlink&#34; title=&#34;Bit Arrays&#34;&gt;&lt;/a&gt;Bit Arrays&lt;/h3&gt;&lt;p&gt;有点像bit map，适用于稠密集合（1比较多的，如果0太多就浪费了）&lt;/p&gt;
&lt;h3 id=&#34;Sorted-Lists&#34;&gt;&lt;a href=&#34;#Sorted-Lists&#34; class=&#34;headerlink&#34; title=&#34;Sorted Lists&#34;&gt;&lt;/a&gt;Sorted Lists&lt;/h3&gt;&lt;p&gt;适合稀疏集合（用一个链表存集合中的变量, Sorted by variable name&amp;#x2F;ID）&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/18/computer-science/compile-principles/ch11/</guid>
            <title>Register Allocation</title>
            <link>http://example.com/2025/06/18/computer-science/compile-principles/ch11/</link>
            <category>Register Allocation</category>
            <pubDate>Wed, 18 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Register-Allocation&#34;&gt;&lt;a href=&#34;#Register-Allocation&#34; class=&#34;headerlink&#34; title=&#34;Register Allocation&#34;&gt;&lt;/a&gt;Register Allocation&lt;/h1&gt;&lt;p&gt;目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Map temporaries to registers&lt;/li&gt;
&lt;li&gt;Preserve program semantics&lt;/li&gt;
&lt;li&gt;Optimize performance&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;图着色算法&#34;&gt;&lt;a href=&#34;#图着色算法&#34; class=&#34;headerlink&#34; title=&#34;图着色算法&#34;&gt;&lt;/a&gt;图着色算法&lt;/h2&gt;&lt;p&gt;冲突图是一个无向图，冲突图中，每个节点是一个变量（寄存器分配的候选对象）。&lt;br&gt;如果两个变量在同一时刻是活跃的（live），它们就有冲突边（interference edge），表示它们不能被分配到同一个寄存器&lt;br&gt;冲突信息可以用矩阵或者图来表示&lt;/p&gt;
&lt;h3 id=&#34;冲突图构建&#34;&gt;&lt;a href=&#34;#冲突图构建&#34; class=&#34;headerlink&#34; title=&#34;冲突图构建&#34;&gt;&lt;/a&gt;冲突图构建&lt;/h3&gt;&lt;p&gt;我们从一个中间代码的指令出发，根据live-out（就是out集合）添加冲突边：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;非 move 指令（不是a :&amp;#x3D; b这种）&lt;br&gt;比如a :&amp;#x3D; b1 + b2&lt;br&gt;对于每个bn和a之间都添加冲突边&lt;br&gt;比如下面这个例子：&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;br&gt;可以看到有ab ac同时live了，所以为a和b，a和c添加冲突边&lt;/li&gt;
&lt;li&gt;move指令&lt;br&gt;对于move指令，不添加冲突边：&lt;br&gt;比如对于第 2 条指令 d ← a，out[2] &amp;#x3D; {a, e}，那么只对d和e添加冲突边，对d和a不添加&lt;br&gt;但如果move之后又对d重新赋值了，那么还是要添加上d和a之间的冲突边&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;冲突图着色&#34;&gt;&lt;a href=&#34;#冲突图着色&#34; class=&#34;headerlink&#34; title=&#34;冲突图着色&#34;&gt;&lt;/a&gt;冲突图着色&lt;/h3&gt;&lt;p&gt;Vertex Coloring: 给图中的顶点着色，使得图中没有边连接相同颜色的顶点&lt;br&gt;K-Coloring: 颜色数小于K&lt;/p&gt;
&lt;h4 id=&#34;Kempe-简化&#34;&gt;&lt;a href=&#34;#Kempe-简化&#34; class=&#34;headerlink&#34; title=&#34;Kempe 简化&#34;&gt;&lt;/a&gt;Kempe 简化&lt;/h4&gt;&lt;p&gt;如果图中有一个节点 n 的度数 &amp;lt; K（也就是它的冲突数少于寄存器数），那我们可以“临时删掉”这个节点，并递归给剩下的图上色。之后再把这个节点加回来，它一定可以找到一个合法颜色。&lt;/p&gt;
&lt;p&gt;如果图中所有节点的度数都 ≥ K，那就可能要进入溢出（spill）处理&lt;br&gt;算法步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;build: 画冲突图&lt;/li&gt;
&lt;li&gt;simplify the nodes with insignificant degree: 选取degree &amp;lt; k的节点，压栈&lt;/li&gt;
&lt;li&gt;select (or color) while rebuilding the graph: 出栈，分配颜色&lt;br&gt;A vertex such that its degree &amp;lt; k is always k-colorable&lt;br&gt;Remove such vertices and push them to a stack until the graph becomes empty&lt;br&gt;移除顶点的同时移除相关边&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;Coalescing&#34;&gt;&lt;a href=&#34;#Coalescing&#34; class=&#34;headerlink&#34; title=&#34;Coalescing&#34;&gt;&lt;/a&gt;Coalescing&lt;/h4&gt;&lt;p&gt;遵循两种策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Briggs Criteria&lt;/strong&gt;: 如果将节点 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 合并后得到的新节点 &lt;code&gt;ab&lt;/code&gt;，其相邻节点中degree &amp;gt;&amp;#x3D; K 的节点（significant-degree neighbors）的数量 小于 K，则可以合并&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;George Criteria&lt;/strong&gt;: 如果对节点 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt;，对于 &lt;code&gt;a&lt;/code&gt; 的每一个邻居 &lt;code&gt;t&lt;/code&gt;， 满足二者其中之一，就能合并：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt; 本来就和 &lt;code&gt;b&lt;/code&gt; 有冲突&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt;的degree &amp;lt; K&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整体流程：&lt;br&gt;&lt;img data-src=&#34;/f2.jpg&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么要simplify non-move-related node: 保留move-related的后续可以合并&lt;/li&gt;
&lt;li&gt;freeze: 当我们遇到两个变量 a ← b 有 move 指令，但现在还不能安全合并，我们又不想立刻 spill，于是我们“冻结”这条 move 指令：不再试图合并 a 和 b，而是让其中一个变成非 move 相关（non-move-related），进入 Simplify 阶段继续处理&lt;/li&gt;
&lt;li&gt;spill规则：优先移除不被经常使用、degree大的节点&lt;ul&gt;
&lt;li&gt;实际溢出的priority计算，对于节点a：&lt;br&gt;$$&lt;br&gt;priority(t) &amp;#x3D; \frac{(use + def outside loop) + loop_num * (use + def inside loop)}{D}&lt;br&gt;$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/17/computer-science/compile-principles/ch8/</guid>
            <title>Basic Blocks &amp; Traces</title>
            <link>http://example.com/2025/06/17/computer-science/compile-principles/ch8/</link>
            <category>Basic Blocks and Traces</category>
            <pubDate>Tue, 17 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Basic-Blocks-and-Traces&#34;&gt;&lt;a href=&#34;#Basic-Blocks-and-Traces&#34; class=&#34;headerlink&#34; title=&#34;Basic Blocks and Traces&#34;&gt;&lt;/a&gt;Basic Blocks and Traces&lt;/h1&gt;&lt;h2 id=&#34;Canonical-Form&#34;&gt;&lt;a href=&#34;#Canonical-Form&#34; class=&#34;headerlink&#34; title=&#34;Canonical Form&#34;&gt;&lt;/a&gt;Canonical Form&lt;/h2&gt;&lt;p&gt;IR存在一些与机器语言不能完全对应的情况，和与编译优化分析相冲突的情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CJUMP能够转移到t或者f，但是真正的机器语言在条件为假的时候直接下降至下一条指令（条件为真才跳转）&lt;/li&gt;
&lt;li&gt;在表达式中使用ESEQ不太方便，会使子树不同的计算顺序产生不同的计算结果&lt;/li&gt;
&lt;li&gt;CALL调用CALL作为参数的时候会有寄存器冲突、语句副作用（修改全局变量、改变堆内存, etc.）等问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Linearize: Transform trees into a list of canonical&lt;br&gt;trees without SEQ or ESEQ nodes&lt;/li&gt;
&lt;li&gt;Basic blocks: Group statements into sequences with&lt;br&gt;no internal jumps&amp;#x2F;labels&lt;/li&gt;
&lt;li&gt;Trace schedule: Order basic blocks so every CJUMP is followed by its false label&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;线性化&#34;&gt;&lt;a href=&#34;#线性化&#34; class=&#34;headerlink&#34; title=&#34;线性化&#34;&gt;&lt;/a&gt;线性化&lt;/h3&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;规范树（Canonical Tree）定义：&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无SEQ或ESEQ&lt;/li&gt;
&lt;li&gt;每一个CALL的父亲不是EXP(…)就是MOVE(TEMP t, …)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;消除ESEQ&#34;&gt;&lt;a href=&#34;#消除ESEQ&#34; class=&#34;headerlink&#34; title=&#34;消除ESEQ&#34;&gt;&lt;/a&gt;消除ESEQ&lt;/h4&gt;&lt;h5 id=&#34;规则&#34;&gt;&lt;a href=&#34;#规则&#34; class=&#34;headerlink&#34; title=&#34;规则&#34;&gt;&lt;/a&gt;规则&lt;/h5&gt;&lt;p&gt;合并副作用，提升ESEQ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ESEQ(s1, ESEQ(s2,e)) &amp;#x3D;&amp;gt; ESEQ(SEQ(s1,s2),e)&lt;/li&gt;
&lt;li&gt;BINOP(op, ESEQ(s, e1), e2) ⇒ ESEQ(s, BINOP(op, e1, e2))&lt;/li&gt;
&lt;li&gt;MEM(ESEQ(s, e1)) ⇒ ESEQ(s, MEM(e1))&lt;/li&gt;
&lt;li&gt;JUMP(ESEQ(s, e1)) ⇒ SEQ(s, JUMP(e1))&lt;/li&gt;
&lt;li&gt;CJUMP(op, ESEQ(s, e1), e2, l1, l2) ⇒ SEQ(s, CJUMP(op, e1, e2, l1, l2))&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;Commutativity（重点）&#34;&gt;&lt;a href=&#34;#Commutativity（重点）&#34; class=&#34;headerlink&#34; title=&#34;Commutativity（重点）&#34;&gt;&lt;/a&gt;Commutativity（重点）&lt;/h5&gt;&lt;p&gt;当&lt;code&gt;ESEQ&lt;/code&gt;出现在&lt;code&gt;BINOP&lt;/code&gt;的右操作数，即$BINOP(op, e1, ESEQ(s, e2))$时，我们不能再像之前那样简单地把&lt;code&gt;s&lt;/code&gt;提升到整个&lt;code&gt;BINOP&lt;/code&gt;之前，因为&lt;code&gt;e1&lt;/code&gt;的求值在&lt;code&gt;e2&lt;/code&gt;之前，否则可能影响&lt;code&gt;e1&lt;/code&gt;的计算结果&lt;/p&gt;
&lt;p&gt;Commutativity：交换性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Commuting: s不影响e1的结果&lt;ul&gt;
&lt;li&gt;rule: $BINOP(op, e1, ESEQ(s, e2)) &amp;#x3D; ESEQ(s, BINOP(op, e1, e2))$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Non-commuting: s会影响e1的结果，把e1的结果显算出来放到临时变量t里，再提升s&lt;ul&gt;
&lt;li&gt;rule: $BINOP(op, ESEQ(s, e1), e2) &amp;#x3D; ESEQ(MOVE(TEMP t, e1), ESEQ(s, BINOP(op, TEMP t, e2)))$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将CALL移到顶层&#34;&gt;&lt;a href=&#34;#将CALL移到顶层&#34; class=&#34;headerlink&#34; title=&#34;将CALL移到顶层&#34;&gt;&lt;/a&gt;将CALL移到顶层&lt;/h4&gt;&lt;p&gt;方法：立即将每一个返回值赋给一个新的临时寄存器&lt;br&gt;$$&lt;br&gt;CALL(fun, args) ⇒ ESEQ(MOVE(TEMP t, CALL(fun, args)), TEMP t)&lt;br&gt;$$&lt;/p&gt;
&lt;h4 id=&#34;消除SEQ&#34;&gt;&lt;a href=&#34;#消除SEQ&#34; class=&#34;headerlink&#34; title=&#34;消除SEQ&#34;&gt;&lt;/a&gt;消除SEQ&lt;/h4&gt;&lt;p&gt;$$&lt;br&gt;SEQ(SEQ(a, b), c) &amp;#x3D; SEQ(a, SEQ(b, c))&lt;br&gt;$$&lt;br&gt;把SEQ变成一个线性语句表：$SEQ(s_1, SEQ(s_2, …, SEQ(s_{n-1}, s_n) …))$&lt;br&gt;就可以认为是由语句组成的简单列表$s_1, s_2, …, s_n$&lt;/p&gt;
&lt;h3 id=&#34;处理CJUMP&#34;&gt;&lt;a href=&#34;#处理CJUMP&#34; class=&#34;headerlink&#34; title=&#34;处理CJUMP&#34;&gt;&lt;/a&gt;处理CJUMP&lt;/h3&gt;&lt;p&gt;重排CJUMP，使得每个$CJUMP(op, e_1, e_2, l_t, l_f)后面都紧跟着$LABEL(l_f)$&lt;br&gt;分两步：1. 取一列canonical tree由它们形成basic block 2. 对basic block进行排序形成trace&lt;/p&gt;
&lt;h4 id=&#34;Basic-Block&#34;&gt;&lt;a href=&#34;#Basic-Block&#34; class=&#34;headerlink&#34; title=&#34;Basic Block&#34;&gt;&lt;/a&gt;Basic Block&lt;/h4&gt;&lt;p&gt;一个基本块是一段连续的指令序列，即:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个语句是一个&lt;code&gt;LABEL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最后一个语句是&lt;code&gt;JUMP&lt;/code&gt;或&lt;code&gt;CJUMP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;没有其他的&lt;code&gt;LABEL&lt;/code&gt;, &lt;code&gt;JUMP&lt;/code&gt;或&lt;code&gt;CJUMP&lt;/code&gt;&lt;br&gt;划分方法：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;每一个&lt;code&gt;LABEL&lt;/code&gt;都对应一个基本块的开始&lt;/li&gt;
&lt;li&gt;每一个&lt;code&gt;JUMP&lt;/code&gt;或&lt;code&gt;CJUMP&lt;/code&gt;都对应一个基本块的结束&lt;/li&gt;
&lt;li&gt;如果遇到&lt;code&gt;LABEL1&lt;/code&gt; -&amp;gt; &lt;code&gt;LABEL2&lt;/code&gt;,就在&lt;code&gt;LABEL2&lt;/code&gt;前面加一个&lt;code&gt;JUMP&lt;/code&gt;到&lt;code&gt;LABEL2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果遇到开头没有&lt;code&gt;LABEL&lt;/code&gt;的，则加一个&lt;code&gt;LABEL&lt;/code&gt;（比如程序的开头）&lt;/li&gt;
&lt;li&gt;出口处理：添加一个LABEL &lt;code&gt;done&lt;/code&gt;表示出口处理的开始，并把$JUMP done$放最后一个block末尾&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;Trace&#34;&gt;&lt;a href=&#34;#Trace&#34; class=&#34;headerlink&#34; title=&#34;Trace&#34;&gt;&lt;/a&gt;Trace&lt;/h4&gt;&lt;p&gt;现在我们可以按任意顺序来安排这些基本块，并且程序执行的结果仍是相同的——因为无论怎么排序，每个基本块的末尾都能转移到一个正确的位置。我们可以利用这一点来选择适当的基本块排列顺序，以满足每个&lt;code&gt;CJUMP&lt;/code&gt;之后都跟随它的false标号这一条件。&lt;br&gt;与此同时，我们也可以安排基本块使得无条件转移&lt;code&gt;JUMP&lt;/code&gt;之后直接跟随的是它们的目标标号。这样便可以删除这些无条件转移，从而使编译生成的程序的执行速度更快。&lt;/p&gt;
&lt;p&gt;把basic block排成trace的方法也很简单：&amp;#x3D;&amp;#x3D;从每个基本块开始，追踪JUMP链，标记遇到的每一个未标记的基本快并添加到当前trace中，最终到达一个其后继都标记过的块，就是结束块。之后再选则一个未标记的基本块开始，重复上述过程。&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;因为轨迹调度不可能覆盖所有情况，所以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果CJUMP 后跟 true label: 条件取反，交换 true&amp;#x2F;false，改成：&lt;br&gt;$$&lt;br&gt;CJUMP(!cond, lf, lt)&lt;br&gt;$$&lt;/li&gt;
&lt;li&gt;CJUMP 后跟的不是 true 也不是 false: 创建中间 label，插入 JUMP&lt;br&gt;$$&lt;br&gt;CJUMP(cond, lt, lf) &amp;#x3D;&amp;gt; CJUMP(cond, lt, l’f) LABEL l’f   JUMP NAME(lf)&lt;br&gt;$$&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;最优轨迹-Optimal-Trace&#34;&gt;&lt;a href=&#34;#最优轨迹-Optimal-Trace&#34; class=&#34;headerlink&#34; title=&#34;最优轨迹(Optimal Trace)&#34;&gt;&lt;/a&gt;最优轨迹(Optimal Trace)&lt;/h4&gt;&lt;p&gt;对于basic block可能有不同的trace划分方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hot Path Prioritization（优先热路径）: 优先将**运行频率高的基本块（hot blocks）**合并在同一条轨迹（trace）里，减少跳转，提高局部性。&lt;br&gt;+++info example&lt;br&gt;假设 if-else 中 if 分支占 90% 执行概率，else 只有 10%：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;tiger&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; x &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; then&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a := a + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;   -- 热路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a := a - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;生成时应把 x &amp;gt; 0 为真的路径（包括 CJUMP 的 false 分支）安排成 fall-through，避免跳转开销出现在热路径上。&lt;br&gt;+++&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Locality Enhancement（增强局部性）: 把逻辑上相关联的代码块放得更近一些，让它们在内存中“邻近”。&lt;ul&gt;
&lt;li&gt;原因：&lt;ul&gt;
&lt;li&gt;更好地利用 CPU cache、预取机制。&lt;/li&gt;
&lt;li&gt;避免指令 cache miss 导致性能下降。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如：将循环体和循环条件代码块排在一起（而不是让条件跳到远处），从而保持指令流顺序性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jump Minimization（最小化跳转）: 尽量减少无条件跳转（JUMP）和不必要的条件跳转（CJUMP），尤其在常走路径上，	减少分支预测失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;br&gt;哪个划分比较好？&lt;br&gt;根据3，c比a好；&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/17/computer-science/compile-principles/ch9/</guid>
            <title>指令选择</title>
            <link>http://example.com/2025/06/17/computer-science/compile-principles/ch9/</link>
            <category>指令选择</category>
            <pubDate>Tue, 17 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;指令选择&#34;&gt;&lt;a href=&#34;#指令选择&#34; class=&#34;headerlink&#34; title=&#34;指令选择&#34;&gt;&lt;/a&gt;指令选择&lt;/h1&gt;&lt;p&gt;找出实现一个给定的IR Tree的恰当机器指令序列。Mapping IR into abstract assembly code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Abstract assembly &amp;#x3D; assembly with infinite registers&lt;ul&gt;
&lt;li&gt;Invent new temporaries for intermediate results&lt;/li&gt;
&lt;li&gt;Map to actual registers later&lt;br&gt;Tree pattern, 也叫tile&lt;br&gt;本质上是pattern matching, 我们使用tree covering 来实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们&lt;code&gt;Jouette&lt;/code&gt;体系将树模式映射为指令:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;寄存器中可以存储数据或地址，每条指令可以访问任意寄存器&lt;/li&gt;
&lt;li&gt;寄存器r0的值永远是0&lt;/li&gt;
&lt;li&gt;每条指令的latency都是一周期（除了MOVEM的周期是m）&lt;/li&gt;
&lt;li&gt;每个周期执行一条指令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/f2.jpg&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;br&gt;将IR与后端的机器指令都转换为树结构。这样就把指令选择问题转换为机器指令树覆盖全IR Tree的问题。&lt;br&gt;一棵树可以有多种tiling方式&lt;/p&gt;
&lt;h2 id=&#34;Optimal-Tiling-Optimum-Tiling&#34;&gt;&lt;a href=&#34;#Optimal-Tiling-Optimum-Tiling&#34; class=&#34;headerlink&#34; title=&#34;Optimal Tiling &amp;amp; Optimum Tiling&#34;&gt;&lt;/a&gt;Optimal Tiling &amp;amp; Optimum Tiling&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Optimum Tiling：使得tiling数最少，是&amp;#x3D;&amp;#x3D;全局最优&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;li&gt;Optimal Tiling：No two adjacent tiles can be combined into a single tile of lower cost，是&amp;#x3D;&amp;#x3D;局部最优&amp;#x3D;&amp;#x3D;&lt;br&gt;一个optimum tiling必定是optimal tiling&lt;br&gt;&lt;img data-src=&#34;/f3.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Algorithms-for-Instruction-Selection&#34;&gt;&lt;a href=&#34;#Algorithms-for-Instruction-Selection&#34; class=&#34;headerlink&#34; title=&#34;Algorithms for Instruction Selection&#34;&gt;&lt;/a&gt;Algorithms for Instruction Selection&lt;/h2&gt;&lt;h3 id=&#34;Maximal-Munch-Find-an-optimal-tiling&#34;&gt;&lt;a href=&#34;#Maximal-Munch-Find-an-optimal-tiling&#34; class=&#34;headerlink&#34; title=&#34;Maximal Munch: Find an optimal tiling&#34;&gt;&lt;/a&gt;Maximal Munch: Find an optimal tiling&lt;/h3&gt;&lt;p&gt;最大匹配：贪心算法、自顶向下&lt;br&gt;方法：从IR树的根节点开始，用&amp;#x3D;&amp;#x3D;最大的&amp;#x3D;&amp;#x3D;tile覆盖当前节点（包含最多节点的），然后在子树中重复此过程&lt;/p&gt;
&lt;h3 id=&#34;DP&#34;&gt;&lt;a href=&#34;#DP&#34; class=&#34;headerlink&#34; title=&#34;DP&#34;&gt;&lt;/a&gt;DP&lt;/h3&gt;&lt;p&gt;动态规划：自底向上&lt;br&gt;方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;递归计算每个子树的最优平铺成本&lt;/li&gt;
&lt;li&gt;对于每个节点，考虑所有可能的匹配平铺&lt;/li&gt;
&lt;li&gt;对于每个匹配平铺，计算其成本如下：cost &amp;#x3D; tile_cost + sum（costs_of_children）&lt;/li&gt;
&lt;li&gt;选择成本最低的平铺&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;对于$CONST i$，它的代价为1( ADD r1, r0, i)&lt;/li&gt;
&lt;li&gt;对于这棵树，有三种匹配方法&lt;br&gt;&lt;img data-src=&#34;/f4.jpg&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/f5.jpg&#34;&gt;&lt;br&gt;因为2&amp;lt;3，所以我们从cost&amp;#x3D;2的两个任选一个&lt;br&gt;接下来对于MEM，用的都是LOAD，代价都是1，2&amp;lt;3所以选cost&amp;#x3D;2的&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;指令发射&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function &lt;span class=&#34;title function_&#34;&gt;Emission&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(node n)&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    For each leaf l_i of the tile selected at node n:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;Emission&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(l_i)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Emit the instruction matched at node n&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;最大匹配-vs-动态规划&#34;&gt;&lt;a href=&#34;#最大匹配-vs-动态规划&#34; class=&#34;headerlink&#34; title=&#34;最大匹配 vs 动态规划&#34;&gt;&lt;/a&gt;最大匹配 vs 动态规划&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;T&lt;/strong&gt; - tile的总种类数  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;K&lt;/strong&gt; - 一个matching tile平均覆盖的节点数  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;K’&lt;/strong&gt; - 需要检查的最大tile尺寸（即最大的瓦片包含的节点数）  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T’&lt;/strong&gt; - 每个树节点平均能匹配上的tile数量  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;N&lt;/strong&gt; - 输入的中间表示IR Tree中的总节点数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两种算法的运行时间复杂度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;最大匹配（Maximal Munch）&lt;/strong&gt; - 其时间复杂度与&lt;br&gt;$$&lt;br&gt;\frac{(K’ + T’) * K}{K} * N &amp;#x3D; (K’ + T’) * N&lt;br&gt;$$&lt;br&gt;成正比&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;动态规划（Dynamic Programming）&lt;/strong&gt; - 其时间复杂度与&lt;br&gt;$$&lt;br&gt;(K’ + T’) * N&lt;br&gt;$$&lt;br&gt;成正比&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Tree-Grammar-树文法&#34;&gt;&lt;a href=&#34;#Tree-Grammar-树文法&#34; class=&#34;headerlink&#34; title=&#34;Tree Grammar 树文法&#34;&gt;&lt;/a&gt;Tree Grammar 树文法&lt;/h2&gt;&lt;p&gt;问题：对于具有复杂指令集和多种寄存器类型及寻址模式的机器，难以使用简单的tree pattern和tiling算法。&lt;br&gt;用一种文法来描述tiles，代替手写过程式匹配代码，支持自动化的指令选择，增强了可移植性&lt;br&gt;图没看懂，后面再回来研究&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/16/AI/week10-11/</guid>
            <title>Week10-11</title>
            <link>http://example.com/2025/06/16/AI/week10-11/</link>
            <category>人工智能</category>
            <pubDate>Mon, 16 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;深度学习&#34;&gt;&lt;a href=&#34;#深度学习&#34; class=&#34;headerlink&#34; title=&#34;深度学习&#34;&gt;&lt;/a&gt;深度学习&lt;/h1&gt;&lt;h2 id=&#34;前馈神经网络&#34;&gt;&lt;a href=&#34;#前馈神经网络&#34; class=&#34;headerlink&#34; title=&#34;前馈神经网络&#34;&gt;&lt;/a&gt;前馈神经网络&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;神经元&lt;/li&gt;
&lt;li&gt;感知机（多一个激活函数）&lt;/li&gt;
&lt;li&gt;激活函数: .RelU, Sigmoid, Softmax, tanh..&lt;/li&gt;
&lt;li&gt;损失函数: MSE, Cross Entropy…s&lt;/li&gt;
&lt;li&gt;参数优化: BP, 梯度下降&lt;br&gt;具体懒得写了，都说烂了&lt;br&gt;记一下这几个激活函数的形状和应用: tanh和sigmoid大多用于二分类，RelU一般用在隐藏层，Softmax用在多分类而且概率和为1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;CNN&#34;&gt;&lt;a href=&#34;#CNN&#34; class=&#34;headerlink&#34; title=&#34;CNN&#34;&gt;&lt;/a&gt;CNN&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;了解卷积操作和操作之后的结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;池化操作（最大池化、平均池化）&lt;br&gt;卷积层负责提取图像中的局部特征；&lt;br&gt;池化层用来大幅降低参数量级(降维)；&lt;br&gt;激活函数负责非线性化；&lt;br&gt;全连接层类似传统神经网络的部分，用来输出想要的结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;神经网络正则化：为了缓解神经网络在训练过程中出现的过拟合问题，需要采取一些正则化技术来提升神经网络的泛化能力(generalization)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dropout：在训练神经网络过程中，每次参数更新时随机丢掉一部分神经元来减少神经网络复杂度，防止过拟合&lt;br&gt; &lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;Batch-Normalization（批归一化）:通过规范化的手段，把神经网络每层中任意神经元的输入值分布改变到均值为0、方差为1的标准正态分布。防止梯度消失，收敛更快&lt;/li&gt;
&lt;li&gt;L1-Norm &amp;amp; L2-Norm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;循环神经网络（RNN）&#34;&gt;&lt;a href=&#34;#循环神经网络（RNN）&#34; class=&#34;headerlink&#34; title=&#34;循环神经网络（RNN）&#34;&gt;&lt;/a&gt;循环神经网络（RNN）&lt;/h2&gt;&lt;p&gt;RNN对具有序列特性的数据非常有效，它能挖掘数据中的时序信息以及语义信息&lt;/p&gt;
&lt;p&gt;为了解决&amp;#x3D;&amp;#x3D;梯度消失问题&amp;#x3D;&amp;#x3D;，长短时记忆模型（Long Short-Term Memory，LSTM）被提出&lt;br&gt;LSTM：&lt;br&gt;与简单的循环神经网络结构不同，长短时记忆网络（Long Short-Term Memory，LSTM）中引入了&amp;#x3D;&amp;#x3D;内部记忆单元&amp;#x3D;&amp;#x3D;（internal memory cell）和&amp;#x3D;&amp;#x3D;门&amp;#x3D;&amp;#x3D;（gates）两种结构来对当前时刻输入信息以及前序时刻所生成信息进行整合和传递。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入门(input gate)、遗忘门(forget gate)和输出门(output gate)三种gate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;门控循环单元（GRU）是一种对LSTM简化的深度学习模型。与长短时记忆网络相比，GRU不再使用记忆单元来传递信息，仅使用隐藏状态来进行信息的传递。相比于长短时记忆网络来说，GRU有更高的计算速度。&lt;/p&gt;
&lt;h3 id=&#34;注意力机制&#34;&gt;&lt;a href=&#34;#注意力机制&#34; class=&#34;headerlink&#34; title=&#34;注意力机制&#34;&gt;&lt;/a&gt;注意力机制&lt;/h3&gt;&lt;p&gt;注意力机制对不同信息的关注程度（重要程度）由权值来体现，注意力机制可以视为&amp;#x3D;&amp;#x3D;查询矩阵(Query)&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;、键(key)&amp;#x3D;&amp;#x3D;以及&amp;#x3D;&amp;#x3D;加权平均值&amp;#x3D;&amp;#x3D;构成了多层感知机(Multilayer Perceptron, MLP)&lt;/p&gt;
&lt;h2 id=&#34;深度生成学习（deep-generative-learning-model）&#34;&gt;&lt;a href=&#34;#深度生成学习（deep-generative-learning-model）&#34; class=&#34;headerlink&#34; title=&#34;深度生成学习（deep generative learning model）&#34;&gt;&lt;/a&gt;深度生成学习（deep generative learning model）&lt;/h2&gt;&lt;p&gt;判别模型vs生成模型&lt;br&gt;变分自编码器 (variational auto-encoder, VAE) 、 自回归模型 (Autoregressivemodels)与生成对抗网络（generative adversarial network，GAN）等&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/16/AI/week14-15/</guid>
            <title>Week14-15</title>
            <link>http://example.com/2025/06/16/AI/week14-15/</link>
            <category>人工智能</category>
            <pubDate>Mon, 16 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;人工智能博弈&#34;&gt;&lt;a href=&#34;#人工智能博弈&#34; class=&#34;headerlink&#34; title=&#34;人工智能博弈&#34;&gt;&lt;/a&gt;人工智能博弈&lt;/h1&gt;&lt;h2 id=&#34;博弈论&#34;&gt;&lt;a href=&#34;#博弈论&#34; class=&#34;headerlink&#34; title=&#34;博弈论&#34;&gt;&lt;/a&gt;博弈论&lt;/h2&gt;&lt;p&gt;博弈的要素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;player&lt;/li&gt;
&lt;li&gt;strategy&lt;/li&gt;
&lt;li&gt;payoff&lt;/li&gt;
&lt;li&gt;rule&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;博弈策略求解&#34;&gt;&lt;a href=&#34;#博弈策略求解&#34; class=&#34;headerlink&#34; title=&#34;博弈策略求解&#34;&gt;&lt;/a&gt;博弈策略求解&lt;/h2&gt;&lt;h3 id=&#34;遗憾最小化算法（Regret-Minimization）&#34;&gt;&lt;a href=&#34;#遗憾最小化算法（Regret-Minimization）&#34; class=&#34;headerlink&#34; title=&#34;遗憾最小化算法（Regret Minimization）&#34;&gt;&lt;/a&gt;遗憾最小化算法（Regret Minimization）&lt;/h3&gt;&lt;p&gt;下一步选择策略$\Sigma_i$的概率P:&lt;br&gt;$$&lt;br&gt;P(\sigma_i^{T+1}) &amp;#x3D; \begin{cases}&lt;br&gt;\frac{\text{Regret}&lt;em&gt;i^{T,+}(\sigma_i)}{\sum&lt;/em&gt;{\sigma_i’ \in \Sigma_i} \text{Regret}&lt;em&gt;i^{T,+}(\sigma_i’)} &amp;amp; \text{if } \sum&lt;/em&gt;{\sigma_i’ \in \Sigma_i} \text{Regret}_i^{T,+}(\sigma_i’) &amp;gt; 0 \&lt;br&gt;\frac{1}{|\Sigma_i|} &amp;amp; \text{otherwise}&lt;br&gt;\end{cases}&lt;br&gt;$$&lt;br&gt;为什么不直接选遗憾最大的：防止对手发现自己所采取的策略&lt;br&gt;+++info 例子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设两个玩家A和B进行石头-剪刀-布（Rock-Paper-Scissors, RPS）的游戏，获胜玩家收益为1分，失败玩家收益为-1分，平局则两个玩家收益均为零分。&lt;/li&gt;
&lt;li&gt;第一局时，若玩家A出石头（R），玩家B出布（P），则此时玩家A的收益 $\mu_A(R, P) &amp;#x3D; -1$，玩家B的收益为 $\mu_B(P, R) &amp;#x3D; 1$。&lt;/li&gt;
&lt;li&gt;对于玩家A来说，在玩家B出布（P）这个策略情况下，如果玩家A选择出布（P）或者剪刀（S），则玩家A对应的收益值 $\mu_A(P, P) &amp;#x3D; 0$ 或者 $\mu_A(S, P) &amp;#x3D; 1$。&lt;/li&gt;
&lt;li&gt;所以第一局之后，玩家A没有出布的遗憾值为 $\mu_A(P, P) - \mu_A(R, P) &amp;#x3D; 0 - (-1) &amp;#x3D; 1$，没有出剪刀的遗憾值为 $\mu_A(S, P) - \mu_A(R, P) &amp;#x3D; 1 - (-1) &amp;#x3D; 2$。&lt;/li&gt;
&lt;li&gt;所以在第二局中，玩家A选择石头、剪刀和布这三个策略的概率分别为 0、$\frac{2}{3}$、$\frac{1}{3}$。因此，玩家A趋向于在第二局中选择出剪刀这个策略。&lt;/li&gt;
&lt;li&gt;第二局中，玩家A选择剪刀和玩家B选择石头情况下，第二轮石头、剪刀、布的Regret分别为1，0，2，把前两轮的regret加起来计算概率，得到出石头、剪刀、布的概率分别为$\frac{1}{6}$、$\frac{2}{6}$、$\frac{3}{6}$。&lt;br&gt;+++&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;双边匹配算法&#34;&gt;&lt;a href=&#34;#双边匹配算法&#34; class=&#34;headerlink&#34; title=&#34;双边匹配算法&#34;&gt;&lt;/a&gt;双边匹配算法&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/f2.jpg&#34;&gt;&lt;br&gt;在第一轮中，4名男性分别向自己最喜欢的女性表白，而收到3人表白的女性A选择了自己最喜欢的男性3，另一个收到表白的女性B选择了男性4；在第二轮中，尚未匹配的男性1和男性2继续向自己第二喜欢的对象表白，收到表白的女性B选择了自己更喜欢的男性2而放弃了男性4；同理，继续三轮表白和选择，所有人都找到了自己的伴侣，且所有匹配都是稳定的。可以看出，使用G-S算法得到了稳定匹配的结果。&lt;/p&gt;
&lt;h3 id=&#34;单边匹配算法-最大交易圈&#34;&gt;&lt;a href=&#34;#单边匹配算法-最大交易圈&#34; class=&#34;headerlink&#34; title=&#34;单边匹配算法-最大交易圈&#34;&gt;&lt;/a&gt;单边匹配算法-最大交易圈&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/f3.jpg&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个人指向最喜欢的物，每个物指向占有它的人&lt;/li&gt;
&lt;li&gt;如果有圈，就把打成交易的人和物和相关边都删掉&lt;/li&gt;
&lt;li&gt;继续&lt;br&gt;&lt;img data-src=&#34;/f4.jpg&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/16/AI/week12-13/</guid>
            <title>Week12-13</title>
            <link>http://example.com/2025/06/16/AI/week12-13/</link>
            <category>人工智能</category>
            <pubDate>Mon, 16 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;强化学习&#34;&gt;&lt;a href=&#34;#强化学习&#34; class=&#34;headerlink&#34; title=&#34;强化学习&#34;&gt;&lt;/a&gt;强化学习&lt;/h1&gt;&lt;p&gt;根据环境所提供的奖罚反馈来学习所处状态可施加的最佳行动，在“探索（未知空间）-利用（已有经验）（exploration vs. exploitation）”之间寻找平衡，完成某个序列化任务，具备自我学习能力&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;智能体（agent）：智能体是强化学习算法的主体，它能够根据经验做出主观判断并执行动作，是整个智能系统的核心。&lt;/li&gt;
&lt;li&gt;环境（environment）：智能体以外的一切统称为环境，环境在与智能体的交互中，能被智能体所采取的动作影响，同时环境也能向智能体反馈状态和奖励。虽说智能体以外的一切都可视为环境，但在设计算法时常常会排除不相关的因素建立一个理想的环境模型来对算法功能进行模拟。&lt;/li&gt;
&lt;li&gt;状态（state）：状态可以理解为智能体对环境的一种理解和编码，通常包含了对智能体所采取决策产生影响的信息。&lt;/li&gt;
&lt;li&gt;动作（action）：动作是智能体对环境产生影响的方式，这里说的动作常常指概念上的动作，如果是在设计机器人时还需考虑动作的执行机构。&lt;/li&gt;
&lt;li&gt;策略（policy）：策略是智能体在所处状态下去执行某个动作的依据，即给定一个状态，智能体可根据一个策略来选择应该采取的动作。&lt;/li&gt;
&lt;li&gt;奖励（reward）：奖励是智能体序贯式采取一系列动作后从环境获得的收益。注意奖励概念是现实中奖励和惩罚的统合，一般用正值来代表实际奖励，用负值来代表实际惩罚。&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;强化学习的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;基于评估&amp;#x3D;&amp;#x3D;：强化学习利用环境评估当前策略，以此为依据进行优化&lt;/li&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;交互性&amp;#x3D;&amp;#x3D;：强化学习的数据在与环境的交互中产生&lt;/li&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;序列决策过程&amp;#x3D;&amp;#x3D;：智能主体在与环境的交互中需要作出一系列的决策，这些决策往往是前后关联的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;离散马尔可夫过程（Discrete-Markov-Process）&#34;&gt;&lt;a href=&#34;#离散马尔可夫过程（Discrete-Markov-Process）&#34; class=&#34;headerlink&#34; title=&#34;离散马尔可夫过程（Discrete Markov Process）&#34;&gt;&lt;/a&gt;离散马尔可夫过程（Discrete Markov Process）&lt;/h2&gt;&lt;p&gt;满足马尔可夫性的离散随机过程&lt;br&gt;用数学归纳法，推出t+1时刻状态仅与t时刻状态有关（一阶马尔可夫链）&lt;br&gt;强化学习是一种机器学习方法，通过与环境的交互来学习最优策略。下面我将通过具体的例子来解释这些公式和概念。&lt;/p&gt;
&lt;h3 id=&#34;马尔可夫奖励过程&#34;&gt;&lt;a href=&#34;#马尔可夫奖励过程&#34; class=&#34;headerlink&#34; title=&#34;马尔可夫奖励过程&#34;&gt;&lt;/a&gt;马尔可夫奖励过程&lt;/h3&gt;&lt;p&gt;$$&lt;br&gt;G_t &amp;#x3D; R_{t+1} + \gamma R_{t+2} + \gamma^2 R_{t+3} + \ldots&lt;br&gt;$$&lt;br&gt;这个公式表示从时间步 t开始的累积回报 $G_t$，其中 $R_{t+i}$ 是在时间步 $t+i$ 获得的即时奖励，$\gamma$ 是折扣因子（范围在 [0, 1] 之间），用于减少未来奖励对当前决策的影响。&lt;/p&gt;
&lt;p&gt;例: 假在一个迷宫中寻找宝藏，每走一步都有可能获得或失去一些分数（奖励）。如果你在第 1 步获得 10 分，在第 2 步获得 5 分，在第 3 步获得 2 分，且折扣因子 $\gamma &amp;#x3D; 0.9$，那么从第 0 步开始的累积回报 $G_0$ 就是：&lt;br&gt;$$&lt;br&gt;G_0 &amp;#x3D; 10 + 0.9 \times 5 + 0.9^2 \times 2 &amp;#x3D; 10 + 4.5 + 1.62 &amp;#x3D; 16.12&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;强化学习的求解方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于价值（1.策略优化 2.策略评估）&lt;/li&gt;
&lt;li&gt;基于策略&lt;/li&gt;
&lt;li&gt;基于模型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;策略学习&#34;&gt;&lt;a href=&#34;#策略学习&#34; class=&#34;headerlink&#34; title=&#34;策略学习&#34;&gt;&lt;/a&gt;策略学习&lt;/h3&gt;&lt;p&gt;价值函数 (value function):&lt;br&gt;$$&lt;br&gt;V_\pi(s) &amp;#x3D; E_\pi[G_t | S_t &amp;#x3D; s]&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;在状态 s 下，按照策略 $\pi$ 行动后在未来所获得的回报的期望值。&lt;/p&gt;
&lt;p&gt;动作-价值函数 (action-value function):&lt;br&gt;$$&lt;br&gt;q_\pi(s, a) &amp;#x3D; E_\pi[G_t | S_t &amp;#x3D; s, A_t &amp;#x3D; a]&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;在状态 s 下采取动作 a，按照策略 $\pi 行动后在未来获得的回报值。&lt;/p&gt;
&lt;p&gt;例: 继续迷宫的例子，假设在某个位置（状态 s有两个选择：向左走（动作 $a_1$ 或向右走（动作 $a_2$）。根据历史数据，向左走的平均回报是 8 分，向右走的平均回报是 12 分。那么在这个状态下，动作-价值函数 $q_\pi(s, a_1) &amp;#x3D; 8$，$q_\pi(s, a_2) &amp;#x3D; 12$。&lt;/p&gt;
&lt;h3 id=&#34;贝尔曼方程&#34;&gt;&lt;a href=&#34;#贝尔曼方程&#34; class=&#34;headerlink&#34; title=&#34;贝尔曼方程&#34;&gt;&lt;/a&gt;贝尔曼方程&lt;/h3&gt;&lt;p&gt;价值函数的贝尔曼方程:&lt;br&gt;$$&lt;br&gt;V_\pi(s) &amp;#x3D; \sum_a \pi(s, a) q_\pi(s, a)&lt;br&gt;$$&lt;br&gt;在状态 s 下，采取各个动作的概率加权平均的动作-价值函数。&lt;/p&gt;
&lt;p&gt;动作-价值函数的贝尔曼方程:&lt;br&gt;$$&lt;br&gt;q_\pi(s, a) &amp;#x3D; \sum_{s’} P(s’ | s, a) [R(s, a, s’) + \gamma V_\pi(s’)]&lt;br&gt;$$&lt;br&gt;在状态s采取动作a的概率*（采取a进入s’得到的回报+处于s’可以得到的回报）。&lt;/p&gt;
&lt;h3 id=&#34;策略评估算法步骤&#34;&gt;&lt;a href=&#34;#策略评估算法步骤&#34; class=&#34;headerlink&#34; title=&#34;策略评估算法步骤&#34;&gt;&lt;/a&gt;策略评估算法步骤&lt;/h3&gt;&lt;h4 id=&#34;动态规划&#34;&gt;&lt;a href=&#34;#动态规划&#34; class=&#34;headerlink&#34; title=&#34;动态规划&#34;&gt;&lt;/a&gt;动态规划&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;初始化 $V_\pi$ 函数：首先需要对所有状态 s 的价值函数 $V_\pi(s)$ 进行初始化，通常可以设置为0或者任意合理的初始值。&lt;/li&gt;
&lt;li&gt;循环迭代：&lt;ul&gt;
&lt;li&gt;对于每一个状态 $s \in S$，根据当前的策略 $\pi$ 和已知的状态转移概率 $Pr(s’|s, a)$，以及即时奖励 $R(s, a, s’)$，更新该状态的价值函数 $V_\pi(s)$。&lt;/li&gt;
&lt;li&gt;更新公式如下：&lt;br&gt;$$&lt;br&gt;V_\pi(s) \leftarrow \sum_{a \in A} \pi(a|s) \sum_{s’ \in S} Pr(s’|s, a) [R(s, a, s’) + \gamma V_\pi(s’)]&lt;br&gt;$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;直到收敛：重复上述迭代过程，直到价值函数 $V_\pi(s)$ 在所有状态上都几乎不再发生变化，即达到收敛状态。这表明我们已经找到了在当前策略 $\pi$ 下各个状态的稳定价值。&lt;br&gt;&amp;#x3D;&amp;#x3D;当前状态的价值是由后续状态的价值通过贝尔曼方程传播回来的&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;策略评估：动态规划、蒙特卡洛采样、时序差分&lt;/p&gt;
&lt;h4 id=&#34;蒙特卡洛采样&#34;&gt;&lt;a href=&#34;#蒙特卡洛采样&#34; class=&#34;headerlink&#34; title=&#34;蒙特卡洛采样&#34;&gt;&lt;/a&gt;蒙特卡洛采样&lt;/h4&gt;&lt;p&gt;通过随机采样来估计期望值&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择起始状态：从状态空间 S 中选择不同的起始状态。&lt;/li&gt;
&lt;li&gt;按照当前策略采样轨迹：从每个起始状态出发，按照当前策略 $\pi$ 生成若干条完整的轨迹（episode）。这些轨迹构成了集合 D。&lt;/li&gt;
&lt;li&gt;计算反馈：对于每条轨迹中的每个状态 s，记录该状态出现时对应的回报 $G_i$ 。&lt;/li&gt;
&lt;li&gt;平均回报：对所有轨迹中状态 s 出现时的回报进行平均，得到该状态的价值 $V_\pi(s)$。&lt;br&gt;假设我们有 k 条轨迹，每条轨迹中状态 s 出现时对应的回报分别为$G_1, G_2, \ldots, G_k$，那么该状态的价值 $V_\pi(s)$ 可以通过以下公式计算：&lt;br&gt;$$&lt;br&gt;V_\pi(s) &amp;#x3D; \frac{1}{k} \sum_{i&amp;#x3D;1}^k G_i&lt;br&gt;$$&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;时序差分-TD&#34;&gt;&lt;a href=&#34;#时序差分-TD&#34; class=&#34;headerlink&#34; title=&#34;时序差分(TD)&#34;&gt;&lt;/a&gt;时序差分(TD)&lt;/h4&gt;&lt;p&gt;时序差分算法通过在每个时间步 t 上更新状态价值函数 $V_\pi(s_t)$，而不是在每个状态 $s_t$ 上进行批量更新。&lt;br&gt;$$&lt;br&gt;V_\pi(s) \leftarrow V_\pi(s) + \alpha [R(s, a, s’) + \gamma V_\pi(s’) - V_\pi(s)]&lt;br&gt;$$&lt;br&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\alpha$ 是学习率，通常取较小的值，如0.1。&lt;/li&gt;
&lt;li&gt;$R(s, a, s’)$ 是即时奖励&lt;/li&gt;
&lt;li&gt;$V_\pi(s’)$ 是状态 $s’$ 的价值函数&lt;/li&gt;
&lt;li&gt;$\gamma$ 是折扣因子，通常取较小的值，如0.9。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Q-learning&#34;&gt;&lt;a href=&#34;#Q-learning&#34; class=&#34;headerlink&#34; title=&#34;Q-learning&#34;&gt;&lt;/a&gt;Q-learning&lt;/h4&gt;&lt;h4 id=&#34;DQN&#34;&gt;&lt;a href=&#34;#DQN&#34; class=&#34;headerlink&#34; title=&#34;DQN&#34;&gt;&lt;/a&gt;DQN&lt;/h4&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/16/computer-science/compile-principles/ch7/</guid>
            <title>IR</title>
            <link>http://example.com/2025/06/16/computer-science/compile-principles/ch7/</link>
            <category>中间代码</category>
            <pubDate>Mon, 16 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;IR&#34;&gt;&lt;a href=&#34;#IR&#34; class=&#34;headerlink&#34; title=&#34;IR&#34;&gt;&lt;/a&gt;IR&lt;/h1&gt;&lt;p&gt;Intermediate Representation&lt;br&gt;解决高级语言和目标机器汇编语言之间的转化&lt;br&gt;为什么需要IR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更模块化、可迁移&lt;/li&gt;
&lt;li&gt;分层分析和优化&lt;br&gt;IR可以有好多层：IR1-&amp;gt;IR2-&amp;gt;…-&amp;gt;IRn&lt;br&gt;+++info 编译流程划分&lt;br&gt;前端：源代码-&amp;gt;词法分析-&amp;gt;语法分析-&amp;gt;语义分析（IR之前的都是）&lt;br&gt;中端：基于IR的分析与变换（可能生成新IR，可以做一些机器无关优化比如循环展开等）&lt;br&gt;后端：指令选择-&amp;gt;寄存器分配-&amp;gt;指令调度-&amp;gt;机器码（IR之后的）&lt;br&gt;+++&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Three-Address-Code&#34;&gt;&lt;a href=&#34;#Three-Address-Code&#34; class=&#34;headerlink&#34; title=&#34;Three-Address Code&#34;&gt;&lt;/a&gt;Three-Address Code&lt;/h2&gt;&lt;p&gt;最多有三个操作数&lt;br&gt;x &amp;#x3D; y op z&lt;br&gt;“地址”可以具有如下形式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源程序中的名字(name)&lt;/li&gt;
&lt;li&gt;常量 (constant)&lt;/li&gt;
&lt;li&gt;临时变量(temporary)&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;br&gt;最常见的实现方法是将三地址代码作为四元组实现&lt;br&gt;+++info example&lt;br&gt;t1&amp;#x3D;x&amp;gt;0                  (gt, x, 0, t1)&lt;br&gt;if_false t1 goto L1     (if_f, t1, L1, _)&lt;br&gt;fact&amp;#x3D;1                  (asn, 1, fact, _)&lt;br&gt;label L2                (lab, L2, _, _)&lt;br&gt;+++&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;IR-Tree&#34;&gt;&lt;a href=&#34;#IR-Tree&#34; class=&#34;headerlink&#34; title=&#34;IR Tree&#34;&gt;&lt;/a&gt;IR Tree&lt;/h2&gt;&lt;p&gt;两大类节点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;表达式Exp&lt;/li&gt;
&lt;li&gt;语句Stmt&lt;br&gt;文法：&lt;br&gt;&lt;img data-src=&#34;/f2.jpg&#34;&gt;&lt;br&gt;表达式：&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Node&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;CONST(i)&lt;/td&gt;
&lt;td&gt;整数常量i&lt;/td&gt;
&lt;td&gt;CONST(42) → the value 42&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NAME(n)&lt;/td&gt;
&lt;td&gt;符号常量n，通常是一个label，值是label的地址&lt;/td&gt;
&lt;td&gt;NAME(L1) → address of label L1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TEMP(t)&lt;/td&gt;
&lt;td&gt;临时变量t (like register)&lt;/td&gt;
&lt;td&gt;TEMP(t123) → contents of temporary t123&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BINOP(o,e1,e2)&lt;/td&gt;
&lt;td&gt;对e1和e2执行二元操作o&lt;/td&gt;
&lt;td&gt;BINOP(PLUS,TEMP(t1),CONST(1)) → t1+1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEM(e)&lt;/td&gt;
&lt;td&gt;Memory access&lt;/td&gt;
&lt;td&gt;MEM(CONST(100)) → contents at address 100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CALL(f,l)&lt;/td&gt;
&lt;td&gt;Function call, l是参数列表&lt;/td&gt;
&lt;td&gt;CALL(NAME(print),[TEMP(t1)]) → call print(t1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESEQ(s,e)&lt;/td&gt;
&lt;td&gt;先执行语句s，再求值表达式e并返回e的结果&lt;/td&gt;
&lt;td&gt;ESEQ(MOVE(TEMP(t),CONST(1)),TEMP(t)) → (t&amp;#x3D;1; t)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语句：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Node&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;MOVE(TEMP t, e)&lt;/td&gt;
&lt;td&gt;将表达式e的值赋给临时变量t&lt;/td&gt;
&lt;td&gt;MOVE(TEMP(t1), CONST(42)) → t1 &amp;#x3D; 42&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MOVE(MEM(e1), e2)&lt;/td&gt;
&lt;td&gt;将表达式e2的值存储到由e1指定的内存地址中&lt;/td&gt;
&lt;td&gt;MOVE(MEM(TEMP(t1)), CONST(42)) → *t1 &amp;#x3D; 42&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EXP(e)&lt;/td&gt;
&lt;td&gt;计算表达式e的值但不返回结果，通常用于有副作用的操作（如函数调用）&lt;/td&gt;
&lt;td&gt;EXP(CALL(NAME(print), …)) → 调用print()函数以产生效果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JUMP(e, labs)&lt;/td&gt;
&lt;td&gt;无条件跳转到由e指定的地址&lt;/td&gt;
&lt;td&gt;JUMP(NAME(L1), [L1]) → goto L1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CJUMP(o,e1,e2,t,f)&lt;/td&gt;
&lt;td&gt;条件跳转，根据操作o对e1和e2的结果决定跳转到t或f&lt;/td&gt;
&lt;td&gt;CJUMP(LT, TEMP(t1), CONST(0), L1, L2) → 如果t1 &amp;lt; 0则跳转到L1，否则跳转到L2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SEQ(s1, s2)&lt;/td&gt;
&lt;td&gt;语句序列，先执行s1再执行s2&lt;/td&gt;
&lt;td&gt;SEQ(MOVE(…), JUMP(…)) → 先赋值再跳转&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LABEL(n)&lt;/td&gt;
&lt;td&gt;定义一个标签&lt;/td&gt;
&lt;td&gt;LABEL(L1) → L1:&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;例子：&lt;br&gt;&lt;img data-src=&#34;/f3.jpg&#34;&gt;&lt;br&gt;ADD那个地方写成BINOP的写法也可以&lt;/p&gt;
&lt;h2 id=&#34;翻译AST成IR-Tree&#34;&gt;&lt;a href=&#34;#翻译AST成IR-Tree&#34; class=&#34;headerlink&#34; title=&#34;翻译AST成IR Tree&#34;&gt;&lt;/a&gt;翻译AST成IR Tree&lt;/h2&gt;&lt;p&gt;把AST表达式分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ex: 有结果的AST表达式比如a+b&lt;/li&gt;
&lt;li&gt;Nx：无结果的语句的比如print&lt;/li&gt;
&lt;li&gt;Cx：条件语句，值为bool的AST表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;translate-Exp&#34;&gt;&lt;a href=&#34;#translate-Exp&#34; class=&#34;headerlink&#34; title=&#34;translate Exp&#34;&gt;&lt;/a&gt;translate Exp&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;翻译简单变量：&lt;br&gt;在函数中访问一个局部变量实际上是访问它在当前栈帧中的位置，所以访问一个距离fp的offset为k的局部变量v，其IR Tree表示为:&lt;br&gt;$$&lt;br&gt;MEM(BINOP(PLUS, TEMP fp, CONST k))&lt;br&gt;$$&lt;br&gt;&lt;img data-src=&#34;/f4.jpg&#34;&gt;&lt;br&gt;如果通过static link访问一个变量，就要嵌套好几层MEM和BINOP&lt;br&gt;比如这个访问嵌套两层外面的x&lt;br&gt;最内层使用 CONST(8)：是因为需要从 inner 函数的帧指针 FP 开始，偏移 8 字节来访问静态链，该静态链指向 middle 函数的帧。&lt;br&gt;中间层和最外层使用 CONST(0)：是因为它们分别通过静态链直接访问 outer 函数的帧和变量 x，不需要额外的偏移&lt;br&gt;&lt;img data-src=&#34;/f5.jpg&#34;&gt;&lt;br&gt;:::danger&lt;br&gt;这个地方为什么内层是8中层是0存疑&lt;br&gt;:::&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;左值和右值：&amp;#x3D;左右的&lt;br&gt;MEM(addr)可以是左值也可以是右值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scalar L-value(Tiger): 一个地址&lt;/li&gt;
&lt;li&gt;Structured L-value(Pascal&amp;#x2F;C): 一块内存&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;翻译算术运算&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;二元: BINOP(op, e1, e2)&lt;/li&gt;
&lt;li&gt;一元: &lt;ul&gt;
&lt;li&gt;-x &amp;#x3D;&amp;#x3D;&amp;gt; BINOP(MINUS, CONST(0), e_x)&lt;/li&gt;
&lt;li&gt;~x &amp;#x3D;&amp;#x3D;&amp;gt; BINOP(XOR, e_x, CONST(-1))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;数组访问&lt;br&gt;$$&lt;br&gt;MEM(BINOP(PLUS, MEM(e_a), BINOP(MUL, e_i, CONST(W))))&lt;br&gt;$$&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;e_a&lt;/code&gt; 是表示变量 &lt;code&gt;a&lt;/code&gt; 的表达式，通常是&amp;#x3D;&amp;#x3D; &lt;code&gt;MEM(+(TEMP(fp), CONST(k_a)))&lt;/code&gt;&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MEM(e_a)&lt;/code&gt;：&amp;#x3D;&amp;#x3D;获取存储在变量 &lt;code&gt;a&lt;/code&gt; 中的值，即数组基地址&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e_i&lt;/code&gt; 是计算索引 &lt;code&gt;i&lt;/code&gt; 的表达式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BINOP(MUL, e_i, CONST(W))&lt;/code&gt;：计算偏移&lt;br&gt;&lt;img data-src=&#34;/f6.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;记录字段r.f访问:&lt;br&gt;$$&lt;br&gt;MEM(BINOP(PLUS, MEM(e_r), BINOP(MUL, n, CONST(W))))&lt;br&gt;$$&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;翻译控制流&lt;br&gt;对于if e1 op e2 then stmt1 else stmt2翻译成&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;IR&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 6个SEQ&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SEQ(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CJUMP(op, e1, e2, t, f),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SEQ(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        LABEL(t),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        SEQ(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            stm1,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            SEQ(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                JUMP(NAME(end)),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                SEQ(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    LABEL(f),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    SEQ(stm2, LABEL(end))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Tiger的逻辑运算符&amp;amp;(and)和|(or)需要实现短路求值：只计算必要的操作数&lt;br&gt;每个Cx是一个Label&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑与 (a &amp;amp; b)的短路规则：&lt;ul&gt;
&lt;li&gt;计算a&lt;br&gt;  -若a为假，直接得到假结果（不计算b）&lt;br&gt;  -若a为真，继续计算b，最终结果即为b的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;逻辑或 (a | b)的短路规则：&lt;br&gt;  -计算a&lt;br&gt;  -若a为真，直接得到真结果（不计算b）&lt;ul&gt;
&lt;li&gt;若a为假，继续计算b，最终结果即为b的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;循环语句&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;tiger&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; a &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a := a - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;翻译成&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;IR&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;SEQ(LABEL test, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SEQ(CJUMP(GT, TEMP a, CONST &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, body, done), &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        SEQ(LABEL body, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            SEQ(MOVE(TEMP a, BINOP(MINUS, TEMP a, CONST &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)), &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                SEQ(JUMP(NAME(test), [test]), &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    LABEL done)))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;break翻译为直接跳转到done&lt;br&gt;for循环我懒得写了，也是一个道理&lt;br&gt;和汇编差不多意思&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;翻译函数&lt;br&gt;$$&lt;br&gt;CALL(NAME(l_f), [sl, a_1, …, a_n])&lt;br&gt;$$&lt;br&gt;sl是static link。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;translate-Declaration&#34;&gt;&lt;a href=&#34;#translate-Declaration&#34; class=&#34;headerlink&#34; title=&#34;translate Declaration&#34;&gt;&lt;/a&gt;translate Declaration&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Variable declaration&lt;/li&gt;
&lt;li&gt;Type declaration&lt;/li&gt;
&lt;li&gt;Function declaration&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;翻译变量声明&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;tiger&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var x := &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var y := x + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;in &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x + y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;IR&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ESEQ( &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SEQ( &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        MOVE(MEM(+(FP, CONST(x_offset))), CONST(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)), &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        MOVE(MEM(+(FP, CONST(y_offset))), &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        BINOP(PLUS, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        MEM(+(FP, CONST(x_offset))), &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CONST(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ), &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BINOP(PLUS, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    MEM(+(FP, CONST(x_offset))), &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    MEM(+(FP, CONST(y_offset)))) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;let body in e end翻译成ESEQ(body, e)&lt;br&gt;变量定义翻译成 MEM(+(FP, CONST(offset)))&lt;br&gt;初始化翻译成 MOVE(MEM(+(FP, CONST(offset))), CONST(value))&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;p&gt;类型声明&lt;br&gt;No need to generate any IR tree code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数声明&lt;br&gt; – Prologue（序言）&lt;br&gt; – Body（函数体）&lt;br&gt; – Epilogue（尾声）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Prologue&lt;ul&gt;
&lt;li&gt;pseudo-instructions to announce the beginning of a function&lt;/li&gt;
&lt;li&gt;定义函数标签用于跳转&amp;#x2F;调用&lt;/li&gt;
&lt;li&gt;修改栈指针（SP），为新栈帧分配空间，一般是$SP :&amp;#x3D; SP - frame_size$&lt;/li&gt;
&lt;li&gt;保存被调用者需要保存的寄存器（callee-save），如 $s0-$s7；保存返回地址（RA）&lt;/li&gt;
&lt;li&gt;保存函数参数到栈中（尤其是传值调用时）；保存静态链（static link）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/15/AI/week8-9/</guid>
            <title>Week8-9</title>
            <link>http://example.com/2025/06/15/AI/week8-9/</link>
            <category>人工智能</category>
            <pubDate>Sun, 15 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;K-Means&#34;&gt;&lt;a href=&#34;#K-Means&#34; class=&#34;headerlink&#34; title=&#34;K-Means&#34;&gt;&lt;/a&gt;K-Means&lt;/h1&gt;&lt;p&gt;问题描述：如何将n个数据依据其相似度大小将它们分别聚类到k个集合，使得每个数据仅属于一个聚类集合。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化质心：随机选择k个数据点作为初始质心$c_1, c_2, …, c_k$。&lt;/li&gt;
&lt;li&gt;分配数据点：对于每个数据点$x_i$，计算它与所有质心的距离，并将其分配到距离最近的质心所在的簇中&lt;/li&gt;
&lt;li&gt;更新质心：对于每个簇，计算该簇内所有数据点的平均值，将该平均值作为新的质心。&lt;/li&gt;
&lt;li&gt;迭代过程：重复执行分配和更新步骤，直到质心不再发生变化或达到预设的最大迭代次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;主成分分析-PCA&#34;&gt;&lt;a href=&#34;#主成分分析-PCA&#34; class=&#34;headerlink&#34; title=&#34;主成分分析(PCA)&#34;&gt;&lt;/a&gt;主成分分析(PCA)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;输入：n个d维样本数据所构成的矩阵$\mathbf{X}$，降维后的维数l&lt;/li&gt;
&lt;li&gt;输出：映射矩阵$\mathbf{W} &amp;#x3D; {\mathbf{w}_1, \mathbf{w}_2, …, \mathbf{w}_l}$&lt;br&gt;算法步骤：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对于每个样本数据$\mathbf{x}_i$进行中心化处理：&lt;br&gt;$$&lt;br&gt;\mathbf{x}_i’ &amp;#x3D; \mathbf{x}&lt;em&gt;i - \mu, \quad \mu &amp;#x3D; \frac{1}{n}\sum&lt;/em&gt;{j&amp;#x3D;1}^{n} \mathbf{x}_j&lt;br&gt;$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算原始样本数据的协方差矩阵：&lt;br&gt;$$&lt;br&gt;\Sigma &amp;#x3D; \frac{1}{n-1} \mathbf{X}^T \mathbf{X}&lt;br&gt;$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对协方差矩阵$\Sigma$进行特征值分解，对所得特征根按其值大到小排序$\lambda_1 \geq \lambda_2 \geq \cdots \geq \lambda_d$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;取前$l$个最大特征根所对应特征向量$\mathbf{w}_1, \mathbf{w}_2, …, \mathbf{w}_l$组成映射矩阵$\mathbf{W}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将每个样本数据$\mathbf{x}&lt;em&gt;i$按照如下方法降维：&lt;br&gt;$$&lt;br&gt;(\mathbf{x}&lt;em&gt;i)&lt;/em&gt;{1 \times d} (\mathbf{W})&lt;/em&gt;{d \times l} &amp;#x3D; 1 \times l&lt;br&gt;$$&lt;br&gt;区分：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;维度&lt;/th&gt;
&lt;th&gt;PCA&lt;/th&gt;
&lt;th&gt;LDA&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;无监督&lt;/td&gt;
&lt;td&gt;有监督&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;目标&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;最大化方差，保留主要分布信息&lt;/td&gt;
&lt;td&gt;最大化类间距离，最小化类内距离&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;是否使用类别信息&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;? 不使用&lt;/td&gt;
&lt;td&gt;? 使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;适用任务&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;数据压缩、可视化、去噪&lt;/td&gt;
&lt;td&gt;分类任务的特征提取&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;降维后维度上限&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;可任意，但一般小于原维度&lt;/td&gt;
&lt;td&gt;最多降到 $k-1$ 维（$k$ 是类别数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;数学基础&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;协方差矩阵的特征值分解&lt;/td&gt;
&lt;td&gt;类间&amp;#x2F;类内散度矩阵的广义特征值分解&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;其他降维方法：&lt;ul&gt;
&lt;li&gt;非负矩阵分解 （non-negative matrix factorization, NMF）&lt;/li&gt;
&lt;li&gt;多维尺度法（Metric multidimensional scaling, MDS）&lt;/li&gt;
&lt;li&gt;局部线性嵌入（Locally Linear Embedding，LLE）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;特征人脸方法&#34;&gt;&lt;a href=&#34;#特征人脸方法&#34; class=&#34;headerlink&#34; title=&#34;特征人脸方法&#34;&gt;&lt;/a&gt;特征人脸方法&lt;/h1&gt;&lt;p&gt;输入时将每幅人脸图像转换成列向量&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;br&gt;算法描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入：$n$个1024维人脸样本数据所构成的矩阵$\mathbf{X}$，降维后的维数$l$&lt;/li&gt;
&lt;li&gt;输出：映射矩阵$\mathbf{W} &amp;#x3D; {\mathbf{w}_1, \mathbf{w}_2, …, \mathbf{w}_l}$（其中每个$\mathbf{w}_j (1 \leq j \leq l)$是一个特征人脸）&lt;br&gt;算法步骤&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;中心化处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对每个人脸样本数据$x_i$进行中心化处理：&lt;br&gt;$$&lt;br&gt;x_i’ &amp;#x3D; x_i - \mu, \quad \mu &amp;#x3D; \frac{1}{n}\sum_{j&amp;#x3D;1}^{n} x_j&lt;br&gt;$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算协方差矩阵：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算原始人脸样本数据的协方差矩阵：&lt;br&gt;$$&lt;br&gt;\Sigma &amp;#x3D; \frac{1}{n-1} \mathbf{X}^T \mathbf{X}&lt;br&gt;$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;特征值分解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对协方差矩阵$\Sigma$进行特征值分解，对所得特征根按从大到小排序：&lt;br&gt;$$&lt;br&gt;\lambda_1 \geq \lambda_2 \geq \cdots \geq \lambda_d&lt;br&gt;$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;构建映射矩阵：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取前$l$个最大特征根所对应特征向量$\mathbf{w}_1, \mathbf{w}_2, …, \mathbf{w}_l$组成映射矩阵$\mathbf{W}$。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据降维：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将每个人脸图像$x_i$按照如下方法降维：&lt;br&gt;$$&lt;br&gt;(\mathbf{x}&lt;em&gt;i)&lt;/em&gt;{1 \times d} (\mathbf{W})_{d \times l} &amp;#x3D; 1 \times l&lt;br&gt;$$&lt;br&gt;（其实用的是pca，多的一步就是输入的时候把32*32的图摊开成1024*1的列向量而已）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;潜在语义分析（Latent-Semantic-Analysis-LSA）&#34;&gt;&lt;a href=&#34;#潜在语义分析（Latent-Semantic-Analysis-LSA）&#34; class=&#34;headerlink&#34; title=&#34;潜在语义分析（Latent Semantic Analysis, LSA）&#34;&gt;&lt;/a&gt;潜在语义分析（Latent Semantic Analysis, LSA）&lt;/h1&gt;&lt;p&gt;步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;构建单词-文档矩阵：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建一个单词-文档矩阵$A$，其中每个元素$a_{ij}$表示第$i$个单词在第$j$个文档中的频率（通常使用词频-逆文档频率TF-IDF进行加权）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;奇异值分解（SVD）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对单词-文档矩阵$A$进行奇异值分解，即$A &amp;#x3D; U \Sigma V^T$，其中$U$和$V$分别是左奇异向量和右奇异向量组成的矩阵，$\Sigma$是对角矩阵，其对角线上的元素是$A$的奇异值（按降序排列）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择前$k$个最大奇异值及对应的奇异向量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选取前$k$个最大的奇异值及其对应的奇异向量，形成低秩逼近矩阵$A_k &amp;#x3D; U_k \Sigma_k V_k^T$。这里$k$的选择取决于保留多少原始信息量，通常根据累积能量准则或经验确定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重建矩阵并挖掘语义关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用$A_k$代替原始矩阵$A$，可以计算任意两个文档之间的相似度（如皮尔逊相关系数），从而发现文档-文档之间的关联关系。&lt;/li&gt;
&lt;li&gt;同样地，也可以用于探索单词-单词、单词-文档间的隐含关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;期望最大化算法（Expectation-Maximization-Algorithm-EM）&#34;&gt;&lt;a href=&#34;#期望最大化算法（Expectation-Maximization-Algorithm-EM）&#34; class=&#34;headerlink&#34; title=&#34;期望最大化算法（Expectation-Maximization Algorithm, EM）&#34;&gt;&lt;/a&gt;期望最大化算法（Expectation-Maximization Algorithm, EM）&lt;/h1&gt;&lt;p&gt;EM算法是一种迭代方法，主要用于含有隐变量的概率模型参数估计问题。它分为&amp;#x3D;&amp;#x3D;E步（求期望）&amp;#x3D;&amp;#x3D;和&amp;#x3D;&amp;#x3D;M步（最大化）&amp;#x3D;&amp;#x3D;，通过迭代方式逼近模型参数的最大似然估计值。&lt;/p&gt;
&lt;p&gt;步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;初始化模型参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先为模型参数设定初始值（例如高斯混合模型中的均值、方差等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;E步（Expectation Step）：计算隐变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于当前的模型参数，计算隐变量的后验概率分布。对于每一个样本$x_i$和可能的隐变量$z_i$，计算$p(z_i|x_i, \theta)$，其中$\theta$表示当前的模型参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M步（Maximization Step）：最大化似然函数和更新模型参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据观测数据$x_i$、隐变量$z_i$的后验概率分布，重新估计模型参数$\theta$，以最大化完整数据的对数似然函数$\log p(x,z|\theta)$的期望。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重复E步和M步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不断重复执行E步和M步，直到模型参数收敛或者达到预定的迭代次数为止。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体的没看懂，等我懂了再说&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/15/computer-science/compile-principles/ch6/</guid>
            <title>活动记录</title>
            <link>http://example.com/2025/06/15/computer-science/compile-principles/ch6/</link>
            <category>活动记录</category>
            <pubDate>Sun, 15 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Activation-Record-Stack-Frame&#34;&gt;&lt;a href=&#34;#Activation-Record-Stack-Frame&#34; class=&#34;headerlink&#34; title=&#34;Activation Record&amp;#x2F;Stack Frame&#34;&gt;&lt;/a&gt;Activation Record&amp;#x2F;Stack Frame&lt;/h1&gt;&lt;p&gt;函数的栈帧是栈上用来放函数的局部变量、参数、返回地址以及其他临时变量的区域&lt;br&gt;stack一般从高地址向低地址，heap从低地址向高地址&lt;br&gt;layout:&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;incoming arguments: 存储caller传递给callee的参数&lt;/li&gt;
&lt;li&gt;frame pointer: 帧指针，用来访问incoming arguments，从低向高是argument 1, argument 2, …&lt;/li&gt;
&lt;li&gt;local variables: 存储函数的局部变量（还有一些保存在寄存器里）&lt;/li&gt;
&lt;li&gt;return address: 存储需要返回caller的哪里；non-leaf过程会把return address写入栈帧里面&lt;/li&gt;
&lt;li&gt;temporaries: 存储临时变量，复杂表达式拆出来的中间变量放的地方&lt;/li&gt;
&lt;li&gt;saved registers&lt;/li&gt;
&lt;li&gt;outgoing arguments: 存储当前函数要传递给别的函数的参数&lt;/li&gt;
&lt;li&gt;stack pointer: 栈指针，从低向高&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;函数调用流程：&#34;&gt;&lt;a href=&#34;#函数调用流程：&#34; class=&#34;headerlink&#34; title=&#34;函数调用流程：&#34;&gt;&lt;/a&gt;函数调用流程：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;g调用f的时候&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;进入f的时候，保存旧的FP(g的FP)&lt;/li&gt;
&lt;li&gt;把FP设置为原来的SP，把SP &amp;#x3D; SP - frame size&lt;br&gt;&lt;img data-src=&#34;/f2.jpg&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;f返回的时候&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;让SP &amp;#x3D; FP(恢复g的SP)&lt;/li&gt;
&lt;li&gt;从内存中读出g的FP恢复回去&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果栈帧大小固定就只需要FP不需要SP了，因为FP &amp;#x3D; SP + frame size&lt;/p&gt;
&lt;h2 id=&#34;saved-register&#34;&gt;&lt;a href=&#34;#saved-register&#34; class=&#34;headerlink&#34; title=&#34;saved register&#34;&gt;&lt;/a&gt;saved register&lt;/h2&gt;&lt;p&gt;函数g调用f的时候，用到了寄存器r，调用f的时候要把r保存在saved register中，等调用结束再恢复回去&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;caller-saved register: 函数调用的时候用到的寄存器，调用结束后可以恢复&lt;/li&gt;
&lt;li&gt;callee-saved register: 函数调用的时候用不到的寄存器，调用结束后不能恢复&lt;br&gt;&amp;#x3D;&amp;#x3D;FP是由callee保存和恢复的&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参数传递&#34;&gt;&lt;a href=&#34;#参数传递&#34; class=&#34;headerlink&#34; title=&#34;参数传递&#34;&gt;&lt;/a&gt;参数传递&lt;/h2&gt;&lt;p&gt;一般约定把前k(4 or 6)个参数放在寄存器传递，剩下的参数放在栈中传递&lt;br&gt;四种传参方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不给叶过程 (leaf procedure) 分配栈帧&lt;br&gt;叶过程是指不调用其他过程的过程。在这种情况下，可以不为叶过程分配栈帧&lt;/li&gt;
&lt;li&gt;过程间寄存器分配 (interprocedural register allocation)&lt;br&gt;这种方法需要先分析代码中全部的函数，然后再根据分析结果来分配寄存器。&lt;br&gt;假设有一个程序包含多个函数，通过全局分析发现某些变量在多个函数之间频繁使用，可以为其分配固定的寄存器，避免频繁的内存读写&lt;/li&gt;
&lt;li&gt;若变量 x 不再被使用，可以直接写其寄存器，不需要再保存 x 到栈帧中&lt;br&gt;当一个变量在当前作用域内不再被使用时，可以直接将其值写入寄存器，而无需保存到栈帧中&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;exampleFunction&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y = x * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 使用x后，x不再被使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 直接将y的值写入寄存器，无需保存x到栈帧中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Result: %d\n&amp;quot;&lt;/span&gt;, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;寄存器窗口技术 (register windows)&lt;br&gt;在每次函数调用时，系统会自动切换到一组新的寄存器，称为寄存器窗口。这样，每个函数都可以独立地使用自己的寄存器，而不会影响其他函数的寄存器状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;functionA&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 使用寄存器窗口A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;functionB&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 使用寄存器窗口B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    functionA();  &lt;span class=&#34;comment&#34;&gt;// 调用functionA时，自动切换到寄存器窗口A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Frame-Resident-Variables&#34;&gt;&lt;a href=&#34;#Frame-Resident-Variables&#34; class=&#34;headerlink&#34; title=&#34;Frame-Resident Variables&#34;&gt;&lt;/a&gt;Frame-Resident Variables&lt;/h2&gt;&lt;p&gt;什么情况下要把变量写入栈帧里面？、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the varibles will be passed by reference 变量传地址&amp;#x2F;引用&lt;/li&gt;
&lt;li&gt;变量被嵌套在函数内部的函数访问（不绝对）&lt;/li&gt;
&lt;li&gt;变量太大了没法直接放寄存器&lt;/li&gt;
&lt;li&gt;变量是一个数组&lt;/li&gt;
&lt;li&gt;传递参数&lt;/li&gt;
&lt;li&gt;有太多局部变量和临时变量放不下了&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;escape 逃逸：如果一个变量需要传地址&amp;#x2F;取地址&amp;#x2F;被过程内部嵌套的函数访问，那么这个变量就会逃逸。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;static-links&#34;&gt;&lt;a href=&#34;#static-links&#34; class=&#34;headerlink&#34; title=&#34;static links&#34;&gt;&lt;/a&gt;static links&lt;/h2&gt;&lt;p&gt;在嵌套的函数声明中，内层函数是有可能用到外层函数的局部变量的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static links是指向上一层嵌套层级的栈帧的指针。内层嵌套函数调用外层定义的变量的时候需要用到static links，否则无法寻址。&lt;br&gt;&lt;img data-src=&#34;/f3.jpg&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/f4.jpg&#34;&gt;&lt;br&gt;只有调用自身的时候才传递自己的static link作为static link，其他的都是把外层函数的fp作为static link&lt;br&gt;如果要访问外层变量，就顺着static一层一层查上去直到找到了为止。&lt;br&gt;其他访问方法：&lt;/li&gt;
&lt;li&gt;嵌套层次显示表(display)&lt;br&gt;建立一个全局数组，位置i包含一个指针，指向最近一次进入的，其静态嵌套深度是i的过程的栈帧&lt;br&gt;&lt;img data-src=&#34;/f5.jpg&#34;&gt;&lt;br&gt;先给它们标上嵌套深度&lt;br&gt;直接把链表变成数组了，需要用到一个变量，就查看当前变量的嵌套深度i然后直接找那个数组i位置的座位fp地址来找&lt;/li&gt;
&lt;li&gt;lambda lifting&lt;br&gt;g调用f时，g中每一个实际（或被嵌套在f内的任意函数）访问了的变量，都将作为额外的参数传递给f&lt;br&gt;把内部的函数，从内往外进行改写，改写函数的参数实现lambda lifting&lt;br&gt;&lt;img data-src=&#34;/f6.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tiger编译器的栈帧&#34;&gt;&lt;a href=&#34;#tiger编译器的栈帧&#34; class=&#34;headerlink&#34; title=&#34;tiger编译器的栈帧&#34;&gt;&lt;/a&gt;tiger编译器的栈帧&lt;/h2&gt;&lt;p&gt;tiger不支持高阶函数&lt;br&gt;看不完了。。再说吧&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/12/AI/week6-7/</guid>
            <title>Week6-7</title>
            <link>http://example.com/2025/06/12/AI/week6-7/</link>
            <category>人工智能</category>
            <pubDate>Thu, 12 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Ch4-机器学习&#34;&gt;&lt;a href=&#34;#Ch4-机器学习&#34; class=&#34;headerlink&#34; title=&#34;Ch4 机器学习&#34;&gt;&lt;/a&gt;Ch4 机器学习&lt;/h1&gt;&lt;h2 id=&#34;监督学习&#34;&gt;&lt;a href=&#34;#监督学习&#34; class=&#34;headerlink&#34; title=&#34;监督学习&#34;&gt;&lt;/a&gt;监督学习&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;标注数据&lt;/li&gt;
&lt;li&gt;学习模型&lt;/li&gt;
&lt;li&gt;损失函数&lt;br&gt;典型的损失函数&lt;br&gt;&lt;img data-src=&#34;/figure2.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经验风险(empirical risk )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;训练集中数据产生的损失。&lt;/li&gt;
&lt;li&gt;经验风险越小说明学习模型对训练数据拟合程度越好。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;期望风险(expected risk):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当测试集中存在无穷多数据时产生的损失。&lt;/li&gt;
&lt;li&gt;期望风险越小，学习所得模型越好。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经验风险最小化&lt;/p&gt;
&lt;p&gt;$$\min_{f \in \Phi} \frac{1}{n} \sum_{i&amp;#x3D;1}^{n} Loss(y_i, f(x_i))$$&lt;/p&gt;
&lt;p&gt;期望风险最小化&lt;/p&gt;
&lt;p&gt;$$\min_{f \in \Phi} \int_{x \times y} Loss(y, f(x)) P(x, y) dx dy$$&lt;/p&gt;
&lt;p&gt;模型泛化能力与经验风险、期望风险的关系&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;经验风险小（训练集上表现好）&lt;/th&gt;
&lt;th&gt;期望风险小（测试集上表现好）&lt;/th&gt;
&lt;th&gt;泛化能力强&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;经验风险小（训练集上表现好）&lt;/td&gt;
&lt;td&gt;期望风险大（测试集上表现不好）&lt;/td&gt;
&lt;td&gt;过学习（模型过于复杂）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;经验风险大（训练集上表现不好）&lt;/td&gt;
&lt;td&gt;期望风险大（测试集上表现不好）&lt;/td&gt;
&lt;td&gt;欠学习&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;经验风险大（训练集上表现不好）&lt;/td&gt;
&lt;td&gt;期望风险小（测试集上表现好）&lt;/td&gt;
&lt;td&gt;“神仙算法”或“黄粱美梦”&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;结构风险最小化 (structural risk minimization)&lt;/p&gt;
&lt;p&gt;为了防止过拟合，在经验风险上加上表示模型复杂度的正则化项 (regularizer) 或惩罚项 (penalty term):&lt;/p&gt;
&lt;p&gt;$$\min_{f \in \Phi} \frac{1}{n} \sum_{i&amp;#x3D;1}^{n} Loss(y_i, f(x_i)) + \lambda J(f)$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;经验风险: $\frac{1}{n} \sum_{i&amp;#x3D;1}^{n} Loss(y_i, f(x_i))$&lt;/li&gt;
&lt;li&gt;模型复杂度: $\lambda J(f)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;监督学习方法又可以分为 生成方法 (generative approach) 和 判别方法(discriminative approach)。所学到的模型分别称为生成模型(generative model)和判别模型(discriminative model)&lt;br&gt;&lt;img data-src=&#34;/figure1.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;回归分析&#34;&gt;&lt;a href=&#34;#回归分析&#34; class=&#34;headerlink&#34; title=&#34;回归分析&#34;&gt;&lt;/a&gt;回归分析&lt;/h1&gt;&lt;h2 id=&#34;线性回归&#34;&gt;&lt;a href=&#34;#线性回归&#34; class=&#34;headerlink&#34; title=&#34;线性回归&#34;&gt;&lt;/a&gt;线性回归&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一元线性回归&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$y_i &amp;#x3D; ax_i + b \quad (1 \leq i \leq n)$$&lt;/p&gt;
&lt;p&gt;$$a &amp;#x3D; \frac{\sum_{i&amp;#x3D;1}^{n} x_i y_i - n \bar{x} \bar{y}}{\sum_{i&amp;#x3D;1}^{n} x_i^2 - n \bar{x}^2}$$&lt;/p&gt;
&lt;p&gt;$$b &amp;#x3D; \bar{y} - a \bar{x}$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;多元线性回归&lt;br&gt;$$f(x_i) &amp;#x3D; a_0 + \sum_{j&amp;#x3D;1}^{D} a_j x_{i,j} &amp;#x3D; a_0 + \mathbf{a}^T \mathbf{x}_i$$&lt;br&gt;a是要求的参数，x是输入的数据，f是预测值。&lt;br&gt;为了方便，使用矩阵来表示所有的训练数据和数据标签。&lt;br&gt;$$X &amp;#x3D; [x_1, …, x_m], \quad y &amp;#x3D; [y_1, …, y_m]$$&lt;br&gt;最小化均方误差得到：&lt;br&gt;$$a &amp;#x3D; (XX^T)^{-1}X^Ty$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;逻辑斯蒂回归&amp;#x2F;对数几率回归&lt;br&gt;线性回归一个明显的问题是对离群点导致模型建模不稳定，使结果有偏，为了缓解这个问题（特别是在二分类场景中）带来的影响，可考虑逻辑斯蒂回归&lt;br&gt;逻辑斯蒂回归就是在回归模型中引入 sigmoid函数的一种非线性回归模型&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;逻辑斯蒂回归-Logistic-Regression&#34;&gt;&lt;a href=&#34;#逻辑斯蒂回归-Logistic-Regression&#34; class=&#34;headerlink&#34; title=&#34;逻辑斯蒂回归 (Logistic Regression)&#34;&gt;&lt;/a&gt;逻辑斯蒂回归 (Logistic Regression)&lt;/h2&gt;&lt;p&gt;逻辑斯蒂回归（logistic regression）就是在回归模型中引入 sigmoid 函数的一种非线性回归模型。Logistic 回归模型可如下表示：&lt;/p&gt;
&lt;p&gt;$$ y &amp;#x3D; \frac{1}{1 + e^{-z}} &amp;#x3D; \frac{1}{1 + e^{-(w^T x + b)}} $$&lt;br&gt;其中 $y \in (0, 1)$，$z &amp;#x3D; w^T x + b$。&lt;br&gt;这里 $\frac{1}{1 + e^{-z}}$ 是 sigmoid 函数，$x \in \mathbb{R}^d$ 是输入数据，$w \in \mathbb{R}^d$ 和 $b \in \mathbb{R}$ 是回归函数的参数。&lt;/p&gt;
&lt;p&gt;逻辑斯蒂回归多用于&amp;#x3D;&amp;#x3D;二分类&amp;#x3D;&amp;#x3D;问题&lt;br&gt;Sigmoid 函数将任意实数映射到区间(0,1)，这正好符合“概率”的取值范围，所以函数的输出y可以被解释为输入数据x属于正例的概率&lt;br&gt;因此我们可以将输出 y 解释为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在给定输入特征 x 的条件下，该样本属于正类（例如类别 1）的概率。&lt;br&gt;即：&lt;br&gt;$$&lt;br&gt;y &amp;#x3D; P(y &amp;#x3D; 1 \mid x)&lt;br&gt;$$&lt;br&gt;如果 $P(y&amp;#x3D;1|x)$ 表示给定输入 $x$ 属于正类的概率，则 $1 - P(y&amp;#x3D;1|x)$ 表示属于负类的概率。&lt;br&gt;$\frac{P(y&amp;#x3D;1|x)}{1 - P(y&amp;#x3D;1|x)}$ 就是正类相对于负类的优势比。所以&amp;gt;1就归为正类，反之就是负类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;$$&lt;br&gt;\log \frac{P(y&amp;#x3D;1|x)}{P(y&amp;#x3D;0|x)} &amp;#x3D; {w^T x + b} &amp;gt; \log{1} &amp;#x3D; 0&lt;br&gt;$$&lt;br&gt;从这里可以看出，logistic回归本质上是一个线性模型。在预测时，可以计算线性函数$w^T x + b$取值是否大于0来判断输入数据x的类别归属&lt;/p&gt;
&lt;p&gt;为了找到最优参数w和b，我们使用最大似然估计，假设每个样本独立同分布，则&lt;br&gt;……&lt;br&gt;公式懒得敲了，&lt;/p&gt;
&lt;p&gt;为什么基于相关性的方法可能会导致模型的不可解释性和不稳定性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因果特征和非因果特征&lt;/li&gt;
&lt;li&gt;Making V⊥Y: 最终目标是让非因果特征 V 与输出 Y 独立，即消除虚假相关性，使得模型更加稳定和可解释&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;决策树&#34;&gt;&lt;a href=&#34;#决策树&#34; class=&#34;headerlink&#34; title=&#34;决策树&#34;&gt;&lt;/a&gt;决策树&lt;/h1&gt;&lt;p&gt;决策树是一种通过树形结构来进行分类的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信息熵（entropy）是度量样本集合纯度最常用的一种指标&lt;br&gt;假设有一个K个信息（类别），其组成了集合样本D，记第k个信息（类别）发生的概率为$p_k (1 \leq k \leq K)$。如下定义这K个信息的信息熵：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$Ent(D) &amp;#x3D; -\sum_{k&amp;#x3D;1}^{K} p_k \log_2 p_k$$&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;$Ent(D)$值越小，表示D包含的信息越确定，也称D的纯度越高。&amp;#x3D;&amp;#x3D;所有$p_k$累加起来的和为1。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信息增益:衡量使用某个属性进行划分后，数据集不确定性减少的程度&lt;br&gt;得到信息熵后可以进一步计算信息增益：&lt;br&gt;$$Gain(D, A) &amp;#x3D; Ent(D) - \sum_{i&amp;#x3D;1}^{n} \frac{|D_i|}{|D|} Ent(D_i)$$&lt;br&gt;&lt;img data-src=&#34;/f3.png&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/f4.png&#34;&gt;&lt;br&gt;ID3决策树学习算法[Quinlan, 1986]以信息增益为准则来选择划分属性&lt;br&gt;目标：通过不断划分，使得每个子集尽可能“纯净”，即子集内的样本属于同一类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;信息熵（和上面的一样的）&lt;br&gt;$$&lt;br&gt;info &amp;#x3D; -\sum_{i&amp;#x3D;1}^{n} \frac{|D_i|}{|D|} \log_2 \frac{|D_i|}{|D|}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;增益率（Gain-ratio）：&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;Gain-ratio &amp;#x3D; \frac{Gain(D, A)}{info}&lt;br&gt;$$&lt;br&gt;存在的问题：增益率准则对可取数目较少的属性有所偏好&lt;/p&gt;
&lt;p&gt;另一种计算更简的度量指标是如下的 Gini 指数（基尼指数）：&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;Gini(D) &amp;#x3D; 1 - \sum_{k&amp;#x3D;1}^{K} p_k^2&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;相对于信息熵的计算 $E(D) &amp;#x3D; -\sum_{k&amp;#x3D;1}^{K} p_k \log_2 p_k$，不用计算对数 log，计算更为简易。&lt;/p&gt;
&lt;h2 id=&#34;连续属性离散化&#34;&gt;&lt;a href=&#34;#连续属性离散化&#34; class=&#34;headerlink&#34; title=&#34;连续属性离散化&#34;&gt;&lt;/a&gt;连续属性离散化&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;确定连续属性的取值范围，确定划分点集合&lt;br&gt;考虑包含 n-1 个元素的候选划分点集合：&lt;br&gt;$$&lt;br&gt;T_a &amp;#x3D; \left{ \frac{a^i + a^{i+1}}{2} ,\middle|, 1 \leq i \leq n - 1 \right}&lt;br&gt;$$&lt;br&gt;这里的每个候选划分点是相邻两个取值的中点，即区间 $[a^i, a^{i+1})$ 的中位点 $\frac{a^i + a^{i+1}}{2}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算信息增益&lt;br&gt;$$&lt;br&gt;\text{Gain}(D, a, t) &amp;#x3D; \text{Ent}(D) - \sum_{\lambda \in {-, +}} \frac{|D_t^\lambda|}{|D|} \cdot \text{Ent}(D_t^\lambda)&lt;br&gt;$$&lt;br&gt;计算每个划分点的信息增益率，选择信息增益最大的划分点&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++info example&lt;br&gt;;;;id3 example&lt;br&gt;给定数据点及其对应的类别标签如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$a_1 &amp;#x3D; 1$ -&amp;gt; 类别为 0&lt;/li&gt;
&lt;li&gt;$a_2 &amp;#x3D; 3$ -&amp;gt; 类别为 1&lt;/li&gt;
&lt;li&gt;$a_3 &amp;#x3D; 5$ -&amp;gt; 类别为 0&lt;/li&gt;
&lt;li&gt;$a_4 &amp;#x3D; 7$ -&amp;gt; 类别为 1&lt;/li&gt;
&lt;li&gt;$a_5 &amp;#x3D; 9$ -&amp;gt; 类别为 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，我们的数据集 $D$ 是 ${1, 3, 5, 7, 9}$，对应的类别标签分别为 ${0, 1, 0, 1, 0}$。&lt;/p&gt;
&lt;p&gt;第一步：计算原始数据集的信息熵&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;Ent(D) &amp;#x3D; -\left( p_0 \log_2 p_0 + p_1 \log_2 p_1 \right)&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;其中，$p_0 &amp;#x3D; \frac{3}{5}$，$p_1 &amp;#x3D; \frac{2}{5}$，则：&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;Ent(D) &amp;#x3D; -\left( \frac{3}{5} \log_2 \frac{3}{5} + \frac{2}{5} \log_2 \frac{2}{5} \right) \approx 0.971&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;第二步：确定候选划分点集合&lt;/p&gt;
&lt;p&gt;根据公式 $T_a &amp;#x3D; \left{ \frac{a^i + a^{i+1}}{2} ,\middle|, 1 \leq i \leq n - 1 \right}$，我们得到候选划分点集合：&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;T_a &amp;#x3D; {2, 4, 6, 8}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;第三步：计算每个候选划分点的信息增益&lt;/p&gt;
&lt;p&gt;以划分点 $t &amp;#x3D; 4$ 为例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$D_t^{-} &amp;#x3D; {1, 3}$，类别为 ${0, 1}$&lt;/li&gt;
&lt;li&gt;$D_t^{+} &amp;#x3D; {5, 7, 9}$，类别为 ${0, 1, 0}$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算这两个子集的熵：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$$Ent(D_t^{-}) &amp;#x3D; -\left( \frac{1}{2} \log_2 \frac{1}{2} + \frac{1}{2} \log_2 \frac{1}{2} \right) &amp;#x3D; 1$$&lt;/li&gt;
&lt;li&gt;$$Ent(D_t^{+}) &amp;#x3D; -\left( \frac{2}{3} \log_2 \frac{2}{3} + \frac{1}{3} \log_2 \frac{1}{3} \right) \approx 0.918$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算信息增益：&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;Gain(D, a, t&amp;#x3D;4) &amp;#x3D; Ent(D) - \left( \frac{|D_t^{-}|}{|D|} \cdot Ent(D_t^{-}) + \frac{|D_t^{+}|}{|D|} \cdot Ent(D_t^{+}) \right)&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;代入数值：&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;Gain(D, a, t&amp;#x3D;4) &amp;#x3D; 0.971 - \left( \frac{2}{5} \cdot 1 + \frac{3}{5} \cdot 0.918 \right) \approx 0.029&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;重复上述过程，对所有划分点 $t &amp;#x3D; 2, 4, 6, 8$ 进行类似计算，并选择使 $Gain(D, a, t)$ 最大的那个作为最优划分点。&lt;br&gt;;;;&lt;br&gt;+++&lt;/p&gt;
&lt;h1 id=&#34;线性区别分析-LDA-FDA&#34;&gt;&lt;a href=&#34;#线性区别分析-LDA-FDA&#34; class=&#34;headerlink&#34; title=&#34;线性区别分析 (LDA&amp;#x2F;FDA)&#34;&gt;&lt;/a&gt;线性区别分析 (LDA&amp;#x2F;FDA)&lt;/h1&gt;&lt;p&gt;线性判别分析(linear discriminant analysis， LDA)是一种基于监督学习的降维方法，也称为Fisher线性判别分析(fisher’s discriminant analysis，FDA),对于一组具有标签信息的高维数据样本，LDA利用其类别信息，将其线性投影到一个低维空间上，在低维空间中同一类别样本尽可能靠近，不同类别样本尽可能彼此远离。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算数据样本集中每个类别样本的均值&lt;/li&gt;
&lt;li&gt;计算类内散度矩阵$S_w$和类间散度矩阵$S_b$&lt;/li&gt;
&lt;li&gt;根据$S_w^{-1}S_bW&amp;#x3D;\lambda W$来求解$S_w^{-1}S_b$所对应前$r$个最大特征值所对应特征向量$(w_1,w_2,…,w_r)$，构成矩阵W&lt;/li&gt;
&lt;li&gt;通过矩阵$W$将每个样本映射到低维空间，实现特征降维。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体不想看，考到就给了&lt;/p&gt;
&lt;h1 id=&#34;Ada-Boosting&#34;&gt;&lt;a href=&#34;#Ada-Boosting&#34; class=&#34;headerlink&#34; title=&#34;Ada Boosting&#34;&gt;&lt;/a&gt;Ada Boosting&lt;/h1&gt;&lt;p&gt;。。看不懂懒得看&lt;/p&gt;
&lt;h1 id=&#34;支持向量机&#34;&gt;&lt;a href=&#34;#支持向量机&#34; class=&#34;headerlink&#34; title=&#34;支持向量机&#34;&gt;&lt;/a&gt;支持向量机&lt;/h1&gt;&lt;h1 id=&#34;生成学习模型&#34;&gt;&lt;a href=&#34;#生成学习模型&#34; class=&#34;headerlink&#34; title=&#34;生成学习模型&#34;&gt;&lt;/a&gt;生成学习模型&lt;/h1&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/11/AI/week4-5/</guid>
            <title>Week4-5</title>
            <link>http://example.com/2025/06/11/AI/week4-5/</link>
            <category>人工智能</category>
            <pubDate>Wed, 11 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;#Ch3 搜索算法&lt;/p&gt;
&lt;h2 id=&#34;无信息搜索&#34;&gt;&lt;a href=&#34;#无信息搜索&#34; class=&#34;headerlink&#34; title=&#34;无信息搜索&#34;&gt;&lt;/a&gt;无信息搜索&lt;/h2&gt;&lt;p&gt;BFS DFS 略&lt;/p&gt;
&lt;h2 id=&#34;启发式搜索&#34;&gt;&lt;a href=&#34;#启发式搜索&#34; class=&#34;headerlink&#34; title=&#34;启发式搜索&#34;&gt;&lt;/a&gt;启发式搜索&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;贪婪优先搜索&lt;ul&gt;
&lt;li&gt;每次取最短的；缺点：不一定是最优的&lt;/li&gt;
&lt;li&gt;时间和空间复杂度均为 $O(b_m)$，b是搜索树分支因子，m是最大深度&lt;br&gt;&lt;img data-src=&#34;/figure1.png&#34;&gt;&lt;br&gt;:::info&lt;br&gt;每次取当前节点的下一个节点到终点中直线距离最短的&lt;br&gt;:::&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A*算法&lt;ul&gt;
&lt;li&gt;评价函数：f(n) &amp;#x3D; g(n) + h(n)&lt;/li&gt;
&lt;li&gt;代价函数 g(n) 表示从起始结点到结点n的开销代价值&lt;/li&gt;
&lt;li&gt;启发函数 h(n) 表示从结点n到目标结点路径中所估算的最小开销代价值。&lt;/li&gt;
&lt;li&gt;评价函数 f(n) 可视为经过结点n、具有最小开销代价值的路径。&lt;ul&gt;
&lt;li&gt;在最短路径问题中，g(?)为当前选择的路径的实际距离，即从上一个节点到下一个节点的实际距离，?(?)为下一个节点到目标城市的直线距离。每一次搜索，下一个节点选择与此刻城市连接的所有节点中，g(?)+?(?)最小的城市节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::info&lt;br&gt;取（当前节点到下一节点的距离+下一节点到目标城市的距离）最短的&lt;br&gt;:::&lt;br&gt;A*算法的完备性和最优性取决于搜索问题和启发函数的性质&lt;br&gt;一个良好的启发函数需要满足:可容性（admissible）;一致性（consistency）&lt;br&gt;如果启发函数是可容的，那么树搜索的A*算法满足最优性(最优性:搜索算法是否能保证找到的第一个解是最优解)&lt;br&gt;满足一致性条件的启发函数一定满足可容性条件，反之不一定&lt;/p&gt;
&lt;h2 id=&#34;对抗搜索&#34;&gt;&lt;a href=&#34;#对抗搜索&#34; class=&#34;headerlink&#34; title=&#34;对抗搜索&#34;&gt;&lt;/a&gt;对抗搜索&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最小最大搜索（minimax）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最小最大搜索是一个在你和对手轮流行动的情况下，为你自己寻找最优策略的算法。&lt;/li&gt;
&lt;li&gt;算法：略&lt;/li&gt;
&lt;li&gt;时间复杂度：$O(b^m)$&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(bm)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;\alpha-\beta剪枝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minimax 会穷举整个博弈树，但我们可以用剪枝技巧跳过一些无用分支，让它跑得更快&lt;/li&gt;
&lt;li&gt;max层的下界取下一层（上界）里面最大的；min层的上界取下一层（下界）里面最小的&lt;br&gt;懒得写直接看例子：&lt;br&gt;&lt;img data-src=&#34;/figure2.png&#34;&gt;&lt;br&gt; Alpha-Beta 剪枝算法什么时候扩展的结点数量最少？&lt;/li&gt;
&lt;li&gt;每一层最左端结点的所有孩子结点均被访问，其他节点仅有最左端孩子结点被访问、其他孩子结点被剪枝。&lt;br&gt; 如果一个节点导致了其兄弟节点被剪枝，可知其孩子节点必然被扩展。&lt;/li&gt;
&lt;li&gt;最优效率下时间复杂度：$O(b^{m&amp;#x2F;2})$  (或者m+1);最差的就是完全没剪枝和minimax一样&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;蒙特卡洛树搜索&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择(UCB)、扩展、模拟(随机)、反向传播&lt;/li&gt;
&lt;li&gt;悔值函数&lt;br&gt;:::info&lt;br&gt;没完全懂，后面再回来研究&lt;br&gt;:::&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/05/20/AI/week1/</guid>
            <title>Week1</title>
            <link>http://example.com/2025/05/20/AI/week1/</link>
            <category>人工智能</category>
            <pubDate>Tue, 20 May 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;2025-2026春夏人工智能课程笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Ch1-绪论&#34;&gt;&lt;a href=&#34;#Ch1-绪论&#34; class=&#34;headerlink&#34; title=&#34;Ch1 绪论&#34;&gt;&lt;/a&gt;Ch1 绪论&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;人工智能求解：&lt;ul&gt;
&lt;li&gt;以符号主义为核心的逻辑推理：将概念（如命题等）符号化，从若干判断（前提）出发得到新判断（结论）&lt;/li&gt;
&lt;li&gt;以问题求解为核心的探寻搜索:探寻搜索依据已有信息来寻找满足约束条件的待求解问题的答案&lt;/li&gt;
&lt;li&gt;以数据驱动为核心的机器学习:从数据中发现数据所承载语义（如概念）的内在模式&lt;/li&gt;
&lt;li&gt;以行为主义为核心的强化学习:根据环境所提供的奖罚反馈来学习所处状态可施加的最佳行动，在“探索（未知空间）-利用（已有经验）（exploration vs. exploitation）”之间寻找平衡，完成某个序列化任务，具备自我学习能力&lt;/li&gt;
&lt;li&gt;以博弈对抗为核心的群体智能:从“数据拟合”优化解的求取向“均衡解”的求取迈进&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/05/20/AI/week2-3/</guid>
            <title>Week2-3</title>
            <link>http://example.com/2025/05/20/AI/week2-3/</link>
            <category>人工智能</category>
            <pubDate>Tue, 20 May 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Ch2-知识表达与推理&#34;&gt;&lt;a href=&#34;#Ch2-知识表达与推理&#34; class=&#34;headerlink&#34; title=&#34;Ch2 知识表达与推理&#34;&gt;&lt;/a&gt;Ch2 知识表达与推理&lt;/h1&gt;&lt;h2 id=&#34;命题逻辑&#34;&gt;&lt;a href=&#34;#命题逻辑&#34; class=&#34;headerlink&#34; title=&#34;命题逻辑&#34;&gt;&lt;/a&gt;命题逻辑&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;/img1.png&#34;&gt;&lt;br&gt;真值表：&lt;br&gt;&lt;img data-src=&#34;/img2.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“条件”命题联结词中前提为假时命题结论永远为真，bi-conditional只有两个都是true或者都是false才是true&lt;br&gt;逻辑等价：给定命题p和命题q，如果&amp;#x3D;&amp;#x3D;p和q在所有情况下都具有同样真假结果&amp;#x3D;&amp;#x3D;，那么p和q在逻辑上等价，一般用 $\equiv$ 来表示，即p $\equiv$ q。&lt;br&gt;判断逻辑等价：画真值表&lt;br&gt;逻辑等价式：&lt;br&gt;&lt;img data-src=&#34;/img3.jpg&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/img4.png&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;normal form&lt;ul&gt;
&lt;li&gt;有限个简单合取式构成的析取式称为析取(or)范式&lt;/li&gt;
&lt;li&gt;由有限个简单析取式构成的合取式称为合取(and)范式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;谓词逻辑&#34;&gt;&lt;a href=&#34;#谓词逻辑&#34; class=&#34;headerlink&#34; title=&#34;谓词逻辑&#34;&gt;&lt;/a&gt;谓词逻辑&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;全称量词与存在量词&lt;/li&gt;
&lt;li&gt;约束变元、自由变元&lt;br&gt;:::info&lt;br&gt;在约束变元相同的情况下，量词的运算满足分配律：全称量词对析取没有分配律、存在量词对合取没有分配律&lt;br&gt;:::&lt;br&gt;$$\begin{aligned}&lt;br&gt;(\forall x)(A(x) \lor B(x)) \equiv (\forall x)A(x) \lor (\forall x)B(x) 不成立&lt;br&gt;\end{aligned}$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\forall x)(A(x) \land B(x)) \equiv (\forall x)A(x) \land (\forall x)B(x) 成立&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\exists x)(A(x) \lor B(x)) \equiv (\exists x)A(x) \lor (\exists x)B(x) 成立&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\exists x)(A(x) \land B(x)) \equiv (\exists x)A(x) \land (\exists x)B(x) 不成立&lt;br&gt;\end{aligned}$$&lt;br&gt;:::info&lt;br&gt;当公式中存在多个量词时，若多个量词都是全称量词或者都是存在量词，则量词的位置可以互换；若多个量词中既有全称量词又有存在量词，则量词的位置不可以随意互换&lt;br&gt;:::&lt;br&gt;$$\begin{aligned}&lt;br&gt;(\forall x)(\forall y)A(x, y) \equiv (\forall y)(\forall x)A(x, y)&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\exists x)(\exists y)A(x, y) \equiv (\exists y)(\exists x)A(x, y)&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\forall x)(\forall y)A(x, y) \equiv (\exists y)(\forall x)A(x, y)&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\forall x)(\forall y)A(x, y) \equiv (\exists x)(\forall y)A(x, y)&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\exists y)(\forall x)A(x, y) \equiv (\forall x)(\exists y)A(x, y)&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\exists x)(\forall y)A(x, y) \equiv (\forall y)(\exists x)A(x, y)&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\forall x)(\exists y)A(x, y) \equiv (\exists y)(\exists x)A(x, y)&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\forall y)(\exists x)A(x, y) \equiv (\exists x)(\exists y)A(x, y)&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用谓词逻辑进行推理&lt;ul&gt;
&lt;li&gt;全称量词消去： $(\forall x) A(x) \equiv A(y)$&lt;/li&gt;
&lt;li&gt;全称量词引入： $A(y) \equiv (\forall x) A(x)$&lt;/li&gt;
&lt;li&gt;存在量词消去： $(\exists x) A(x) \equiv A(c)$&lt;/li&gt;
&lt;li&gt;存在量词引入： $A(c) \equiv (\exists x) A(x)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;知识图谱推理&#34;&gt;&lt;a href=&#34;#知识图谱推理&#34; class=&#34;headerlink&#34; title=&#34;知识图谱推理&#34;&gt;&lt;/a&gt;知识图谱推理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;知识图谱可视为包含多种关系的图。在图中，每个节点是一个实体（如人名、地名、事件和活动等），任意两个节点之间的边表示这两个节点之间存在的关系。&lt;/li&gt;
&lt;li&gt;可将知识图谱中任意两个相连节点及其连接边表示成一个三元组（triplet）,即 (left_node, relation, right_node)&lt;br&gt;两类代表性方法：&lt;/li&gt;
&lt;li&gt;归纳逻辑程序设计 (inductive logic programming，ILP)算法&lt;/li&gt;
&lt;li&gt;路径排序算法（path ranking algorithm, PRA）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ILP: 一阶归纳学习FOIL（First Order Inductive Learner）&lt;br&gt;推理手段: 正例集合 + 反例集合 + 背景知识样例 ⟹ 目标谓词作为结论的推理规则&lt;br&gt;&lt;img data-src=&#34;/img5.png&#34;&gt;&lt;br&gt;懒得写了，看ppt吧&lt;br&gt;&lt;img data-src=&#34;/img6.png&#34;&gt;&lt;br&gt;推理规则覆盖所有正例且不覆盖任何反例的时候算法结束&lt;/p&gt;
&lt;p&gt;PRA: 路径排序算法&lt;br&gt;&lt;img data-src=&#34;/img7.png&#34;&gt;&lt;br&gt;(4)的意思是看两个实体能不能通过(3)的关系从第一个走到第二个。&lt;br&gt;后面的1表示正例，-1表示负例。&lt;/p&gt;
&lt;h2 id=&#34;概率图推理&#34;&gt;&lt;a href=&#34;#概率图推理&#34; class=&#34;headerlink&#34; title=&#34;概率图推理&#34;&gt;&lt;/a&gt;概率图推理&lt;/h2&gt;&lt;p&gt;贝叶斯网络&lt;br&gt;&lt;img data-src=&#34;/img14.png&#34;&gt;&lt;br&gt;要会算&lt;/p&gt;
&lt;p&gt;马尔科夫逻辑网络&lt;/p&gt;
&lt;h2 id=&#34;因果推理&#34;&gt;&lt;a href=&#34;#因果推理&#34; class=&#34;headerlink&#34; title=&#34;因果推理&#34;&gt;&lt;/a&gt;因果推理&lt;/h2&gt;&lt;p&gt;因果定义：变量X是变量Y的原因，当且仅当保持其它所有变量不变的情况下，改变X的值能导致Y的值发生变化。&lt;br&gt;因果效应：因变量X改变一个单位时，果变量Y的变化程度&lt;/p&gt;
&lt;p&gt;因果图是有向无环图&lt;/p&gt;
&lt;p&gt;结构因果模型：结构因果模型由两组变量集合U和V以及一组函数f组成。其中，f是根据模型中其他变量取值而给V中每一个变量赋值的函数&lt;br&gt;结构因果模型中的原因：如果变量X出现在给变量X赋值的函数中，如$Y &amp;#x3D; f(X) + \epsilon$，则X是Y的直接原因&lt;br&gt;因果图中的联合概率分布：直接看图&lt;br&gt;&lt;img data-src=&#34;/img8.png&#34;&gt;&lt;br&gt;因果图的基本结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链结构&lt;br&gt;  - &lt;img data-src=&#34;/img9.png&#34;&gt;&lt;br&gt;  - 对于变量X和Y，若X和Y之间只有一条单向的路径，变量Z是截断(intercept)该路径的集合中的任一变量，则在给定Z时，X和Y条件独立。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$&lt;br&gt;P(X, Y | Z) &amp;#x3D; P(X | Z)P(Y | Z)&lt;br&gt;$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分连结构&lt;br&gt;  - &lt;img data-src=&#34;/img10.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$&lt;br&gt;P(X, Y | Z) &amp;#x3D; \frac {P(X, Y, Z)}{P(Z)} &amp;#x3D; \frac {P(X | Z)P(Y | Z)P(Z)}{P(Z)} &amp;#x3D; P(X | Z)P(Y | Z)&lt;br&gt;$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;汇联结构&lt;br&gt;  - &lt;img data-src=&#34;/img11.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$&lt;br&gt;P(X, Y | Z) &amp;#x3D; \frac{P(X, Y, Z)} {P(Z)} &amp;#x3D; \frac {P(X, Y, Z)}{P(Z)} &amp;#x3D; \frac {P(X)P(Y)P(Z&amp;#x2F;X, Y)}{P(Z)} \neq P(X | Z)P(Y | Z)&lt;br&gt;$$&lt;/p&gt;
&lt;h3 id=&#34;D-分离-directional-separation-d-separation-，可用于判断任意两个节点的相关性和独立性&#34;&gt;&lt;a href=&#34;#D-分离-directional-separation-d-separation-，可用于判断任意两个节点的相关性和独立性&#34; class=&#34;headerlink&#34; title=&#34;D-分离(directional separation, d-separation)，可用于判断任意两个节点的相关性和独立性&#34;&gt;&lt;/a&gt;D-分离(directional separation, d-separation)，可用于判断任意两个节点的相关性和独立性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;限定集：已知或观察到的变量集合（给定的变量集合）&lt;/li&gt;
&lt;li&gt;路径p被限定集Z阻塞(block)当且仅当：&lt;ul&gt;
&lt;li&gt;(1) 路径p含有链结构A → B → C或分连结构A ← B → C且中间节点B在Z中，或&lt;/li&gt;
&lt;li&gt;(2) 路径p含有汇连结构A → B ← C且汇连节点B及其后代都不在Z中。&lt;/li&gt;
&lt;li&gt;若Z阻塞了节点X和节点Y之间的每一条路径，则称给定Z时，X和Y是D-分离，即给定Z时，X和Y条件独立&lt;/li&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;链式、分连中间节点在，汇联中间节点和后代不在则D-分离&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因果定义：变量X是变量Y的原因，当且仅当保持其它所有变量不变的情况下，改变X的值能导致Y的值发生变化。&lt;br&gt;因果效应：因变量X改变一个单位时，果变量Y的变化程度因果推理的两个关键因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改变因变量T&lt;/li&gt;
&lt;li&gt;保证其它变量不变&lt;br&gt;干预：干预(intervention)指的是固定(fix)系统中的变量，然后改变系统，观察其他变量的变化。&lt;br&gt;为了与X自然取值x时进行区分，在对X进行干预时，引入“do算子”(do-calculus)，记作do(X &amp;#x3D; x)。&lt;br&gt;因此，P(Y &amp;#x3D; y|X &amp;#x3D; x)表示的是当发现X &amp;#x3D; x时，Y&amp;#x3D; y的概率；而P(Y &amp;#x3D; y|do(X &amp;#x3D;x))表示的是对X进行干预，固定其值为x时，Y &amp;#x3D; y的概率。&lt;br&gt;用统计学的术语来说，P(Y &amp;#x3D; y|X &amp;#x3D; x)反映的是在取值为x的个体X上，Y的总体分布；而P(Y &amp;#x3D; y|do(X &amp;#x3D;x))反映的是如果将每一个X取值都固定为x时，Y的总体分布。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因果效应差&amp;#x2F;平均因果效应 (ACE)  懒得写了看图吧&lt;br&gt;&lt;img data-src=&#34;/img12.png&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/img13.png&#34;&gt;&lt;br&gt;计算因果效应的关键在于计算操纵概率(manipulatedprobability) $P_m$&lt;br&gt;调整公式：&lt;br&gt;$$&lt;br&gt;P(Y &amp;#x3D; y \mid do(X &amp;#x3D; x)) &amp;#x3D; \sum_z P(Y &amp;#x3D; y \mid X &amp;#x3D; x, Z &amp;#x3D; z) \cdot P(Z &amp;#x3D; z)&lt;br&gt;$$&lt;br&gt;对于Z的每一个取值z，计算X和Y的条件概率并取均值&lt;br&gt;+++info example&lt;br&gt;;;;id3 例题&lt;br&gt;假设我们研究以下变量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X：是否服药  &lt;ul&gt;
&lt;li&gt;$X &amp;#x3D; 1$：服药  &lt;/li&gt;
&lt;li&gt;$X &amp;#x3D; 0$：不服药&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Y：是否康复  &lt;ul&gt;
&lt;li&gt;$Y &amp;#x3D; 1$：康复  &lt;/li&gt;
&lt;li&gt;$Y &amp;#x3D; 0$：未康复&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Z：性别  &lt;ul&gt;
&lt;li&gt;$Z &amp;#x3D; 0$：男  &lt;/li&gt;
&lt;li&gt;$Z &amp;#x3D; 1$：女&lt;br&gt;我们知道性别会影响：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;是否选择服药（比如男性更倾向于尝试新药）&lt;/li&gt;
&lt;li&gt;康复率（比如女性可能有更强的免疫力）&lt;br&gt;因此，性别 Z 是一个混杂变量，需要在分析中进行控制。&lt;br&gt;已知：&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Z（性别）&lt;/th&gt;
&lt;th&gt;P(Z)&lt;/th&gt;
&lt;th&gt;P(Y&amp;#x3D;1 | X&amp;#x3D;1, Z)&lt;/th&gt;
&lt;th&gt;P(Y&amp;#x3D;1 | X&amp;#x3D;0, Z)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;男（0）&lt;/td&gt;
&lt;td&gt;0.6&lt;/td&gt;
&lt;td&gt;0.7&lt;/td&gt;
&lt;td&gt;0.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;女（1）&lt;/td&gt;
&lt;td&gt;0.4&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;0.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;我们想知道：&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;如果强制所有人都服药（即 $do(X&amp;#x3D;1)$），整体康复率是多少？&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;也就是要计算：&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$$&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P(Y&amp;#x3D;1 \mid do(X&amp;#x3D;1))&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$$&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;;;;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;;;;id3 答案&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;根据调整公式：&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$&lt;br&gt;P(Y&amp;#x3D;1 \mid do(X&amp;#x3D;1)) &amp;#x3D; \sum_z P(Y&amp;#x3D;1 \mid X&amp;#x3D;1, Z&amp;#x3D;z) \cdot P(Z&amp;#x3D;z)&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;代入数据计算&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;P(Y&amp;#x3D;1 \mid do(X&amp;#x3D;1)) &amp;#x3D; P(Y&amp;#x3D;1 \mid X&amp;#x3D;1, Z&amp;#x3D;0) \cdot P(Z&amp;#x3D;0) + P(Y&amp;#x3D;1 \mid X&amp;#x3D;1, Z&amp;#x3D;1) \cdot P(Z&amp;#x3D;1)&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;&amp;#x3D; 0.7 \times 0.6 + 0.5 \times 0.4 &amp;#x3D; 0.42 + 0.2 &amp;#x3D; 0.62&lt;br&gt;$$&lt;br&gt;+++&lt;/p&gt;
&lt;p&gt;(因果效应)给定因果图G，PA表示X的父节点集合，则X对Y的因果效应为&lt;br&gt;$$&lt;br&gt;P(Y&amp;#x3D;y \mid do(X&amp;#x3D;x)) &amp;#x3D; \sum_z P(Y&amp;#x3D;y \mid X&amp;#x3D;x, PA&amp;#x3D;z) \cdot P(PA&amp;#x3D;z)&lt;br&gt;$$&lt;br&gt;后门调整：&lt;br&gt;不写了&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/05/14/computer-science/computer-organization/ch2/</guid>
            <title>Ch2</title>
            <link>http://example.com/2025/05/14/computer-science/computer-organization/ch2/</link>
            <category>数据的表示与运算</category>
            <pubDate>Wed, 14 May 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Ch2-数据的表示和运算&#34;&gt;&lt;a href=&#34;#Ch2-数据的表示和运算&#34; class=&#34;headerlink&#34; title=&#34;Ch2 数据的表示和运算&#34;&gt;&lt;/a&gt;Ch2 数据的表示和运算&lt;/h1&gt;&lt;h2 id=&#34;2-1-进位计数制及其相互转换&#34;&gt;&lt;a href=&#34;#2-1-进位计数制及其相互转换&#34; class=&#34;headerlink&#34; title=&#34;2.1 进位计数制及其相互转换&#34;&gt;&lt;/a&gt;2.1 进位计数制及其相互转换&lt;/h2&gt;&lt;h3 id=&#34;2-1-1&#34;&gt;&lt;a href=&#34;#2-1-1&#34; class=&#34;headerlink&#34; title=&#34;2.1.1&#34;&gt;&lt;/a&gt;2.1.1&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;十进制二进制八进制十六进制转换&lt;ul&gt;
&lt;li&gt;略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-1-2-定点数的编码表示&#34;&gt;&lt;a href=&#34;#2-1-2-定点数的编码表示&#34; class=&#34;headerlink&#34; title=&#34;2.1.2 定点数的编码表示&#34;&gt;&lt;/a&gt;2.1.2 定点数的编码表示&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定点百世一般表示定点小数和定点整数，小数是符号位.xxx，整数是符号位xxxx.0&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;感觉不是什么重要的东西，浮点数表示比较重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;原码，反码，补码&lt;ul&gt;
&lt;li&gt;正数的原码反码补码相同&lt;/li&gt;
&lt;li&gt;原码表示的范围为 $-2^n+1 ~ 2^n-1$&lt;/li&gt;
&lt;li&gt;补码表示的范围为 $-2^n ~ 2^n-1$&lt;/li&gt;
&lt;li&gt;负数的原码是1+绝对值，反码是1+绝对值取反，补码是反码+1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移码：用来表示浮点数的阶码，只能表示整数&lt;ul&gt;
&lt;li&gt;一般用移码表示浮点数的阶码，用补码表示定点整数&lt;br&gt;$$ [x]_移 &amp;#x3D; 2^n + x $$&lt;br&gt;移码就是在真值x前面加一个offset，比如取offset为2^7，就在补码的第8位加上1&lt;/li&gt;
&lt;li&gt;比如正数10101，移码是10010101，负数-10101的补码是11101011，所以移码是01101011&lt;/li&gt;
&lt;li&gt;移码的作用是&amp;#x3D;&amp;#x3D;保持数据原有的大小顺序&amp;#x3D;&amp;#x3D;，移码大真值大，移码小真值小，所以可以直观地进行比较&lt;br&gt;:::warning&lt;br&gt;相同位数的补码和移码表示具有相同的数据表示范围，区别只是表示方法不同&lt;br&gt;补码与移码只差一个符号位。同一个数的补码和移码表示，其数值部分相同，而符号位相反。&lt;br&gt;:::&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-1-3-整数表示&#34;&gt;&lt;a href=&#34;#2-1-3-整数表示&#34; class=&#34;headerlink&#34; title=&#34;2.1.3 整数表示&#34;&gt;&lt;/a&gt;2.1.3 整数表示&lt;/h3&gt;&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&#34;2-1-4&#34;&gt;&lt;a href=&#34;#2-1-4&#34; class=&#34;headerlink&#34; title=&#34;2.1.4&#34;&gt;&lt;/a&gt;2.1.4&lt;/h3&gt;&lt;p&gt;c中的强制转换&lt;br&gt;short转成unsigned short直接把二进制看成unsigned short，比如-1变成65535&lt;br&gt;int变成short直接截断&lt;br&gt;小字长转大字长不会改变值，如果是unsigned就会在前面补0，如果是有符号数就在前面补符号位&lt;br&gt;short转unsigned int，先对short进行符号扩展到int，再把它当做unsigned int，如果是unsigned short转int，就进行零扩展再看成int……&lt;/p&gt;
&lt;p&gt;一些题目&lt;br&gt;+++info example&lt;br&gt;;;;id3 t1&lt;br&gt;若$[x]_补 &amp;#x3D; 1,x_1x_2x_3x_4x_5x_6$,其中$x_i$取0或1，若要x&amp;gt;-32，应当满足：&lt;br&gt;C. $x_1$为1，$x_2…x_6$中至少有一位为1&lt;br&gt;1100000是-32，要比-32大所以绝对值要小，所以数值部分要大，所以$x_1$必须是1,后面随便有个1就行&lt;br&gt;;;;&lt;br&gt;;;;id3 t2&lt;br&gt;设x为正数，$[x]_补 &amp;#x3D; 1,x_1x_2x_3x_4x_5$,若要x&amp;lt;-16，应当满足：&lt;br&gt;C. $x_1$必须为0，其它任意&lt;br&gt;110000是-16，要小于-16所以数值部分绝对值要小，所以只要$x_1$为0就比-16小&lt;br&gt;;;;&lt;br&gt;;;;id3 t3&lt;br&gt;一个8位的二进制整数由2个“0”和6个“1”组成，采用补码或者移码表示，则&lt;br&gt;若采用移码表示，偏置值为127，则此整数最小为-64（偏置为127需要在补码加上1111111，&amp;#x3D;&amp;#x3D;要让数值最小，应该把1放低位&amp;#x3D;&amp;#x3D;，所以移码是00111111，补码是10111111是-64）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;：前面说过，移码大真值大，移码小真值小，所以要让数值最小把1放低位就行了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;若采用补码表示，则此整数最小为-97（10011111&amp;#x3D;-97）&lt;br&gt;;;;&lt;br&gt;;;;id3 比较大小的方法&lt;br&gt;对于无符号数，数值大的数就大&lt;br&gt;对于有符号数的原码和反码比较大小：先看正负然后看数值，反码数值转成原码再比&lt;br&gt;对于补码比较大小，正数正常比较，负数数值部分越小，绝对值越大（前面1更多的数的绝对值越小，所以11111111是-1）&lt;br&gt;;;;&lt;br&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;2-2-运算方法和运算电路&#34;&gt;&lt;a href=&#34;#2-2-运算方法和运算电路&#34; class=&#34;headerlink&#34; title=&#34;2.2 运算方法和运算电路&#34;&gt;&lt;/a&gt;2.2 运算方法和运算电路&lt;/h2&gt;&lt;h3 id=&#34;2-2-1-基本运算部件&#34;&gt;&lt;a href=&#34;#2-2-1-基本运算部件&#34; class=&#34;headerlink&#34; title=&#34;2.2.1 基本运算部件&#34;&gt;&lt;/a&gt;2.2.1 基本运算部件&lt;/h3&gt;&lt;h4 id=&#34;一位全加器&#34;&gt;&lt;a href=&#34;#一位全加器&#34; class=&#34;headerlink&#34; title=&#34;一位全加器&#34;&gt;&lt;/a&gt;一位全加器&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;用真值表实现的：进位C，和S&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;A&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;B&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Cin&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Cout&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;S&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;可以用卡诺图或者直接理解(王道不写还好我本来就会，差点忘了。。。)&lt;br&gt;&lt;img data-src=&#34;/img2.jpg&#34;&gt;&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;S &amp;amp;&amp;#x3D; \overline{A} , \overline{B} , C_i + \overline{A} , B , \overline{C_i} + A , \overline{B} , \overline{C_i} + A , B , C_i \&lt;br&gt;&amp;amp;&amp;#x3D; A \oplus B \oplus C_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;Co &amp;amp;&amp;#x3D; AB + A \overline{B} C_i + \overline{A} B C_i \&lt;br&gt;&amp;amp;&amp;#x3D; AB + (A \oplus B) \cdot C_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;串行进位加法器&#34;&gt;&lt;a href=&#34;#串行进位加法器&#34; class=&#34;headerlink&#34; title=&#34;串行进位加法器&#34;&gt;&lt;/a&gt;串行进位加法器&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;把n个一位全加器连起来&lt;br&gt;&lt;img data-src=&#34;/img3.png&#34;&gt;&lt;br&gt;Carry Propagation &amp;amp; Delay&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;并行进位加法器&#34;&gt;&lt;a href=&#34;#并行进位加法器&#34; class=&#34;headerlink&#34; title=&#34;并行进位加法器&#34;&gt;&lt;/a&gt;并行进位加法器&lt;/h4&gt;&lt;p&gt;对Cin进行look ahead&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;前面提到：&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;Co &amp;amp;&amp;#x3D; AB + A \overline{B} C_i + \overline{A} B C_i \&lt;br&gt;   &amp;amp;&amp;#x3D; AB + (A \oplus B) \cdot C_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;下一位的Cin等于上一位的Cout，所以可以进行look ahead，这里让&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;G_i &amp;amp;&amp;#x3D; A_iB_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;P_i &amp;amp;&amp;#x3D; A_i \oplus B_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;所以&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;C_{i+1} &amp;amp;&amp;#x3D; G_i + P_iC_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;S_i &amp;amp;&amp;#x3D; P_i \oplus C_i&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;就能得到超前进位的效果&lt;/p&gt;
&lt;h4 id=&#34;带标志加法器&#34;&gt;&lt;a href=&#34;#带标志加法器&#34; class=&#34;headerlink&#34; title=&#34;带标志加法器&#34;&gt;&lt;/a&gt;带标志加法器&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;/img5.jpg&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;溢出标志 $OF &amp;#x3D; C_n  \oplus C_{n-1}$，只能判断有符号数是否溢出&lt;br&gt;-两个正数加起来变成负数或者两个负数加起来变成正数，就会溢出&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;A&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;B&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;$C_{n-1}$&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;F&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;$C_n$&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;OF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;第二行A&amp;#x3D;0, B&amp;#x3D;0, F&amp;#x3D;1，正+正&amp;#x3D;负&lt;br&gt;  第七行A&amp;#x3D;0, B&amp;#x3D;1, F&amp;#x3D;0，负+负&amp;#x3D;正&lt;br&gt;  所以OF&amp;#x3D;1，表示有溢出&lt;br&gt;  观察发现$OF &amp;#x3D; C_{n-1}  \oplus C_n$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;符号标志 $SF &amp;#x3D; F_{n-1}$，输出的最高位决定有符号数的正负&lt;/li&gt;
&lt;li&gt;进位&amp;#x2F;借位标志：用于判断无符号数的加减运算是否溢出&lt;ul&gt;
&lt;li&gt;$CF &amp;#x3D; Cin \oplus Cout$&lt;/li&gt;
&lt;li&gt;此处的Cin和Cout表示最开始的输入和最后的输出，还没理解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;零标志 当且仅当所有F&amp;#x3D;0时为1，否则为0（把所有F作或非）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ALU&#34;&gt;&lt;a href=&#34;#ALU&#34; class=&#34;headerlink&#34; title=&#34;ALU&#34;&gt;&lt;/a&gt;ALU&lt;/h4&gt;&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&#34;2-2-2-定点数的移位运算&#34;&gt;&lt;a href=&#34;#2-2-2-定点数的移位运算&#34; class=&#34;headerlink&#34; title=&#34;2.2.2 定点数的移位运算&#34;&gt;&lt;/a&gt;2.2.2 定点数的移位运算&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;左移一位*2，右移一位&amp;#x2F;2&lt;/li&gt;
&lt;li&gt;逻辑移位：移完直接补0&lt;ul&gt;
&lt;li&gt;无符号数若高位的1移出，则发生溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;算数移位：有符号数右移时，补符号位，左移如果高位和符号位不同，则发生溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定点数的加减运算&#34;&gt;&lt;a href=&#34;#定点数的加减运算&#34; class=&#34;headerlink&#34; title=&#34;定点数的加减运算&#34;&gt;&lt;/a&gt;定点数的加减运算&lt;/h3&gt;&lt;p&gt;补码相加减，略&lt;br&gt;主要是溢出判断：符号相同的数相加或者符号相异的数相减会发生溢出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一位符号位（参考前面OF）&lt;/li&gt;
&lt;li&gt;双符号位（模4补码）&lt;ul&gt;
&lt;li&gt;符号位左边那一位表示正确的符号，0为正，1为负；右边那一位如果和左边的相同，如 “00”表示正且无溢出，”11”表示负且无溢出。如果右边那一位与左边那一位不一样，则表示有溢出&lt;/li&gt;
&lt;li&gt;溢出逻辑判断：若V为0则无溢出，V为1则溢出&lt;br&gt;$$&lt;br&gt;V &amp;#x3D; S_{s1} \oplus S_{s2}&lt;br&gt;$$&lt;br&gt;例子看这篇写的挺清楚：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bl9ib3lfYm95X3N1bi9hcnRpY2xlL2RldGFpbHMvODc5MTcwMjA=&#34;&gt;https://blog.csdn.net/sun_boy_boy_sun/article/details/87917020&lt;/span&gt;&lt;br&gt;总之两位不同则有溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定点数的乘除运算&#34;&gt;&lt;a href=&#34;#定点数的乘除运算&#34; class=&#34;headerlink&#34; title=&#34;定点数的乘除运算&#34;&gt;&lt;/a&gt;定点数的乘除运算&lt;/h3&gt;&lt;p&gt;略，列竖式即可&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/05/13/computer-science/computer-network/ch1/</guid>
            <title>Ch1</title>
            <link>http://example.com/2025/05/13/computer-science/computer-network/ch1/</link>
            <category>计算机网络</category>
            <pubDate>Tue, 13 May 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/05/13/computer-science/computer-organization/ch1/</guid>
            <title>Ch1</title>
            <link>http://example.com/2025/05/13/computer-science/computer-organization/ch1/</link>
            <category>计算机组成</category>
            <pubDate>Tue, 13 May 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;王道计组考研复习笔记&lt;br&gt;怕学完忘了写个笔记保留一下顺便加深印象x&lt;br&gt;王道书写得好烂、、&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Ch1-计算机系统概述&#34;&gt;&lt;a href=&#34;#Ch1-计算机系统概述&#34; class=&#34;headerlink&#34; title=&#34;Ch1 计算机系统概述&#34;&gt;&lt;/a&gt;Ch1 计算机系统概述&lt;/h1&gt;&lt;h2 id=&#34;1-1-计算机发展历程&#34;&gt;&lt;a href=&#34;#1-1-计算机发展历程&#34; class=&#34;headerlink&#34; title=&#34;1.1 计算机发展历程&#34;&gt;&lt;/a&gt;1.1 计算机发展历程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;四代计算机：电子管-&amp;gt;晶体管-&amp;gt;集成电路-&amp;gt;超大规模集成电路&lt;/li&gt;
&lt;li&gt;摩尔定律：集成电路上可以容纳的晶体管数目在大约每经过18个月到24个月便会增加一倍&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-2-计算机系统层次结构&#34;&gt;&lt;a href=&#34;#1-2-计算机系统层次结构&#34; class=&#34;headerlink&#34; title=&#34;1.2 计算机系统层次结构&#34;&gt;&lt;/a&gt;1.2 计算机系统层次结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;计算机系统：硬件+软件&lt;/li&gt;
&lt;li&gt;对于某一功能，既能用软件实现又能用硬件实现，称为软、硬件在逻辑功能上是等价的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-2-硬件&#34;&gt;&lt;a href=&#34;#1-2-2-硬件&#34; class=&#34;headerlink&#34; title=&#34;1.2.2 硬件&#34;&gt;&lt;/a&gt;1.2.2 硬件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;冯·诺依曼机的特点：&lt;ul&gt;
&lt;li&gt;采用“存储程序”的工作方式&lt;/li&gt;
&lt;li&gt;冯·诺依曼计算机由五大部件组成：运算器、控制器、存储器、输入设备和输出设备&lt;/li&gt;
&lt;li&gt;指令和数据以同等地位存储在存储器中&lt;/li&gt;
&lt;li&gt;指令和数据均用二进制代码表示&lt;/li&gt;
&lt;li&gt;指令由操作码和地址码组成&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img1.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;计算机的功能部件：&lt;ul&gt;
&lt;li&gt;输入设备&lt;/li&gt;
&lt;li&gt;输出设备&lt;/li&gt;
&lt;li&gt;存储器：主存+外存&lt;ul&gt;
&lt;li&gt;CPU能直接访问的是主存&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img2.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;MAR位10位则最多有$2^{10}$个存储单元&lt;/li&gt;
&lt;li&gt;在现代计算机中MAR和MDR存在CPU中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;运算器：进行算术运算和逻辑运算&lt;ul&gt;
&lt;li&gt;核心是ALU：通用寄存器有&amp;#x3D;&amp;#x3D;累加器(ACC)，乘商寄存器(MQ)，操作数寄存器(X)&amp;#x3D;&amp;#x3D;，变址寄存器(IX)，基址寄存器(BR)等，前三个必备&lt;/li&gt;
&lt;li&gt;程序状态寄存器(PSW)&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img3.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制器：由PC, IR和control unit组成&lt;ul&gt;
&lt;li&gt;: RISCV控制器&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img4.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU由运算器、控制器和cache组成&lt;/li&gt;
&lt;li&gt;总线有地址总线、数据总线、控制总线&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-3-软件&#34;&gt;&lt;a href=&#34;#1-2-3-软件&#34; class=&#34;headerlink&#34; title=&#34;1.2.3 软件&#34;&gt;&lt;/a&gt;1.2.3 软件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;组成：系统软件(OS, DBMS, 编译器, …)+应用软件&lt;/li&gt;
&lt;li&gt;语言：汇编语言、机器语言、高级语言&lt;ul&gt;
&lt;li&gt;汇编器：把汇编语言翻译成机器语言&lt;/li&gt;
&lt;li&gt;编译器：把高级语言翻译成汇编语言或机器语言&lt;/li&gt;
&lt;li&gt;解释器：把高级语言翻译成&amp;#x3D;&amp;#x3D;机器语言&amp;#x3D;&amp;#x3D;(比如python)&lt;br&gt;  +++info example&lt;br&gt;  ;;;id3 题目&lt;br&gt;  :chestnut:&lt;br&gt;  将高级语言源程序转换为机器级目标代码文件的程序是 []。&lt;br&gt;  A. 汇编程序&lt;br&gt;  B. 链接程序&lt;br&gt;  C. 编译程序&lt;br&gt;  D. 解释程序&lt;br&gt;  ;;;&lt;br&gt;  ;;;id3 答案&lt;br&gt;  C. 编译程序&lt;br&gt;  因为解释程序不生成目标代码，编译器可以把高级语言翻译成汇编语言或者直接翻译成机器语言&lt;br&gt;  ;;;&lt;br&gt;  +++&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-4-计算机系统的层次结构&#34;&gt;&lt;a href=&#34;#1-2-4-计算机系统的层次结构&#34; class=&#34;headerlink&#34; title=&#34;1.2.4 计算机系统的层次结构&#34;&gt;&lt;/a&gt;1.2.4 计算机系统的层次结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;看看就好&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img5.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-5-计算机系统的工作原理&#34;&gt;&lt;a href=&#34;#1-2-5-计算机系统的工作原理&#34; class=&#34;headerlink&#34; title=&#34;1.2.5 计算机系统的工作原理&#34;&gt;&lt;/a&gt;1.2.5 计算机系统的工作原理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;程序执行前，需要把所含的指令和数据一起放入主存中&lt;/li&gt;
&lt;li&gt;五个阶段：IF-ID-EX-MEM-WB&lt;/li&gt;
&lt;li&gt;c程序怎么变成可执行文件的：直接看图&lt;ul&gt;
&lt;li&gt;&lt;img data-src=&#34;/img6.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;汇编器把指令打包成可重定位目标代码文件：使用相对地址和符号引用来表示各个代码段之间的关系（代码段、数据段、符号表、重定位表…）使得代码或数据能在内存中任意位置加载或运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指令执行过程：后面几章会具体讲&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-3-计算机的性能指标&#34;&gt;&lt;a href=&#34;#1-3-计算机的性能指标&#34; class=&#34;headerlink&#34; title=&#34;1.3 计算机的性能指标&#34;&gt;&lt;/a&gt;1.3 计算机的性能指标&lt;/h2&gt;&lt;h3 id=&#34;1-3-1-主要性能指标&#34;&gt;&lt;a href=&#34;#1-3-1-主要性能指标&#34; class=&#34;headerlink&#34; title=&#34;1.3.1 主要性能指标&#34;&gt;&lt;/a&gt;1.3.1 主要性能指标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;字长：一次整数运算所能处理的二进制数据的位数&lt;br&gt; :::info&lt;br&gt; 机器字长、指令字长和存储字长&lt;br&gt; :::&lt;/li&gt;
&lt;li&gt;带宽&lt;code&gt;bandwidth&lt;/code&gt;：总线一次能并行传送信息的位数&lt;/li&gt;
&lt;li&gt;主存容量&lt;/li&gt;
&lt;li&gt;运算速度&lt;ul&gt;
&lt;li&gt;吞吐量&lt;code&gt;throughput&lt;/code&gt;：一次输入数据所对应的输出数据个数&lt;/li&gt;
&lt;li&gt;响应时间&lt;code&gt;Response (Execution) time&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;主频&lt;/li&gt;
&lt;li&gt;clock cycle time( &amp;#x3D; 1&amp;#x2F;CPU frequency)&lt;/li&gt;
&lt;li&gt;MIPS: million instructions per second&lt;/li&gt;
&lt;li&gt;FLOPS: floating-point operations per second&lt;blockquote&gt;
&lt;p&gt;CPI: clock cycles per instruction(IPC: CPI的倒数)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ \begin{aligned}&lt;br&gt;    \text{CPU execution time} &amp;amp;&amp;#x3D; \text{CPU clock cycles} \times \text{Clock cycle time} \&lt;br&gt;    &amp;amp;&amp;#x3D; \frac{\text{CPU clock cycles}}{\text{Clock rate}}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;    \text{CPU clock cycles} &amp;amp;&amp;#x3D; \text{Instructions count} \times \text{Average cycles per instruction}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;    \text{CPU execution time} &amp;amp;&amp;#x3D; \text{CPU clock cycles} \times \text{Clock cycle time} \&lt;br&gt;    &amp;amp;&amp;#x3D; \frac{\text{CPU clock cycles}}{\text{Clock rate}}&lt;br&gt;\end{aligned} $$&lt;/p&gt;
&lt;p&gt;$$ \begin{aligned}&lt;br&gt;     \text{performance} &amp;amp;&amp;#x3D; \frac{1}{\text{CPU execution time}}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;“Processor X is n times fast than Y” is&lt;br&gt;$$ \begin{aligned}&lt;br&gt;    \text{n} &amp;amp;&amp;#x3D; \frac{\text{CPU execution time of Y}}{\text{CPU execution time of X}}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;IPS: instructions per second&lt;br&gt;$$ \begin{aligned}&lt;br&gt;    \text{IPS} &amp;amp;&amp;#x3D; \frac{\text{CPU frequency}}{\text{CPI}}&lt;br&gt;        &amp;amp;&amp;#x3D; \frac{1}{\text{CPU clock cycles} \times \text{CPU execution time}}&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其他公式，，，用到再说吧&lt;/li&gt;
&lt;li&gt;兼容：软件或硬件的通用性&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在用于科学计算的计算机中，标志系统性能最有用的参数是浮点数运算相关的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MFLOPS 10^6&lt;/li&gt;
&lt;li&gt;GFLOPS 10^9&lt;/li&gt;
&lt;li&gt;TFLOPS 10^12&lt;/li&gt;
&lt;li&gt;PFLOPS 10^15&lt;/li&gt;
&lt;li&gt;EFLOPS 10^18&lt;/li&gt;
&lt;li&gt;ZFLOPS 10^21&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/03/30/computer-science/compile-principles/ch5/</guid>
            <title>语义分析</title>
            <link>http://example.com/2025/03/30/computer-science/compile-principles/ch5/</link>
            <category>语义分析</category>
            <pubDate>Sun, 30 Mar 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;语义分析&#34;&gt;&lt;a href=&#34;#语义分析&#34; class=&#34;headerlink&#34; title=&#34;语义分析&#34;&gt;&lt;/a&gt;语义分析&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;绑定，类型检查&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;symbol-table&#34;&gt;&lt;a href=&#34;#symbol-table&#34; class=&#34;headerlink&#34; title=&#34;symbol table&#34;&gt;&lt;/a&gt;symbol table&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Imperative style: 命令式风格&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modify $\sigma_1$ until it becomes $\sigma_2$. &lt;/li&gt;
&lt;li&gt;While $\sigma_2$ exists, we cannot look things up in $\sigma_1$. &lt;/li&gt;
&lt;li&gt;When done with $\sigma_2$, can undo the modification to get $\sigma_1$ back again.&lt;br&gt;+++info 方法：&lt;br&gt;Hashing&lt;br&gt;插入：找到哈希值然后插入链表的表头&lt;br&gt;查找：找到哈希值然后遍历链表&lt;br&gt;pop: 找到哈希值然后把链表表头删掉  table[hash(key)] &amp;#x3D; table[hash(key)].next&lt;br&gt;+++&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Functional style: 函数式风格&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To keep $\sigma_1$ in pristine condition while creating create $\sigma_2$ and $\sigma_3$&lt;br&gt;+++info 方法：&lt;br&gt;如果依旧用哈希，每次要复制一遍哈希表，开销太大了，不现实&lt;br&gt;&lt;img data-src=&#34;/f2.jpg&#34;&gt;&lt;br&gt;所以用persistent BST&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;br&gt;先遍历二叉搜索树找到要插入的位置，然后对于插入节点把它从根节点到它全都复制一遍然后插入&lt;br&gt;+++&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Tiger编译器中的符号&#34;&gt;&lt;a href=&#34;#Tiger编译器中的符号&#34; class=&#34;headerlink&#34; title=&#34;Tiger编译器中的符号&#34;&gt;&lt;/a&gt;Tiger编译器中的符号&lt;/h2&gt;&lt;p&gt;对链表进行lookup的时候每一次都要进行string compare，开销是很大的。所以使用新的数据结构将符号对象关联到一个整数上，因此对于任意给定字符串的所有不同出现，都会被转换成同一个符号对象。&lt;br&gt;Symbol的实现：通过hash函数将字符串映射到一个symbol对象上&lt;br&gt;SymbolTable的实现：beginScope()和endScope()的实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;beginScope()：添加一个marksym&lt;/li&gt;
&lt;li&gt;endScope()：从符号表中不断pop直到marksym&lt;/li&gt;
&lt;li&gt;引入一个 辅助栈(Auxiliary stack) 来维护&lt;ul&gt;
&lt;li&gt;符号入栈时，会将binding联动地插入对应bucket的链表头&lt;/li&gt;
&lt;li&gt;弹出栈顶符号时，对应bucket的链表头也会联动地被移除&lt;/li&gt;
&lt;li&gt;beginScope: 压入一个特殊标记到辅助栈中&lt;/li&gt;
&lt;li&gt;endScope: 一直弹出符号直到弹出了一个特殊标记&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;类型检查&#34;&gt;&lt;a href=&#34;#类型检查&#34; class=&#34;headerlink&#34; title=&#34;类型检查&#34;&gt;&lt;/a&gt;类型检查&lt;/h2&gt;&lt;h3 id=&#34;哪些类型表达式是合法-非法的&#34;&gt;&lt;a href=&#34;#哪些类型表达式是合法-非法的&#34; class=&#34;headerlink&#34; title=&#34;哪些类型表达式是合法&amp;#x2F;非法的&#34;&gt;&lt;/a&gt;哪些类型表达式是合法&amp;#x2F;非法的&lt;/h3&gt;&lt;p&gt;Tiger的类型系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两种primitive type: int, string&lt;/li&gt;
&lt;li&gt;两种constructed type: records, arrays&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;typec → type type-id &amp;#x3D; ty&lt;ul&gt;
&lt;li&gt;这表示定义一个类型。&lt;code&gt;typec&lt;/code&gt; 是一个类型定义的开始，它由关键字 &lt;code&gt;type&lt;/code&gt;、一个类型标识符 &lt;code&gt;type-id&lt;/code&gt; 和一个等号 &lt;code&gt;=&lt;/code&gt; 后跟类型定义 &lt;code&gt;ty&lt;/code&gt; 组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ty → type-id&lt;ul&gt;
&lt;li&gt;这表示类型 &lt;code&gt;ty&lt;/code&gt; 可以直接是一个已定义的类型标识符 &lt;code&gt;type-id&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ty → ‘{’ tyfields ‘}’&lt;ul&gt;
&lt;li&gt;这表示类型 &lt;code&gt;ty&lt;/code&gt; 可以是一个记录（record），由花括号 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt; 包围的一系列字段 &lt;code&gt;tyfields&lt;/code&gt; 定义。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ty → array of type-id&lt;ul&gt;
&lt;li&gt;这表示类型 &lt;code&gt;ty&lt;/code&gt; 可以是一个数组，由关键字 &lt;code&gt;array of&lt;/code&gt; 后跟一个类型标识符 &lt;code&gt;type-id&lt;/code&gt; 定义。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tyfields → ε&lt;ul&gt;
&lt;li&gt;这表示字段列表 &lt;code&gt;tyfields&lt;/code&gt; 可以为空（ε 表示空串）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tyfields → id: type-id {, id:type-id}&lt;ul&gt;
&lt;li&gt;这表示字段列表 &lt;code&gt;tyfields&lt;/code&gt; 由一个或多个字段组成，每个字段由一个标识符 &lt;code&gt;id&lt;/code&gt; 和冒号 &lt;code&gt;:&lt;/code&gt; 后跟一个类型标识符 &lt;code&gt;type-id&lt;/code&gt; 定义，多个字段之间用逗号 &lt;code&gt;,&lt;/code&gt; 分隔。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let type a = &amp;#123;x: int; y: int&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    type b = a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var i : a := ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var j : b := ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;in i := j&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&#34;类型等价&#34;&gt;&lt;a href=&#34;#类型等价&#34; class=&#34;headerlink&#34; title=&#34;类型等价&#34;&gt;&lt;/a&gt;类型等价&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Name equivalence (NE): 必须声明是同一个类型才是同一类型&lt;/li&gt;
&lt;li&gt;Structure equivalence (SE): 如果两个类型的结构完全相同（即它们由相同的构造器以相同的顺序组成），那么它们就被认为是等价的，即使它们的名字不同&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;type A = &amp;#123;x: int; y: int&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;type B = &amp;#123;x: int; y: int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Tiger用的是NE&lt;br&gt;在Tiger编程语言中，存在两个独立的命名空间：一个用于类型（Types），另一个用于函数和变量（Functions and Variables）。所以类型和函数&amp;#x2F;变量可以存在相同的名字，但是函数和变量不能存在相同的名字。&lt;br&gt;所以需要两个env&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type env&lt;ul&gt;
&lt;li&gt;symbol -&amp;gt; Ty_ty&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Value env&lt;ul&gt;
&lt;li&gt;对于变量，symbol -&amp;gt; Ty_ty&lt;/li&gt;
&lt;li&gt;对于函数，symbol -&amp;gt; struct{Ty_tyList formals, Ty_ty results}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类型检查的rule&#34;&gt;&lt;a href=&#34;#类型检查的rule&#34; class=&#34;headerlink&#34; title=&#34;类型检查的rule&#34;&gt;&lt;/a&gt;类型检查的rule&lt;/h3&gt;&lt;p&gt;类型检查分为两部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type-checking expressions: 对于每个表达式，根据当前的Type和Value环境来确定其类型，并检查是否符合语言的类型规则&lt;/li&gt;
&lt;li&gt;Type-checking declarations: 在Tiger语言中声明只可能在let语句中出现&lt;br&gt;好像就是讲了transExp, transDec, transVar，AST递归检查每个节点的类型然后一层一层往上传再检查&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/03/29/computer-science/compile-principles/ch4/</guid>
            <title>抽象语法</title>
            <link>http://example.com/2025/03/29/computer-science/compile-principles/ch4/</link>
            <category>抽象语法</category>
            <pubDate>Sat, 29 Mar 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/03/23/computer-science/compile-principles/ch3/</guid>
            <title>语法分析</title>
            <link>http://example.com/2025/03/23/computer-science/compile-principles/ch3/</link>
            <category>语法分析</category>
            <pubDate>Sun, 23 Mar 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;语法分析&#34;&gt;&lt;a href=&#34;#语法分析&#34; class=&#34;headerlink&#34; title=&#34;语法分析&#34;&gt;&lt;/a&gt;语法分析&lt;/h1&gt;&lt;h2 id=&#34;CFG&#34;&gt;&lt;a href=&#34;#CFG&#34; class=&#34;headerlink&#34; title=&#34;CFG&#34;&gt;&lt;/a&gt;CFG&lt;/h2&gt;&lt;p&gt;见计算理论&lt;br&gt;Parse tree&lt;/p&gt;
&lt;h3 id=&#34;Ambiguous-grammars&#34;&gt;&lt;a href=&#34;#Ambiguous-grammars&#34; class=&#34;headerlink&#34; title=&#34;Ambiguous grammars&#34;&gt;&lt;/a&gt;Ambiguous grammars&lt;/h3&gt;&lt;h2 id&gt;&lt;a href=&#34;#&#34; class=&#34;headerlink&#34; title&gt;&lt;/a&gt;&lt;/h2&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/03/22/computer-science/compile-principles/ch2/</guid>
            <title>词法分析</title>
            <link>http://example.com/2025/03/22/computer-science/compile-principles/ch2/</link>
            <category>词法分析</category>
            <pubDate>Sat, 22 Mar 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Ch2-词法分析&#34;&gt;&lt;a href=&#34;#Ch2-词法分析&#34; class=&#34;headerlink&#34; title=&#34;Ch2 词法分析&#34;&gt;&lt;/a&gt;Ch2 词法分析&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;把input分解成一个个token&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;Regular-Expression&#34;&gt;&lt;a href=&#34;#Regular-Expression&#34; class=&#34;headerlink&#34; title=&#34;Regular Expression&#34;&gt;&lt;/a&gt;Regular Expression&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Language: a set of strings&lt;/li&gt;
&lt;li&gt;String: a finite sequence of characters&lt;blockquote&gt;
&lt;p&gt;Regular Experssion Notations:&lt;br&gt;&lt;img data-src=&#34;/image-1.png&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::info&lt;br&gt;DFA, NFA相关 见计算理论&lt;br&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;RE转NFA&#34;&gt;&lt;a href=&#34;#RE转NFA&#34; class=&#34;headerlink&#34; title=&#34;RE转NFA&#34;&gt;&lt;/a&gt;RE转NFA&lt;/h2&gt;&lt;p&gt;:::info 方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;画出初始态和终态&lt;/li&gt;
&lt;li&gt;分裂规则：&lt;br&gt;&lt;img data-src=&#34;/image-2.jpg&#34;&gt;&lt;br&gt;:::&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;NFA转DFA&#34;&gt;&lt;a href=&#34;#NFA转DFA&#34; class=&#34;headerlink&#34; title=&#34;NFA转DFA&#34;&gt;&lt;/a&gt;NFA转DFA&lt;/h2&gt;&lt;p&gt;从初始状态的闭包开始，每次根据\epsilon和当前状态的闭包，得到下一个状态的闭包，直到得到终态的闭包。&lt;/p&gt;
&lt;p&gt;+++info example&lt;br&gt;;;;id3 题目&lt;br&gt;:chestnut:&lt;br&gt;把这个NFA转成等价的DFA&lt;br&gt;&lt;img data-src=&#34;/image-3.png&#34;&gt;&lt;br&gt;;;;&lt;br&gt;;;;id3 答案&lt;br&gt;初态的闭包是1、2、6，1、2、6经过a可以转移到3、7，因为有\epsilon转移，所以3、7的闭包是3、4、7、8，同理3、4、7、8经过b可以到5、8，由于8是终态，把所有包含8的圆圈画成终态的环。&lt;br&gt;&lt;img data-src=&#34;/image-4.png&#34;&gt;&lt;br&gt;;;;&lt;br&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;最小化DFA&#34;&gt;&lt;a href=&#34;#最小化DFA&#34; class=&#34;headerlink&#34; title=&#34;最小化DFA&#34;&gt;&lt;/a&gt;最小化DFA&lt;/h2&gt;&lt;p&gt;含义：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没有多余状态：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;从这个状态没有通路到达终态&lt;/li&gt;
&lt;li&gt;从开始状态出发，任何输入串也不能到达的那个状态&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;没有两个状态相互等价&lt;br&gt;:::info 方法：&lt;/li&gt;
&lt;li&gt;多余状态直接删除&lt;br&gt;&lt;img data-src=&#34;/image-5.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;合并等价状态&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;将状态分为终态和非终态两个集合&lt;/li&gt;
&lt;li&gt;遍历每个集合，如果经过转换到达的状态都在当前集合里，则不用分，否则划分子集，直到划分不了为止&lt;/li&gt;
&lt;li&gt;:chestnut: 例子&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/image-6.png&#34;&gt;&lt;br&gt;:::&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/03/21/computer-science/compile-principles/ch1/</guid>
            <title>Introduction</title>
            <link>http://example.com/2025/03/21/computer-science/compile-principles/ch1/</link>
            <category>编译原理</category>
            <pubDate>Fri, 21 Mar 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;ZJU 2025春夏编译原理 学习笔记&lt;/p&gt;
&lt;p&gt;主要基于虎书（&lt;em&gt;Modern Compiler Implementation in C&lt;/em&gt;, Andrew W. Appel）和好多老师的ppt（ldm, yps），还有lzx的智云&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;CH1-Introduction&#34;&gt;&lt;a href=&#34;#CH1-Introduction&#34; class=&#34;headerlink&#34; title=&#34;CH1 Introduction&#34;&gt;&lt;/a&gt;CH1 Introduction&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Two Important Concepts&lt;ul&gt;
&lt;li&gt;Phases（阶段）&lt;/li&gt;
&lt;li&gt;Interfaces（接口）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方框里的是phase，中间的是interface&lt;br&gt;&lt;img data-src=&#34;/image.png&#34;&gt;&lt;br&gt;各个阶段的描述&lt;br&gt;&lt;img data-src=&#34;/image-1.png&#34;&gt;&lt;img data-src=&#34;/image-2.png&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
