<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title></title>
    <link href="http://example.com" />
    <updated>2024-05-12T16:00:00.000Z</updated>
    <category term="编译原理" />
    <category term="词法分析" />
    <category term="语法分析" />
    <category term="语义分析" />
    <category term="计算机网络" />
    <category term="抽象语法" />
    <category term="计算机组成" />
    <entry>
        <id>http://example.com/2024/05/13/computer-science/computer-network/ch1/</id>
        <title>Ch1</title>
        <link rel="alternate" href="http://example.com/2024/05/13/computer-science/computer-network/ch1/"/>
        <content type="html"></content>
        <category term="计算机网络" />
        <updated>2024-05-12T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/05/13/computer-science/computer-organization/ch1/</id>
        <title>Ch1</title>
        <link rel="alternate" href="http://example.com/2024/05/13/computer-science/computer-organization/ch1/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;王道计组考研复习笔记&lt;br&gt;
怕学完忘了写个笔记保留一下顺便加深印象 x&lt;br&gt;
 王道书写得好烂、、&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;ch1-计算机系统概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ch1-计算机系统概述&#34;&gt;#&lt;/a&gt; Ch1 计算机系统概述&lt;/h1&gt;
&lt;h2 id=&#34;11-计算机发展历程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-计算机发展历程&#34;&gt;#&lt;/a&gt; 1.1 计算机发展历程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;四代计算机：电子管 -&amp;gt; 晶体管 -&amp;gt; 集成电路 -&amp;gt; 超大规模集成电路&lt;/li&gt;
&lt;li&gt;摩尔定律：集成电路上可以容纳的晶体管数目在大约每经过 18 个月到 24 个月便会增加一倍&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12-计算机系统层次结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12-计算机系统层次结构&#34;&gt;#&lt;/a&gt; 1.2 计算机系统层次结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;计算机系统：硬件 + 软件&lt;/li&gt;
&lt;li&gt;对于某一功能，既能用软件实现又能用硬件实现，称为软、硬件在逻辑功能上是等价的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;122-硬件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#122-硬件&#34;&gt;#&lt;/a&gt; 1.2.2 硬件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;冯・诺依曼机的特点：
&lt;ul&gt;
&lt;li&gt;采用 “存储程序” 的工作方式&lt;/li&gt;
&lt;li&gt;冯・诺依曼计算机由五大部件组成：运算器、控制器、存储器、输入设备和输出设备&lt;/li&gt;
&lt;li&gt;指令和数据以同等地位存储在存储器中&lt;/li&gt;
&lt;li&gt;指令和数据均用二进制代码表示&lt;/li&gt;
&lt;li&gt;指令由操作码和地址码组成&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;img1.png&#34; alt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;计算机的功能部件：
&lt;ul&gt;
&lt;li&gt;输入设备&lt;/li&gt;
&lt;li&gt;输出设备&lt;/li&gt;
&lt;li&gt;存储器：主存 + 外存
&lt;ul&gt;
&lt;li&gt;CPU 能直接访问的是主存&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;img2.jpg&#34; alt&gt;&lt;/li&gt;
&lt;li&gt;MAR 位 10 位则最多有 $$2^{10}$$ 个存储单元&lt;/li&gt;
&lt;li&gt;在现代计算机中 MAR 和 MDR 存在 CPU 中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;运算器：进行算术运算和逻辑运算
&lt;ul&gt;
&lt;li&gt;核心是 ALU：通用寄存器有&lt;mark&gt;累加器 (ACC)，乘商寄存器 (MQ)，操作数寄存器 (X)&lt;/mark&gt;，变址寄存器 (IX)，基址寄存器 (BR) 等，前三个必备&lt;/li&gt;
&lt;li&gt;程序状态寄存器 (PSW)&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;img3.jpg&#34; alt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制器：由 PC, IR 和 control unit 组成
&lt;ul&gt;
&lt;li&gt;: RISCV 控制器&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;img4.png&#34; alt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU 由运算器、控制器和 cache 组成&lt;/li&gt;
&lt;li&gt;总线有地址总线、数据总线、控制总线&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;123-软件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#123-软件&#34;&gt;#&lt;/a&gt; 1.2.3 软件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;组成：系统软件 (OS, DBMS, 编译器，…)+ 应用软件&lt;/li&gt;
&lt;li&gt;语言：汇编语言、机器语言、高级语言
&lt;ul&gt;
&lt;li&gt;汇编器：把汇编语言翻译成机器语言&lt;/li&gt;
&lt;li&gt;编译器：把高级语言翻译成汇编语言或机器语言&lt;/li&gt;
&lt;li&gt;解释器：把高级语言翻译成&lt;mark&gt;机器语言&lt;/mark&gt; (比如 python)
&lt;ul&gt;
&lt;li class=&#34;quiz&#34;&gt;解释程序速度比编译程序慢，原因是解释器是一边翻译一边执行，所以&lt;mark&gt;解释器不生成目标代码&lt;/mark&gt;&lt;br&gt;
将高级语言源程序转换为机器级目标代码文件的程序是 {.gap}[]。
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;汇编程序&lt;/li&gt;
&lt;li&gt;链接程序&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;编译程序&lt;/li&gt;
&lt;li&gt;解释程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;124-计算机系统的层次结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#124-计算机系统的层次结构&#34;&gt;#&lt;/a&gt; 1.2.4 计算机系统的层次结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;看看就好&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;img5.png&#34; alt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;125-计算机系统的工作原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#125-计算机系统的工作原理&#34;&gt;#&lt;/a&gt; 1.2.5 计算机系统的工作原理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;程序执行前，需要把所含的指令和数据一起放入主存中&lt;/li&gt;
&lt;li&gt;五个阶段：IF-ID-EX-MEM-WB&lt;/li&gt;
&lt;li&gt;c 程序怎么变成可执行文件的：直接看图
&lt;ul&gt;
&lt;li&gt;&lt;img data-src=&#34;img6.png&#34; alt&gt;&lt;/li&gt;
&lt;li&gt;汇编器把指令打包成可重定位目标代码文件：使用相对地址和符号引用来表示各个代码段之间的关系（代码段、数据段、符号表、重定位表…）使得代码或数据能在内存中任意位置加载或运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指令执行过程：后面几章会具体讲&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="计算机组成" />
        <updated>2024-05-12T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/03/21/computer-science/compile-principles/ch1/</id>
        <title>Ch1</title>
        <link rel="alternate" href="http://example.com/2024/03/21/computer-science/compile-principles/ch1/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;ZJU 2025 春夏编译原理 学习笔记&lt;/p&gt;
&lt;p&gt;主要基于虎书（&lt;em&gt;Modern Compiler Implementation in C&lt;/em&gt;, Andrew W. Appel）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;ch1-introduction&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ch1-introduction&#34;&gt;#&lt;/a&gt; CH1 Introduction&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Two Important Concepts
&lt;ul&gt;
&lt;li&gt;Phases（阶段）&lt;/li&gt;
&lt;li&gt;Interfaces（接口）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方框里的是 phase，中间的是 interface&lt;br&gt;
&lt;img data-src=&#34;image.png&#34; alt&gt;&lt;br&gt;
 各个阶段的描述&lt;br&gt;
&lt;img data-src=&#34;image-1.png&#34; alt&gt;&lt;img data-src=&#34;image-2.png&#34; alt&gt;&lt;/p&gt;
</content>
        <category term="编译原理" />
        <updated>2024-03-20T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/03/21/computer-science/compile-principles/ch2/</id>
        <title>Ch2</title>
        <link rel="alternate" href="http://example.com/2024/03/21/computer-science/compile-principles/ch2/"/>
        <content type="html">&lt;h1 id=&#34;ch2-词法分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ch2-词法分析&#34;&gt;#&lt;/a&gt; Ch2 词法分析&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;把 input 分解成一个个 token&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;regular-expression&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#regular-expression&#34;&gt;#&lt;/a&gt; Regular Expression&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Language: a set of strings&lt;/li&gt;
&lt;li&gt;String: a finite sequence of characters&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Regular Experssion Notations:&lt;br&gt;
&lt;img data-src=&#34;image-1.png&#34; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;DFA, NFA 相关 见计算理论&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;re转nfa&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#re转nfa&#34;&gt;#&lt;/a&gt; RE 转 NFA&lt;/h2&gt;
&lt;div class=&#34;note info 方法：&#34;&gt;
&lt;ol&gt;
&lt;li&gt;画出初始态和终态&lt;/li&gt;
&lt;li&gt;分裂规则：&lt;br&gt;
&lt;img data-src=&#34;image-2.jpg&#34; alt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h2 id=&#34;nfa转dfa&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nfa转dfa&#34;&gt;#&lt;/a&gt; NFA 转 DFA&lt;/h2&gt;
&lt;p&gt;从初始状态的闭包开始，每次根据 \epsilon 和当前状态的闭包，得到下一个状态的闭包，直到得到终态的闭包。&lt;/p&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;example&lt;/summary&gt;&lt;div&gt;
&lt;div class=&#34;tab&#34; data-id=&#34;id3&#34; data-title=&#34;题目&#34;&gt;
&lt;p&gt;🌰&lt;br&gt;
把这个 NFA 转成等价的 DFA&lt;br&gt;
&lt;img data-src=&#34;image-3.png&#34; alt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;tab&#34; data-id=&#34;id3&#34; data-title=&#34;答案&#34;&gt;
&lt;p&gt;初态的闭包是 1、2、6，1、2、6 经过 a 可以转移到 3、7，因为有 \epsilon 转移，所以 3、7 的闭包是 3、4、7、8，同理 3、4、7、8 经过 b 可以到 5、8，由于 8 是终态，把所有包含 8 的圆圈画成终态的环。&lt;br&gt;
&lt;img data-src=&#34;image-4.png&#34; alt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;最小化dfa&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最小化dfa&#34;&gt;#&lt;/a&gt; 最小化 DFA&lt;/h2&gt;
&lt;p&gt;含义：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没有多余状态：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;从这个状态没有通路到达终态&lt;/li&gt;
&lt;li&gt;从开始状态出发，任何输入串也不能到达的那个状态&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;没有两个状态相互等价&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note info 方法：&#34;&gt;
&lt;ol&gt;
&lt;li&gt;多余状态直接删除&lt;br&gt;
&lt;img data-src=&#34;image-5.png&#34; alt&gt;&lt;/li&gt;
&lt;li&gt;合并等价状态&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;将状态分为终态和非终态两个集合&lt;/li&gt;
&lt;li&gt;遍历每个集合，如果经过转换到达的状态都在当前集合里，则不用分，否则划分子集，直到划分不了为止&lt;/li&gt;
&lt;li&gt;🌰 例子&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;image-6.png&#34; alt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
        <category term="词法分析" />
        <updated>2024-03-20T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/03/21/computer-science/compile-principles/ch3/</id>
        <title>Ch2</title>
        <link rel="alternate" href="http://example.com/2024/03/21/computer-science/compile-principles/ch3/"/>
        <content type="html">&lt;h1 id=&#34;语法分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语法分析&#34;&gt;#&lt;/a&gt; 语法分析&lt;/h1&gt;
&lt;h2 id=&#34;cfg&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cfg&#34;&gt;#&lt;/a&gt; CFG&lt;/h2&gt;
&lt;p&gt;见计算理论&lt;br&gt;
 Parse tree&lt;/p&gt;
&lt;h3 id=&#34;ambiguous-grammars&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ambiguous-grammars&#34;&gt;#&lt;/a&gt; Ambiguous grammars&lt;/h3&gt;
&lt;h2 id&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h2&gt;
</content>
        <category term="语法分析" />
        <updated>2024-03-20T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/03/21/computer-science/compile-principles/ch5/</id>
        <title>Ch2</title>
        <link rel="alternate" href="http://example.com/2024/03/21/computer-science/compile-principles/ch5/"/>
        <content type="html">&lt;h1 id=&#34;语义分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语义分析&#34;&gt;#&lt;/a&gt; 语义分析&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;绑定，类型检查&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;symbol-table&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#symbol-table&#34;&gt;#&lt;/a&gt; symbol table&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Functional style: 函数式风格
&lt;ul&gt;
&lt;li&gt;To keep $$\sigma_1$$ in pristine condition while creating create $$\sigma_2$$ and $$\sigma_3$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Imperative style: 命令式风格
&lt;ul&gt;
&lt;li&gt;Modify $$\sigma_1$$ until it becomes $$\sigma_2$$.&lt;/li&gt;
&lt;li&gt;While $$\sigma_2$$ exists, we cannot look things up in $$\sigma_1$$.&lt;/li&gt;
&lt;li&gt;When done with $$\sigma_2$$, can undo the modification to get $$\sigma_1$$ back again.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note info 方法：&#34;&gt;
&lt;p&gt;Hashing&lt;/p&gt;
&lt;/div&gt;
</content>
        <category term="语义分析" />
        <updated>2024-03-20T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/03/21/computer-science/compile-principles/ch4/</id>
        <title>Ch2</title>
        <link rel="alternate" href="http://example.com/2024/03/21/computer-science/compile-principles/ch4/"/>
        <content type="html"></content>
        <category term="抽象语法" />
        <updated>2024-03-20T16:00:00.000Z</updated>
    </entry>
</feed>
