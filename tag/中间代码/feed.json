{
    "version": "https://jsonfeed.org/version/1",
    "title": " • All posts by \"中间代码\" tag",
    "description": "成分复杂的CSer from ZJU",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/06/15/computer-science/compile-principles/ch7/",
            "url": "http://example.com/2025/06/15/computer-science/compile-principles/ch7/",
            "title": "Ch7",
            "date_published": "2025-06-14T16:00:00.000Z",
            "content_html": "<h1 id=\"ir\"><a class=\"markdownIt-Anchor\" href=\"#ir\">#</a> IR</h1>\n<p>Intermediate Representation<br>\n 解决高级语言和目标机器汇编语言之间的转化<br>\n为什么需要 IR:</p>\n<ul>\n<li>更模块化、可迁移</li>\n<li>分层分析和优化<br>\n IR 可以有好多层：IR1-&gt;IR2-&gt;…-&gt;IRn</li>\n</ul>\n<details class=\"info\"><summary>编译流程划分</summary><div>\n<p>前端：源代码 -&gt; 词法分析 -&gt; 语法分析 -&gt; 语义分析（IR 之前的都是）<br>\n中端：基于 IR 的分析与变换（可能生成新 IR，可以做一些机器无关优化比如循环展开等）<br>\n后端：指令选择 -&gt; 寄存器分配 -&gt; 指令调度 -&gt; 机器码（IR 之后的）</p>\n</div></details>\n<h2 id=\"three-address-code\"><a class=\"markdownIt-Anchor\" href=\"#three-address-code\">#</a> Three-Address Code</h2>\n<p>最多有三个操作数<br>\n x = y op z<br>\n “地址” 可以具有如下形式</p>\n<ul>\n<li>源程序中的名字 (name)</li>\n<li>常量 (constant)</li>\n<li>临时变量 (temporary)<br>\n<img data-src=\"f1.jpg\" alt><br>\n 最常见的实现方法是将三地址代码作为四元组实现</li>\n</ul>\n<details class=\"info\"><summary>example</summary><div>\n<p>t1=x&gt;0                  (gt, x, 0, t1)<br>\nif_false t1 goto L1     (if_f, t1, L1, _)<br>\nfact=1                  (asn, 1, fact, _)<br>\nlabel L2                (lab, L2, _, _)</p>\n</div></details>\n<h2 id=\"ir-tree\"><a class=\"markdownIt-Anchor\" href=\"#ir-tree\">#</a> IR Tree</h2>\n<p>两大类节点：</p>\n<ol>\n<li>表达式 Exp</li>\n<li>语句 Stmt<br>\n 文法：<br>\n<img data-src=\"f2.jpg\" alt><br>\n表达式：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>Node</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CONST(i)</td>\n<td>整数常量 i</td>\n<td>CONST(42) → the value 42</td>\n</tr>\n<tr>\n<td>NAME(n)</td>\n<td>符号常量 n，通常是一个 label，值是 label 的地址</td>\n<td>NAME(L1) → address of label L1</td>\n</tr>\n<tr>\n<td>TEMP(t)</td>\n<td>临时变量 t (like register)</td>\n<td>TEMP(t123) → contents of temporary t123</td>\n</tr>\n<tr>\n<td>BINOP(o,e1,e2)</td>\n<td>对 e1 和 e2 执行二元操作 o</td>\n<td>BINOP(PLUS,TEMP(t1),CONST(1)) → t1+1</td>\n</tr>\n<tr>\n<td>MEM(e)</td>\n<td>Memory access</td>\n<td>MEM(CONST(100)) → contents at address 100</td>\n</tr>\n<tr>\n<td>CALL(f,l)</td>\n<td>Function call, l 是参数列表</td>\n<td>CALL(NAME(print),[TEMP(t1)]) → call print(t1)</td>\n</tr>\n<tr>\n<td>ESEQ(s,e)</td>\n<td>先执行语句 s，再求值表达式 e 并返回 e 的结果</td>\n<td>ESEQ(MOVE(TEMP(t),CONST(1)),TEMP(t)) → (t=1; t)</td>\n</tr>\n</tbody>\n</table>\n<p>语句：</p>\n<table>\n<thead>\n<tr>\n<th>Node</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MOVE(TEMP t, e)</td>\n<td>将表达式 e 的值赋给临时变量 t</td>\n<td>MOVE(TEMP(t1), CONST(42)) → t1 = 42</td>\n</tr>\n<tr>\n<td>MOVE(MEM(e1), e2)</td>\n<td>将表达式 e2 的值存储到由 e1 指定的内存地址中</td>\n<td>MOVE(MEM(TEMP(t1)), CONST(42)) → *t1 = 42</td>\n</tr>\n<tr>\n<td>EXP(e)</td>\n<td>计算表达式 e 的值但不返回结果，通常用于有副作用的操作（如函数调用）</td>\n<td>EXP (CALL (NAME (print), …)) → 调用 print () 函数以产生效果</td>\n</tr>\n<tr>\n<td>JUMP(e, labs)</td>\n<td>无条件跳转到由 e 指定的地址</td>\n<td>JUMP(NAME(L1), [L1]) → goto L1</td>\n</tr>\n<tr>\n<td>CJUMP(o,e1,e2,t,f)</td>\n<td>条件跳转，根据操作 o 对 e1 和 e2 的结果决定跳转到 t 或 f</td>\n<td>CJUMP (LT, TEMP (t1), CONST (0), L1, L2) → 如果 t1 &lt; 0 则跳转到 L1，否则跳转到 L2</td>\n</tr>\n<tr>\n<td>SEQ(s1, s2)</td>\n<td>语句序列，先执行 s1 再执行 s2</td>\n<td>SEQ (MOVE (…), JUMP (…)) → 先赋值再跳转</td>\n</tr>\n<tr>\n<td>LABEL(n)</td>\n<td>定义一个标签</td>\n<td>LABEL(L1) → L1:</td>\n</tr>\n</tbody>\n</table>\n<p>例子：<br>\n<img data-src=\"f3.jpg\" alt><br>\nADD 那个地方写成 BINOP 的写法也可以</p>\n<h2 id=\"翻译ast成ir-tree\"><a class=\"markdownIt-Anchor\" href=\"#翻译ast成ir-tree\">#</a> 翻译 AST 成 IR Tree</h2>\n<p>把 AST 表达式分为三类：</p>\n<ul>\n<li>Ex: 有结果的 AST 表达式比如 a+b</li>\n<li>Nx：无结果的语句的比如 print</li>\n<li>Cx：条件语句，值为 bool 的 AST 表达式</li>\n</ul>\n<ol>\n<li>翻译简单变量：<br>\n在函数中访问一个局部变量实际上是访问它在当前栈帧中的位置，所以访问一个距离 fp 的 offset 为 k 的局部变量 v，其 IR Tree 表示为:</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>M</mi><mi>E</mi><mi>M</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mi>I</mi><mi>N</mi><mi>O</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>P</mi><mi>L</mi><mi>U</mi><mi>S</mi><mo separator=\"true\">,</mo><mi>T</mi><mi>E</mi><mi>M</mi><mi>P</mi><mi>f</mi><mi>p</mi><mo separator=\"true\">,</mo><mi>C</mi><mi>O</mi><mi>N</mi><mi>S</mi><mi>T</mi><mi>k</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">MEM(BINOP(PLUS, TEMP fp, CONST k))\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p><img data-src=\"f4.jpg\" alt><br>\n如果通过 static link 访问一个变量，就要嵌套好几层 MEM 和 BINOP<br>\n 比如这个访问嵌套两层外面的 x<br>\n 最内层使用 CONST (8)：是因为需要从 inner 函数的帧指针 FP 开始，偏移 8 字节来访问静态链，该静态链指向 middle 函数的帧。<br>\n中间层和最外层使用 CONST (0)：是因为它们分别通过静态链直接访问 outer 函数的帧和变量 x，不需要额外的偏移<br>\n<img data-src=\"f5.jpg\" alt></p>\n<div class=\"note danger\">\n<p>这个地方为什么内层是 8 中层是 0 存疑</p>\n</div>\n<p>左值和右值：= 左右的<br>\n MEM (addr) 可以是左值也可以是右值</p>\n<ul>\n<li>Scalar L-value (Tiger): 一个地址</li>\n<li>Structured L-value (Pascal/C): 一块内存</li>\n</ul>\n<ol start=\"2\">\n<li>翻译算术运算</li>\n</ol>\n<ul>\n<li>二元: BINOP (op, e1, e2)</li>\n<li>一元:\n<ul>\n<li>-x ==&gt; BINOP(MINUS, CONST(0), e_x)</li>\n<li>~x ==&gt; BINOP(XOR, e_x, CONST(-1))</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>数组访问</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>M</mi><mi>E</mi><mi>M</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mi>I</mi><mi>N</mi><mi>O</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>P</mi><mi>L</mi><mi>U</mi><mi>S</mi><mo separator=\"true\">,</mo><mi>M</mi><mi>E</mi><mi>M</mi><mo stretchy=\"false\">(</mo><msub><mi>e</mi><mi>a</mi></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>B</mi><mi>I</mi><mi>N</mi><mi>O</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mi>U</mi><mi>L</mi><mo separator=\"true\">,</mo><msub><mi>e</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><mi>C</mi><mi>O</mi><mi>N</mi><mi>S</mi><mi>T</mi><mo stretchy=\"false\">(</mo><mi>W</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">MEM(BINOP(PLUS, MEM(e_a), BINOP(MUL, e_i, CONST(W))))\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\">L</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<ul>\n<li><code>e_a</code>  是表示变量  <code>a</code>  的表达式，通常是 ==  <code>MEM(+(TEMP(fp), CONST(k_a)))</code> ==</li>\n<li><code>MEM(e_a)</code> ：<mark>获取存储在变量  <code>a</code>  中的值，即数组基地址</mark></li>\n<li><code>e_i</code>  是计算索引  <code>i</code>  的表达式</li>\n<li><code>BINOP(MUL, e_i, CONST(W))</code> ：计算偏移<br>\n<img data-src=\"f6.jpg\" alt></li>\n</ul>\n<p>记录字段 r.f 访问:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>M</mi><mi>E</mi><mi>M</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mi>I</mi><mi>N</mi><mi>O</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>P</mi><mi>L</mi><mi>U</mi><mi>S</mi><mo separator=\"true\">,</mo><mi>M</mi><mi>E</mi><mi>M</mi><mo stretchy=\"false\">(</mo><msub><mi>e</mi><mi>r</mi></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>B</mi><mi>I</mi><mi>N</mi><mi>O</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mi>U</mi><mi>L</mi><mo separator=\"true\">,</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>C</mi><mi>O</mi><mi>N</mi><mi>S</mi><mi>T</mi><mo stretchy=\"false\">(</mo><mi>W</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">MEM(BINOP(PLUS, MEM(e_r), BINOP(MUL, n, CONST(W))))\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\">L</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<ol start=\"4\">\n<li>翻译控制流<br>\n对于 if e1 op e2 then stmt1 else stmt2 翻译成</li>\n</ol>\n<figure class=\"highlight c\"><figcaption><span>IR</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 6个SEQ</span></span><br><span class=\"line\">SEQ(</span><br><span class=\"line\">    CJUMP(op, e1, e2, t, f),</span><br><span class=\"line\">    SEQ(</span><br><span class=\"line\">        LABEL(t),</span><br><span class=\"line\">        SEQ(</span><br><span class=\"line\">            stm1,</span><br><span class=\"line\">            SEQ(</span><br><span class=\"line\">                JUMP(NAME(end)),</span><br><span class=\"line\">                SEQ(</span><br><span class=\"line\">                    LABEL(f),</span><br><span class=\"line\">                    SEQ(stm2, LABEL(end))</span><br><span class=\"line\">                )</span><br><span class=\"line\">            )</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>Tiger 的逻辑运算符 &amp;(and) 和 |(or) 需要实现短路求值：只计算必要的操作数<br>\n每个 Cx 是一个 Label</p>\n<ul>\n<li>逻辑与 (a &amp; b) 的短路规则：\n<ul>\n<li>计算 a<br>\n - 若 a 为假，直接得到假结果（不计算 b）<br>\n- 若 a 为真，继续计算 b，最终结果即为 b 的值</li>\n</ul>\n</li>\n<li>逻辑或 (a | b) 的短路规则：<br>\n- 计算 a<br>\n - 若 a 为真，直接得到真结果（不计算 b）\n<ul>\n<li>若 a 为假，继续计算 b，最终结果即为 b 的值</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>循环语句</li>\n</ol>\n<figure class=\"highlight c\"><figcaption><span>tiger</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> a &gt; <span class=\"number\">0</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">a := a - <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>翻译成</p>\n<figure class=\"highlight c\"><figcaption><span>IR</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SEQ(LABEL test, </span><br><span class=\"line\">    SEQ(CJUMP(GT, TEMP a, CONST <span class=\"number\">0</span>, body, done), </span><br><span class=\"line\">        SEQ(LABEL body, </span><br><span class=\"line\">            SEQ(MOVE(TEMP a, BINOP(MINUS, TEMP a, CONST <span class=\"number\">1</span>)), </span><br><span class=\"line\">                SEQ(JUMP(NAME(test), [test]), </span><br><span class=\"line\">                    LABEL done)))))</span><br></pre></td></tr></table></figure>\n<p>break 翻译为直接跳转到 done<br>\nfor 循环我懒得写了，也是一个道理</p>\n<ol start=\"6\">\n<li>翻译函数</li>\n</ol>\n",
            "tags": [
                "中间代码"
            ]
        }
    ]
}