{
    "version": "https://jsonfeed.org/version/1",
    "title": "NoResponse's Blog • All posts by \"软件工程\" tag",
    "description": "成分复杂的CSer from ZJU",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/06/19/SE/diagram/",
            "url": "http://example.com/2025/06/19/SE/diagram/",
            "title": "画图题",
            "date_published": "2025-06-18T16:00:00.000Z",
            "content_html": "<ol>\n<li>用例图 Use Case Diagram<br>\nUse-Cases: A collection of user scenarios that describe the thread of usage of a system<br>\n 主要包含涉及的角色，角色对应的行为，第三方参与部分</li>\n</ol>\n<ul>\n<li>参与者：与系统交互的用户或其他软硬件系统，用小人形表示</li>\n<li>用例：系统中执行的一系列动作，用椭圆表示。</li>\n<li>关系参与者与用例、参与者之间、用例之间的联系。连线</li>\n<li>边界：一组用例描述的系统或子系统，用矩形框表示。</li>\n</ul>\n<details class=\"primary\"><summary>example: SafeHome</summary><div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"题目\">\n<p>Our research indicates that the market for home security systems is growing at a rate of 40% per year. We would like to enter this market by building a <mark>microprocessor-based</mark> home security system that would protect against and/or recognize a variety of <mark>undesirable situations</mark> such as illegal entry, fire, flooding, and others. The product will use appropriate <mark>sensors</mark> to detect each situation, can be programmed by the <mark>homeowner</mark>, and will automatically telephone a monitoring agency when a situation is detected.</p>\n</div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"答案\">\n<p><img data-src=\"useCase.jpg\" alt><br>\n我的理解是找到里面的人 (onwer, monitoring agency, 然后可以加个 administrator)，物件 (sensor)，中间的框是个系统，然后里面的椭圆写上对应的交互行为，连上线，感觉比较主观</p>\n</div>\n</div></details>\n<ol start=\"2\">\n<li>CRC Card<br>\n 每个卡片应该包含：类名，类的描述信息，职责，合作类</li>\n</ol>\n<details class=\"primary\"><summary>example</summary><div>\n<p><img data-src=\"CRC.jpg\" alt></p>\n</div></details>\n<ol start=\"3\">\n<li>类图 class diagram<br>\n 主要的信息：类名，属性 (name: type)，方法 (name (parameter): return type)</li>\n</ol>\n<details class=\"primary\"><summary>example</summary><div>\n<div class=\"tab\" data-id=\"id4\" data-title=\"例子1\">\n<p><img data-src=\"class.jpg\" alt></p>\n</div>\n<div class=\"tab\" data-id=\"id4\" data-title=\"例子2\">\n<p><img data-src=\"class2.jpg\" alt></p>\n</div>\n</div></details>\n<ol start=\"4\">\n<li>状态图 state diagram<br>\n<strong> 节点</strong>：开始状态，结束状态，状态<br>\n<strong>边</strong>：行为<br>\n状态：圆角矩形<br>\n转移：带有标记的箭头<br>\n初始状态：实心圆<br>\n终止状态：实心环<br>\n分支：菱形</li>\n</ol>\n<details class=\"primary\"><summary>example</summary><div>\n<p><img data-src=\"state.jpg\" alt></p>\n</div></details>\n<ol start=\"5\">\n<li>时序图 sequence diagram<br>\n 对象（参与者上面要画个人）、生命线（对象下面的虚线）、控制焦点、消息<br>\n<img data-src=\"seq.jpg\" alt><br>\n实心箭头表示同步消息：一个对象向另一个对象发出同步消息后，将处于阻塞状态，一直等到另一个对象的回应（图里面的请求是同步的）<br>\n简单箭头表示异步</li>\n</ol>\n<div class=\"note warning\">\n<p>箭头的画法存疑</p>\n</div>\n<ol start=\"6\">\n<li>\n<p>数据流图 data flow diagram<br>\n 外部实体（数据的原点和终点）：软件系统外部环境中的实体（包括人、组织或其他软件系统），用<mark>方框</mark><br>\n加工 Process：对数据进行处理的单元，比如内部的 xx 系统，用<mark>圆角矩形</mark>或椭圆<br>\n数据存储：数据库，用<mark>右侧开口的矩形或者左右开口的矩形</mark><br>\n数据流：箭头方向即数据流动方向，数据流名标在数据流线上面<br>\n看例子：<br>\n<img data-src=\"dataflow.jpg\" alt></p>\n</li>\n<li>\n<p>软件架构图 architecture<br>\n 以前后端分离的系统为例（前端，后端，数据库）<br>\n<img data-src=\"arch.jpg\" alt><br>\n三个大框分别是客户端、服务器、数据库层<br>\n里面小框，前端就是 Web app 和移动 app，后端就是各种系统，数据库就是各种数据库（表？）</p>\n</li>\n<li>\n<p>泳道图 Swimlane Diagram<br>\n 跨职能流程图。旨在展示工作流中每个步骤涉及的流程和职能部门。在表示 use-case 的同时，描述对活动负责的 actor/analysis class<br>\n 最上面放实体，然后分成一列一列，其他的和流程图一样<br>\n<img data-src=\"swim.jpg\" alt></p>\n</li>\n</ol>\n",
            "tags": [
                "软件工程"
            ]
        },
        {
            "id": "http://example.com/2025/06/19/SE/note/",
            "url": "http://example.com/2025/06/19/SE/note/",
            "title": "SE note",
            "date_published": "2025-06-18T16:00:00.000Z",
            "content_html": "<h1 id=\"ch2-software-engineering\"><a class=\"markdownIt-Anchor\" href=\"#ch2-software-engineering\">#</a> Ch2 Software Engineering</h1>\n<ul>\n<li>Definition: The application of a <mark>systematic</mark>, <mark>disciplined</mark>, <mark>quantifiable（可量化）</mark> approach to the <mark>development</mark>, <mark>operation</mark>, and <mark>maintenance</mark> of software</li>\n<li>软件工程是一个多层次的技术体系 (a layered technology)\n<ul>\n<li>从下往上是 a “quality” focus, process model, methods, tools, 反映了构建高质量软件产品的逻辑流程</li>\n</ul>\n</li>\n<li>软件过程（The Software Process）中的两个重要概念：通用过程框架（Common Process Framework）和 伞形活动（Umbrella Activities）\n<ul>\n<li>通用过程框架（Common Process Framework）： 软件开发过程中的一些基本要素\n<ul>\n<li>工作任务（work tasks）：指在软件开发的不同阶段中需要完成的具体任务。</li>\n<li>工作产品（work products）：指在执行工作任务过程中产生的各种文档、代码等成果物。</li>\n<li>里程碑与交付物（milestones &amp; deliverables）：里程碑是项目进展的重要节点，而交付物是在这些节点上需要提交的成果。</li>\n<li>质量保证检查点（QA checkpoints）：在整个开发过程中设置的检查点，用于评估和确保软件产品的质量。</li>\n</ul>\n</li>\n<li>伞形活动（Umbrella Activities）：软件开发过程中需要执行的活动\n<ul>\n<li>项目管理（Project management）：负责项目的规划、组织、协调和控制，确保项目按计划进行。</li>\n<li>质量保证（Quality assurance）：通过一系列措施确保软件产品的质量符合预定标准。</li>\n<li>工作产品生产（Work product production）：涉及创建和维护软件开发过程中产生的各种工作产品。</li>\n<li>测量（Measurement）：收集和分析数据以评估项目的状态和进度。</li>\n<li>正式技术评审（Formal technical reviews）：对软件的技术设计和实现进行系统性的审查。</li>\n<li>配置管理（Configuration management）：管理软件开发过程中各种配置项的变化，确保版本的一致性和可追溯性。</li>\n<li>重用管理（Reusability management）：促进软件组件和模块的重用，提高开发效率和软件质量。</li>\n<li>风险管理（Risk management）：识别、评估和应对可能影响项目成功的各种风险。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Generic Process Framework</strong> 通用的软件开发过程框架\n<ul>\n<li><strong>Communication</strong>: 与客户协作并收集需求</li>\n<li><strong>Planning</strong>: establishes engineering work plan, describes technical risks, lists resource requirements, work products produced, and defines work schedule</li>\n<li><strong>Modeling</strong>: 创建模型以帮助开发者和客户理解需求和设计</li>\n<li><strong>Construction</strong>: code &amp; test</li>\n<li><strong>Deployment</strong>: 交付软件供客户评估和反馈</li>\n</ul>\n</li>\n<li><strong>Process Adaptation</strong> 过程适配：根据项目的具体需求、限制条件和特点，对软件开发过程进行定制和调整\n<ul>\n<li>overall <mark>flow</mark> of activities, actions, and tasks and the interdependencies among them</li>\n<li>degree to which <mark>actions and tasks</mark> are defined within each framework activity</li>\n<li>degree to which <mark>work products</mark> are identified and required</li>\n<li>manner which <mark>quality assurance</mark> activities are applied</li>\n<li>manner in which <mark>project tracking and control</mark> activities are applied</li>\n<li>overall degree of <mark>detail and rigor</mark> with which the process is described</li>\n<li>degree to which the <mark>customer and other stakeholders</mark> are involved with the project</li>\n<li>level of autonomy given to the <mark>software team</mark></li>\n<li>degree to which <mark>team organization and roles</mark> are prescribed</li>\n</ul>\n</li>\n<li>The Essence of Practice\n<ul>\n<li><strong>Understand the problem</strong> (communication and analysis).</li>\n<li><strong>Plan a solution</strong> (modeling and software design).</li>\n<li><strong>Carry out the plan</strong> (code generation).</li>\n<li><strong>Examine the result for accuracy</strong> (testing and quality assurance).</li>\n</ul>\n</li>\n<li>General Principles 通用原则：软件开发过程中应遵循的一些核心指导思想或基本原则\n<ul>\n<li>The reason it all exists — Provide Value to users</li>\n<li>KISS — Keep It Simple, Stupid!</li>\n<li>Maintain the Vision</li>\n<li>What you produce, others will consume</li>\n<li>Be open to the future</li>\n<li>Plan ahead for reuse</li>\n<li>Think!</li>\n</ul>\n</li>\n<li>Software Development Myths 软件开发管理中常见的误解（Myth）及其背后的现实情况（Reality）\n<ul>\n<li>Management myths\n<ul>\n<li>标准和流程的有效性依赖于团队的理解和接受程度。</li>\n<li>软件开发是一个高度协作和复杂的创造性过程，简单地增加人力并不能解决进度问题。</li>\n<li>外包项目同样需要良好的管理和沟通能力，不能因为外包就忽视了对项目的控制和监督</li>\n</ul>\n</li>\n<li>Customer myths\n<ul>\n<li>详细的需求分析和规划</li>\n<li>充分的沟通与确认</li>\n<li>合理的进度评估</li>\n</ul>\n</li>\n<li>Practitioner’s myths\n<ul>\n<li>错误：一旦我们编写好程序并使其正常运行，我们的工作就完成了</li>\n<li>过早进入编码阶段可能会导致更多的返工和调整，从而延长项目周期</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"ch3-software-process-structure\"><a class=\"markdownIt-Anchor\" href=\"#ch3-software-process-structure\">#</a> Ch3 Software Process Structure</h1>\n<p>Umbrella Activities 是贯穿整个软件开发过程的活动，Framework Activity 是软件开发的核心阶段，如沟通、计划、建模、构建和部署，每个框架活动下都有具体的 task set，每个 task set 中又包含多个具体的 action</p>\n<ul>\n<li>\n<p><strong>Process flow</strong> 过程流（对于之前提到的 Generic Process Framework 的五步）</p>\n<ol>\n<li>线性过程流（Linear process flow）</li>\n<li>迭代过程流（Iterative process flow）</li>\n<li>演化过程流（Evolutionary process flow）</li>\n<li>并行过程流（Parallel process flow）<br>\n<img data-src=\"f1.jpg\" alt></li>\n</ol>\n</li>\n<li>\n<p><strong>Process Patterns</strong> 过程模式<br>\n Process patterns define a set of activities, actions, work tasks, work products and/or related behaviors<br>\n 提供了一种 <code>template</code>  用于定义模式<br>\n<strong> Generic software pattern elements</strong>:</p>\n</li>\n<li>\n<p>pattern name</p>\n</li>\n<li>\n<p>Intent (objective of pattern)</p>\n</li>\n<li>\n<p>Type (Task pattern, Stage pattern, Phase pattern)</p>\n</li>\n<li>\n<p>Initial context</p>\n</li>\n<li>\n<p>Solution</p>\n</li>\n<li>\n<p>Resulting context</p>\n</li>\n<li>\n<p>Related patterns</p>\n</li>\n<li>\n<p>Known uses/examples</p>\n</li>\n<li>\n<p><strong>Process Assessment</strong><br>\n 几种评估软件过程的方法：<br>\nSCAMPI (Standard CMMI Appraisal Method for Process Improvement)<br>\nSPICE (ISO/IEC 15504)<br>\nCBA IPI (Capability Benchmarking Appraisal using the Integrated Process Improvement method)<br>\nISO 9001:2000 for Software</p>\n</li>\n<li>\n<p>The Capability Maturity Model Integration 能力成熟度模型集成（CMMI）</p>\n<ul>\n<li>Level 0: Incomplete</li>\n<li>Level 1: Performed</li>\n<li>Level 2: Managed</li>\n<li>Level 3: Defined</li>\n<li>Level 4: Quantitatively Managed 定量管理</li>\n<li>Level 5: Optimizing</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"ch4-process-models\"><a class=\"markdownIt-Anchor\" href=\"#ch4-process-models\">#</a> Ch4 Process Models</h1>\n<h2 id=\"prescriptive-models\"><a class=\"markdownIt-Anchor\" href=\"#prescriptive-models\">#</a> Prescriptive Models</h2>\n<p>Prescriptive (规范的) process models advocate an orderly approach to software engineering</p>\n<ul>\n<li>The Waterfall Model: A reasonable approach when requirements are well defined<br>\n<img data-src=\"4-1.jpg\" alt></li>\n<li>The V Model<br>\n<img data-src=\"4-2.jpg\" alt></li>\n<li>Incremental Process Models 增量过程模型\n<ul>\n<li>The Incremental Model 增量模型：将整个系统划分为多个可交付的 “增量” 部分，每个增量都作为一个独立的小项目进行五步流程: A good approach when a working core product is required quickly<br>\n<img data-src=\"4-3.jpg\" alt></li>\n<li>The Rapid Application Development (RAD) Model 快速应用开发模型：短时间内交付功能完善的系统，communication 和 planning 之后分成好几个 team 进行 modeling 和 construction，最后合并 deployment<br>\n<img data-src=\"4-4.jpg\" alt></li>\n</ul>\n</li>\n<li>Evolutionary Process Models 进化式过程模型\n<ul>\n<li>Prototyping 原型化方法：当客户有明确的需求但不清楚具体细节时，通过原型，客户可以直观地看到系统的雏形并提出修改意见；原型通常是 “抛弃型” 的，即在验证概念后会被丢弃，而不是直接作为最终产品的一部分\n<ul>\n<li>Prototype Model: Communication, Quick Plan, Modeling &amp; Quick Design, Construction of prototype, Deployment Delivery &amp; Feedback</li>\n</ul>\n</li>\n<li>The Spiral Model 螺旋模型：螺旋模型将整个开发过程视为一个逐渐扩大的螺旋线，每个环代表一个开发阶段或迭代周期，在每一次迭代中都进行风险分析（Risk Analysis）<br>\n<img data-src=\"4-5.jpg\" alt></li>\n<li>The Concurrent Development Model 并行开发模型\n<ul>\n<li>并行开发模型定义了一系列 <code>事件</code> ，这些事件将触发每个活动、动作或任务 <code>从一个状态到另一个状态的转换</code></li>\n<li>Especially good for client/server applications</li>\n<li>并行开发模型定义了一个活动网络，而不是简单的线性事件序列</li>\n<li>需要在 Flexibility, Extensibility, Speed of development 和 high quality 中权衡</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"specialized-process-models-专业化的软件过程模型\"><a class=\"markdownIt-Anchor\" href=\"#specialized-process-models-专业化的软件过程模型\">#</a> Specialized Process Models 专业化的软件过程模型</h2>\n<ol>\n<li>Component-Based Development （强调 reuse）</li>\n<li>Formal methods （形式化方法强调使用数学手段来精确地描述需求）</li>\n<li>Aspect-Oriented Software Development （面向切面，切面指那些横跨多个模块或功能的通用关注点）</li>\n</ol>\n<h2 id=\"the-unified-process-统一过程\"><a class=\"markdownIt-Anchor\" href=\"#the-unified-process-统一过程\">#</a> The Unified Process 统一过程</h2>\n<p>统一过程是一种 “用例驱动、以架构为中心、迭代和增量” 的软件开发过程<br>\n A <mark>“use-case driven, architecture-centric, iterative and incremental”</mark> software process closely aligned with the Unified Modeling Language (UML)<br>\n<img data-src=\"4-6.png\" alt><br>\n 五个阶段: <mark>Inception, Elaboration, Construction, Transition, Production</mark></p>\n<h3 id=\"统一过程unified-process-up在各个阶段产生的工作产品work-products\"><a class=\"markdownIt-Anchor\" href=\"#统一过程unified-process-up在各个阶段产生的工作产品work-products\">#</a> 统一过程（Unified Process, UP）在各个阶段产生的工作产品（ <code>Work Products</code> ）</h3>\n<ol>\n<li>Inception Phase（启动阶段）<br>\nVision Document（愿景文档）：概述项目的总体目标、范围和预期结果。<br>\nInitial Use-case Model（初始用例模型）：描述系统的主要功能和用户交互场景。<br>\nInitial Project Glossary（初始项目术语表）：定义项目中使用的专业术语和缩写。<br>\nInitial Business Case（初始商业案例）：分析项目的商业价值和可行性。<br>\nInitial Risk Assessment（初始风险评估）：识别和评估项目可能面临的风险。<br>\nProject Plan Phases and Iterations（项目计划阶段和迭代）：制定项目的整体计划，包括阶段划分和迭代安排。<br>\nBusiness Model（业务模型）：描述项目的业务流程和商业模式。<br>\nPrototypes（原型）：创建系统的初步原型，用于验证需求和设计。</li>\n<li>Elaboration Phase（细化阶段）<br>\nUse-case Model（用例模型）：进一步完善和细化用例模型，明确系统功能。<br>\nFunctional and Non-functional Requirements（功能性与非功能性需求）：详细描述系统需要满足的功能性和非功能性要求。<br>\nAnalysis Model（分析模型）：基于需求分析建立的系统逻辑模型。<br>\nSoftware Architecture Description（软件架构描述）：定义系统的整体架构和关键组件。<br>\nExecutable Architectural Prototype（可执行架构原型）：实现一个可运行的架构原型，验证架构的可行性和性能。<br>\nPreliminary Design Model（初步设计模型）：基于架构描述进行初步的设计。<br>\nRevise Risk List（修订风险列表）：根据新的信息和发现更新风险评估。<br>\nProject Plan Iteration Plan, Workflow, Milestones（项目计划迭代计划、工作流、里程碑）：细化项目计划，包括具体的迭代安排、工作流程和关键里程碑。<br>\nPreliminary User Manual（初步用户手册）：编写系统的初步使用说明。</li>\n<li>Construction Phase（构建阶段）<br>\nDesign Model（设计模型）：完成详细的系统设计，包括模块设计和接口设计。<br>\nSoftware Components（软件组件）：开发和实现各个软件组件。<br>\nIntegrated Software Increment（集成软件增量）：将各个组件集成在一起，形成可运行的软件增量。<br>\nTest Plan（测试计划）：制定详细的测试计划，包括测试策略和资源安排。<br>\nTest Cases（测试用例）：编写具体的测试用例，用于验证系统功能和质量。<br>\nSupport Documentation User Installation Increment（支持文档用户安装增量）：编写用户安装和操作指南，帮助用户正确安装和使用系统。</li>\n<li>Transition Phase（过渡阶段）<br>\nDelivered Software Increment（交付的软件增量）：向用户交付经过测试和验证的软件增量。<br>\nBeta Test Reports（Beta 测试报告）：收集和整理 Beta 测试期间的反馈和问题报告。<br>\nUser Feedback（用户反馈）：收集用户的实际使用反馈，为后续改进提供依据。</li>\n<li>Production</li>\n</ol>\n<h3 id=\"个人软件过程personal-software-process-psp\"><a class=\"markdownIt-Anchor\" href=\"#个人软件过程personal-software-process-psp\">#</a> 个人软件过程（Personal Software Process, PSP）</h3>\n<p>Five Framework Activities:</p>\n<ol>\n<li>Planning</li>\n<li>High-Level Design</li>\n<li>High-Level Design Review</li>\n<li>Development</li>\n<li>Postmortem（事后分析）<br>\nStresses the Need for Error Identification and Understanding</li>\n</ol>\n<h3 id=\"团队软件过程team-software-process-tsp\"><a class=\"markdownIt-Anchor\" href=\"#团队软件过程team-software-process-tsp\">#</a> 团队软件过程（Team Software Process, TSP）</h3>\n<ol>\n<li>Each project is “launched” using a “script” that defines the tasks to be accomplished</li>\n<li>Teams are self-directed</li>\n<li>Measurement is encouraged</li>\n<li>Measures are analyzed with the intent of improving the team process</li>\n</ol>\n<h1 id=\"ch5-agile-development-敏捷开发\"><a class=\"markdownIt-Anchor\" href=\"#ch5-agile-development-敏捷开发\">#</a> Ch5 Agile Development 敏捷开发</h1>\n<p>What is Agility?</p>\n<ul>\n<li>Effective (rapid and adaptive) response to change</li>\n<li>Effective communication among all stakeholders</li>\n<li>Drawing the customer onto the team</li>\n<li>Organizing a team so that it is in control of the work performed</li>\n<li>Rapid, incremental delivery of software<br>\nAn Agile Process</li>\n<li>Is driven by customer descriptions of what is required (scenarios)</li>\n<li>Recognizes that plans are short-lived</li>\n<li>Develops software iteratively with a heavy emphasis on construction activities</li>\n<li>Delivers multiple ‘software increments’</li>\n<li>Adapts as changes occur</li>\n</ul>\n<p>Extreme Programming 极限编程 (XP): <mark>planning, design, coding, testing</mark><br>\nXP plan:</p>\n<ul>\n<li>begin with user stories</li>\n<li>assigns a cost</li>\n<li>Stories are grouped to for a deliverable increment</li>\n<li>commitment</li>\n<li>project velocity<br>\n<img data-src=\"5-1.png\" alt></li>\n</ul>\n<p>Industrial XP (IXP)<br>\nIXP incorporates six new practices:</p>\n<ul>\n<li>Readiness assessment 准备评估</li>\n<li>Project community 项目社区</li>\n<li>Project chartering 项目章程制定</li>\n<li>Test driven management 测试驱动管理</li>\n<li>Retrospectives 团队自省</li>\n<li>Continuous learning  持续学习</li>\n</ul>\n<p>Scrum 一种流行的敏捷开发框架</p>\n<ul>\n<li>Development work is partitioned into “packets”</li>\n<li>Testing and documentation are on-going (测试和文档贯穿开发流程)</li>\n<li>Work occurs in “sprints” and is derived from a “backlog” (Sprint 是 Scrum 的核心时间单位，通常为 1 到 4 周)</li>\n<li>Meetings are very short 高效沟通（三个问题：What did you do since the last meeting/ What do you plan to accomplish by the next team meeting/What obstacles are you encountering）</li>\n<li>“demos” are delivered to the customer with the time-box allocated</li>\n</ul>\n<p>Dynamic Systems Development Method  - DSDM<br>\n 帕累托原则（Pareto Principle），也称为 80/20 法则<br>\n “80% 的价值来自 20% 的功能”，或者 “80% 的系统可以在 20% 的时间内交付”<br>\nDSDM 的核心理念之一就是：优先交付最有价值的功能</p>\n<p>Agile Modeling ( <code>AM</code> ) principals:</p>\n<ul>\n<li>Model with a purpose</li>\n<li>Use multiple models</li>\n<li>Travel light</li>\n<li>Content is more important than representation</li>\n<li>Know the models and the tools you use to create them</li>\n<li>Adapt locally</li>\n</ul>\n<p>Agile Unified Process ( <code>AUP</code> ) 敏捷统一流程：一个精简的软件开发过程<br>\n Each AUP iteration addresses these activities:</p>\n<ul>\n<li>Modeling</li>\n<li>Implementation</li>\n<li>Testing</li>\n<li>Deployment</li>\n<li>Configuration and project management</li>\n<li>Environment management</li>\n</ul>\n<h1 id=\"ch6-human-aspects-of-software-engineering\"><a class=\"markdownIt-Anchor\" href=\"#ch6-human-aspects-of-software-engineering\">#</a> Ch6 Human Aspects of Software Engineering</h1>\n<p>Traits of Successful Software Engineers: 责任感、对需求敏感、直言不讳、有弹性 (Resilient under pressure)、公平意识、注重细节、务实 (Pragmatic)<br>\n The Psychology Of Software Engineering 没看懂不管了<br>\n Effective Software Team Attributes</p>\n<ul>\n<li>Sense of purpose</li>\n<li>Sense of involvement</li>\n<li>Sense of trust</li>\n<li>Sense of improvement</li>\n<li>Diversity of team member skill sets<br>\nAvoid Team “Toxicity” 毒性<br>\n A frenzied work atmosphere, high frustication, Fragmented or poorly coordinated procedures (或者定义不当的模型), Unclear definition of roles, Continuous and repeated exposure to failure</li>\n</ul>\n<p>Factors Affecting Team Structure</p>\n<ul>\n<li>difficulty of the problem</li>\n<li>size of the resultant program(s)</li>\n<li>the time that the team will stay together</li>\n<li>the degree to which the problem can be modularized</li>\n<li>the required quality and reliability of the system</li>\n<li>the rigidity of the delivery date 交付日期是不是很死</li>\n<li>the degree of sociability required</li>\n</ul>\n<p>Organizational Paradigms 组织范式</p>\n<ul>\n<li>Closed paradigm</li>\n<li>Random paradigm</li>\n<li>Open paradigm</li>\n<li>Synchronous paradigm</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>范式</th>\n<th>组织方式</th>\n<th>控制程度</th>\n<th>创新程度</th>\n<th>沟通频率</th>\n<th>适用项目类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Closed</strong></td>\n<td>层级权威</td>\n<td>高</td>\n<td>低</td>\n<td>自上而下</td>\n<td>传统行业、安全关键系统</td>\n</tr>\n<tr>\n<td><strong>Random</strong></td>\n<td>松散自由</td>\n<td>低</td>\n<td>高</td>\n<td>无固定模式</td>\n<td>初创项目、探索性任务</td>\n</tr>\n<tr>\n<td><strong>Open</strong></td>\n<td>半结构化</td>\n<td>中等</td>\n<td>高</td>\n<td>高频协作</td>\n<td>敏捷开发、创新型项目</td>\n</tr>\n<tr>\n<td><strong>Synchronous</strong></td>\n<td>模块化分工</td>\n<td>高</td>\n<td>中等</td>\n<td>极少</td>\n<td>分布式系统、大型项目</td>\n</tr>\n</tbody>\n</table>\n<p>Generic Agile Teams（通用敏捷团队）</p>\n<ul>\n<li>individual competency coupled with group collaboration</li>\n<li>People trump process and politics can trump people</li>\n<li>self-organizing and have many structures</li>\n<li>Planning is kept to a minimum 不反对规划，但强调 “轻量级规划” 比如 Sprint</li>\n</ul>\n<p>XP Team Values</p>\n<ul>\n<li>Communication</li>\n<li>Simplicity: design for immediate needs nor future needs</li>\n<li>Feedback</li>\n<li>Courage</li>\n<li>Respect</li>\n</ul>\n<p>Impact of Social Media</p>\n<p>Software Engineering using the Cloud</p>\n<p>协作工具：Services of collaborative development environments (CDEs)<br>\n Namespace, Calendar, Template, Metrics support (Metrics 应用于过程改进，而不是人员奖惩), Communication analysis, Artifact clustering 归类</p>\n<p>Team Decisions Making Complications<br>\n<img data-src=\"6-1.jpg\" alt></p>\n<h1 id=\"ch7-principles-that-guide-practice\"><a class=\"markdownIt-Anchor\" href=\"#ch7-principles-that-guide-practice\">#</a> Ch7 Principles that Guide Practice</h1>\n<p>Software development knowledgehave about a three year half-life, Software engineering principles 是永久的</p>\n<p>Principles that Guide Process:</p>\n<ol>\n<li>Be agile</li>\n<li>Focus on quality at every step</li>\n<li>Be ready to adapt</li>\n<li>Build an effective team</li>\n<li>Establish mechanisms for communication and coordination</li>\n<li>Manage change</li>\n<li>Assess risk</li>\n<li>Create work products that provide value for others</li>\n</ol>\n<p>Principles that Guide Practice:</p>\n<ol>\n<li>Divide and conquer</li>\n<li>Understand the use of abstraction</li>\n<li>Strive for consistency</li>\n<li>Focus on the transfer of information 注意接口的设计</li>\n<li>Build software that exhibits effective modularity</li>\n<li>Look for patterns</li>\n<li>When possible, represent the problem and its solution from a number of different perspectives</li>\n<li>Remember that someone will maintain the software</li>\n</ol>\n<p>Communication Principle：</p>\n<ol>\n<li>Listen</li>\n<li>Prepare before you communicate</li>\n<li>Someone should facilitate the activity</li>\n<li>Face-to-face communication is best</li>\n<li>Take notes and document decisions</li>\n<li>Strive for collaboration</li>\n<li>Stay focused, modularize your discussion</li>\n<li>If something is unclear, draw a picture</li>\n<li>不管怎样，Move on</li>\n<li>Nigotiation (谈判) works best when both parties win</li>\n</ol>\n<p>Planning Principles：<br>\n懒得写了考了我吃</p>\n<p>Modeling Principles： 创建两类模型</p>\n<ol>\n<li>Requirements models (also called analysis models) 需求模型</li>\n<li>Design models 设计模型</li>\n</ol>\n<p>Agile Modeling Principles 记不住，懒得写了再说</p>\n<p>Requirements Modeling Principles</p>\n<ol>\n<li>The information domain of a problem must be represented and understood  对问题领域内信息的全面了解是构建有效软件的基础</li>\n<li>The functions that the software performs must be defined  定义软件的功能，明确描述软件应提供的功能和服务</li>\n<li>The behavior of the software (as a consequence of external events) must be represented  定义软件的行为，如何响应外界事件或输入</li>\n<li>The models that depict information, function, and behavior must be partitioned in a manner that uncovers detail in a layered (or hierarchical) fashion  使用结构化的、分层次的方法来组织模型</li>\n<li>The analysis task should move from essential information toward implementation detail  先关注核心需求和架构设计，再细化到具体的实现方案</li>\n</ol>\n<p>Design Modeling Principles<br>\n 太多了懒得看</p>\n<p>Living Modeling Principles<br>\n 懒得看</p>\n<p>Construction Principles</p>\n<ul>\n<li>The construction activity encompasses a set of coding and testing tasks</li>\n<li><code>Coding principles and concepts</code>  are closely aligned programming style, programming languages, and programming methods</li>\n<li><code>Testing principles and concepts</code>  lead to the design of tests that systematically uncover different classes of errors and to do so with a minimum amount of time and effort</li>\n</ul>\n<p>… 一堆 principle，看了也记不住，不看了</p>\n<h1 id=\"ch8-understanding-requirements\"><a class=\"markdownIt-Anchor\" href=\"#ch8-understanding-requirements\">#</a> Ch8 Understanding Requirements</h1>\n<p>Requirements Engineering:</p>\n<ol>\n<li>Inception: ask a set of questions – basic understanding of the problem, the people who want a solution, the nature of the solution, the effectiveness of preliminary communication and collaboration</li>\n<li>Elicitation: elicit requirements</li>\n<li>Elaboration: create an analysis model</li>\n<li>Negotiation: agree on a deliverable system</li>\n<li>Specification: written document/set of models/formal mathematical/use-cases/prototype</li>\n<li>Validation: a review mechanism that looks for – errors in content or interpretation/areas where clarification may be required/missing information/inconsistencies/conflicting or unrealistic (unachievable) requirements</li>\n<li>Requirements management</li>\n</ol>\n<p>Elicitation Work Products:<br>\nfeasibility, scope, stakeholders, description of environment, constraints, usage scenarios, prototypes</p>\n<p>Negotiating Requirements:</p>\n<ol>\n<li>Identify the key stakeholders</li>\n<li>Determine each of the stakeholders “win conditions”</li>\n<li>Negotiate</li>\n</ol>\n<p>Requirements Monitoring:</p>\n<ol>\n<li>Distributed debugging</li>\n<li>Run-time verification</li>\n<li>Run-time validation</li>\n<li>Business activity monitoring</li>\n<li>Evolution and co-design</li>\n</ol>\n<p>Validating Requirements:<br>\nconsistent, 是否在 level of abstraction 规定了，是否 essential, unambiguous, 每个要求注明来源，requirements 之间是否 conflict, achievable, testable, properly reflect the information, function and behavior, partitioned 方式，…</p>\n<p>Quality Function Deployment (QFD):</p>\n<ul>\n<li>Function deployment</li>\n<li>Information deployment</li>\n<li>Task deployment</li>\n<li>Value analysis</li>\n<li>identifies three types of requirements: Normal/Expected/Exciting</li>\n</ul>\n<p>Non-Functional Requirement (NFR): quality attribute, performance attribute, security attribute, or general system constraint</p>\n<ol>\n<li>The first phase is to create a matrix using each NFR</li>\n<li>The second phase is for the team to prioritize each NFR using a set of decision rules</li>\n</ol>\n<h1 id=\"ch9-requirements-modelingscenario-based-methods-基于场景的需求建模方法\"><a class=\"markdownIt-Anchor\" href=\"#ch9-requirements-modelingscenario-based-methods-基于场景的需求建模方法\">#</a> Ch9 Requirements Modeling：Scenario-Based Methods 基于场景的需求建模方法</h1>\n<p>需求分析的目标：</p>\n<ul>\n<li>描述客户所需的内容 Describe what the customer requires</li>\n<li>为软件设计提供基础 Establish a basis for the creation of a software design</li>\n<li>定义一组可以验证的需求 Define a set of requirements that can be validated<br>\nRules of Thumb（基本原则）：</li>\n<li>The model should focus on requirements that are visible within the problem or business domain. The level of abstraction should be relatively high.</li>\n<li>Each element of the analysis model should add to an overall understanding of software requirements and provide insight into the information domain, function and behavior of the system.</li>\n<li>Delay consideration of infrastructure and other non-functional models until design.</li>\n<li>Minimize coupling throughout the system.</li>\n<li>Be certain that the analysis model provides value to all stakeholders.</li>\n<li>Keep the model as simple as it can be.</li>\n</ul>\n<p>Domain Analysis（领域分析）：<br>\nSoftware domain analysis is the identification, analysis, and specification of common requirements from a specific application domain, typically for reuse on multiple projects within that application domain…</p>\n<p>Use-Case Diagram, Activity Diagrams, Swim Lane Diagrams</p>\n<h1 id=\"ch10-requirements-modeling-class-based-methods\"><a class=\"markdownIt-Anchor\" href=\"#ch10-requirements-modeling-class-based-methods\">#</a> Ch10 Requirements Modeling: Class-Based Methods</h1>\n<p>Class-Based 需求建模的方法：structured analysis, object- oriented analysis<br>\nClass-Based Modeling: objects, operations, relationships, collaborations<br>\n 类图<br>\n CRC Cards<br>\n 见画图题</p>\n<h1 id=\"ch11-requirements-modeling-behavior-patterns-and-webmobile-apps\"><a class=\"markdownIt-Anchor\" href=\"#ch11-requirements-modeling-behavior-patterns-and-webmobile-apps\">#</a> Ch11 Requirements Modeling: Behavior, Patterns, and Web/Mobile Apps</h1>\n<p>行为建模: use-cases, events, sequences, state diagram, 审查<br>\n行为建模三种图：state diagram, sequence diagram, data-flow diagram</p>\n<h2 id=\"requirements-modeling-for-webapps\"><a class=\"markdownIt-Anchor\" href=\"#requirements-modeling-for-webapps\">#</a> Requirements Modeling for WebApps:</h2>\n<ul>\n<li>内容分析 Content Analysis：描述文本、图形和图像、视频、音频等。</li>\n<li>交互分析 Interaction Analysis：使用案例。</li>\n<li>功能分析 Functional Analysis：定义应用于 WebApp 内容的操作，暗示其他处理功能。</li>\n<li>配置分析 Configuration Analysis：环境和基础设施。</li>\n<li>导航分析 Navigation Analysis：关注总体要求。</li>\n</ul>\n<p>配置模型 Configuration Model</p>\n<ul>\n<li>服务器端 Server-side：必须指定服务器硬件和操作系统环境、考虑服务器端互操作性、指定适当的接口、通信协议及相关协作信息。</li>\n<li>客户端 Client-side：必须识别浏览器配置问题、定义测试要求。</li>\n</ul>\n<p>导航建模 Navigation Modeling</p>\n<ul>\n<li>考虑哪些元素应更容易到达（需要更少的导航步骤），优先级如何？</li>\n<li>如何处理导航错误？</li>\n<li>是否应该通过链接、基于搜索的访问或其他方式完成导航？</li>\n<li>是否应根据之前导航动作的上下文向用户展示某些元素？</li>\n<li>是否应维护用户的导航日志？</li>\n</ul>\n<h1 id=\"ch12-design-concepts\"><a class=\"markdownIt-Anchor\" href=\"#ch12-design-concepts\">#</a> Ch12 Design Concepts</h1>\n<p>好的软件设计应该具备：坚固性 Firmness, 实用性 Commodity, 愉悦感 Delight<br>\nSoftware Engineering Design：设计原则与质量</p>\n<ul>\n<li>Data/Class design</li>\n<li>Architectural design</li>\n<li>Interface design</li>\n<li>Component-level design</li>\n</ul>\n<p>Analysis Model -&gt; Design Model（需求模型到设计模型）</p>\n<ul>\n<li>设计必须实施分析模型中包含的所有显式需求 (explicit requirements)，并适应客户希望的所有隐式需求。</li>\n<li>设计应当是可读且易于理解 (readable, understandable guide) 的指南，帮助编写代码的人以及测试和支持软件的人。</li>\n<li>设计应该提供软件的完整画面 (a complete picture)，从实现的角度解决数据、功能和行为领域的问题<br>\n<img data-src=\"12-1.jpg\" alt></li>\n</ul>\n<p>质量指南 Quality Guidelines</p>\n<ul>\n<li>设计应展示一种使用公认的架构风格创建的架构。</li>\n<li>设计应由展现良好设计特性的组件组成。</li>\n<li>设计可以逐步实现。</li>\n<li>设计应模块化，即将软件逻辑划分为元素或子系统。</li>\n<li>设计应包含数据、架构、接口和组件的不同表示形式</li>\n</ul>\n<p>设计原则 Design Principles</p>\n<ul>\n<li>设计过程不应有 “隧道视野”，即应全面考虑各种因素。</li>\n<li>设计应可追溯到分析模型。</li>\n<li>设计不应重新发明轮子（即不应重复已有的解决方案）。</li>\n<li>设计应 “最小化软件与现实世界中存在的问题之间的智力距离”。</li>\n<li>设计应统一且整合。</li>\n<li>设计应能够适应变化。</li>\n<li>设计应以温和的方式降级，即使遇到异常数据、事件或操作条件。</li>\n</ul>\n<p>OO Design Concepts: Design classes(Entity classes, Boundary classes, Controller classes), Inheritance, Messages, Polymorphism</p>\n<div class=\"note warning\">\n<p>后面看不下去先不管了</p>\n</div>\n<h1 id=\"ch13-architectural-design\"><a class=\"markdownIt-Anchor\" href=\"#ch13-architectural-design\">#</a> Ch13 Architectural Design</h1>\n<p>架构风格：</p>\n<ul>\n<li>Data-centered architectures</li>\n<li>Data flow architectures</li>\n<li>Call and return architectures</li>\n<li>Object-oriented architectures</li>\n<li>Layered architectures</li>\n</ul>\n<h1 id=\"ch14-component-level-design\"><a class=\"markdownIt-Anchor\" href=\"#ch14-component-level-design\">#</a> Ch14 Component-Level Design</h1>\n<p>Component: a modular, deployable, and replaceable part of a system<br>\nOO 角度：一个组件包含一组协作类<br>\n传统角度：数据结构和接口<br>\n Basic Design Principles：OCP, LSP, DIP, ISP, REP, CCP, CRP</p>\n<ul>\n<li>Open-Closed Principle: 开放扩展，关闭修改</li>\n<li>Liskov Substitution Principle: 子类可被父类替换</li>\n<li>Dependency Inversion Principles: 依赖抽象，不要依赖具体实现</li>\n<li>Interface Segregation Principle: 多个特定于客户端的接口比一个通用接口更好</li>\n<li>Release Reuse Equivalency Principle: 发布的粒度是重用的粒度</li>\n<li>Common Closure Principle: 一起变化的类应该放在一起</li>\n<li>Common Reuse Principle: 不一起重用的类不应放在一起</li>\n</ul>\n<p>基本设计原则（Basic Design Principles）:</p>\n<ol>\n<li>命名约定 Components</li>\n<li>接口 Interfaces</li>\n<li>依赖关系和继承：建议从左到右建模依赖关系，从底向上（派生类）到底部（基类）建模继承关系</li>\n</ol>\n<p>设计指南（Design Guidelines）:<br>\n 单一职责原则 Cohension<br>\n 耦合度级别：内容耦合、公共耦合、控制耦合等 Coupling</p>\n<p>WebApps 组件设计：通常包含 content design and functional design<br>\n…</p>\n<h1 id=\"ch15-user-interface-design\"><a class=\"markdownIt-Anchor\" href=\"#ch15-user-interface-design\">#</a> Ch15 User Interface Design</h1>\n<p>Golden Rule：</p>\n<ol>\n<li>Place the user in control</li>\n<li>Reduce the user’s memory load</li>\n<li>Make the interface consistent<br>\nUser Interface Design Model:</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>模型名称</th>\n<th>中文解释</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>User Model</td>\n<td>用户模型</td>\n<td>描述用户是谁、他们的需求和行为</td>\n</tr>\n<tr>\n<td>Design Model</td>\n<td>设计模型</td>\n<td>将用户模型转化为界面设计方案</td>\n</tr>\n<tr>\n<td>Mental Model</td>\n<td>心理模型</td>\n<td>用户对界面的主观理解和预期</td>\n</tr>\n<tr>\n<td>Implementation Model</td>\n<td>实现模型</td>\n<td>开发者实际构建的界面及其交互逻辑</td>\n</tr>\n</tbody>\n</table>\n<p>User Interface Design Process: 螺旋模型</p>\n<p>Interface Analysis<br>\nInterface Analysis 旨在理解以下几点：people (user), task, content, environment</p>\n<h1 id=\"ch16-pattern-based-design\"><a class=\"markdownIt-Anchor\" href=\"#ch16-pattern-based-design\">#</a> Ch16 Pattern-Based Design</h1>\n<p>A design pattern is a three-part rule which expresses a relation between a certain <mark>context</mark>, a <mark>problem</mark>, and a <mark>solution</mark>.</p>\n<p>Describing a Pattern: By detailing various dimensions such as pattern name, problem, motivation, context, forces, solution, intent, collaborations, consequences, implementation, known uses, related patterns, etc.</p>\n",
            "tags": [
                "软件工程"
            ]
        }
    ]
}