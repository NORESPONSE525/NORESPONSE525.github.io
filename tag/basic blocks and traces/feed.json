{
    "version": "https://jsonfeed.org/version/1",
    "title": "NoResponse's Blog • All posts by \"basic blocks and traces\" tag",
    "description": "成分复杂的CSer from ZJU",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/06/17/computer-science/compile-principles/ch8/",
            "url": "http://example.com/2025/06/17/computer-science/compile-principles/ch8/",
            "title": "Basic Blocks & Traces",
            "date_published": "2025-06-16T16:00:00.000Z",
            "content_html": "<h1 id=\"Basic-Blocks-and-Traces\"><a href=\"#Basic-Blocks-and-Traces\" class=\"headerlink\" title=\"Basic Blocks and Traces\"></a>Basic Blocks and Traces</h1><h2 id=\"Canonical-Form\"><a href=\"#Canonical-Form\" class=\"headerlink\" title=\"Canonical Form\"></a>Canonical Form</h2><p>IR存在一些与机器语言不能完全对应的情况，和与编译优化分析相冲突的情况。</p>\n<ul>\n<li>CJUMP能够转移到t或者f，但是真正的机器语言在条件为假的时候直接下降至下一条指令（条件为真才跳转）</li>\n<li>在表达式中使用ESEQ不太方便，会使子树不同的计算顺序产生不同的计算结果</li>\n<li>CALL调用CALL作为参数的时候会有寄存器冲突、语句副作用（修改全局变量、改变堆内存, etc.）等问题</li>\n</ul>\n<p>三种方法：</p>\n<ol>\n<li>Linearize: Transform trees into a list of canonical<br>trees without SEQ or ESEQ nodes</li>\n<li>Basic blocks: Group statements into sequences with<br>no internal jumps&#x2F;labels</li>\n<li>Trace schedule: Order basic blocks so every CJUMP is followed by its false label</li>\n</ol>\n<h3 id=\"线性化\"><a href=\"#线性化\" class=\"headerlink\" title=\"线性化\"></a>线性化</h3><p>&#x3D;&#x3D;规范树（Canonical Tree）定义：&#x3D;&#x3D;</p>\n<ol>\n<li>无SEQ或ESEQ</li>\n<li>每一个CALL的父亲不是EXP(…)就是MOVE(TEMP t, …)</li>\n</ol>\n<h4 id=\"消除ESEQ\"><a href=\"#消除ESEQ\" class=\"headerlink\" title=\"消除ESEQ\"></a>消除ESEQ</h4><h5 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h5><p>合并副作用，提升ESEQ：</p>\n<ul>\n<li>ESEQ(s1, ESEQ(s2,e)) &#x3D;&gt; ESEQ(SEQ(s1,s2),e)</li>\n<li>BINOP(op, ESEQ(s, e1), e2) ⇒ ESEQ(s, BINOP(op, e1, e2))</li>\n<li>MEM(ESEQ(s, e1)) ⇒ ESEQ(s, MEM(e1))</li>\n<li>JUMP(ESEQ(s, e1)) ⇒ SEQ(s, JUMP(e1))</li>\n<li>CJUMP(op, ESEQ(s, e1), e2, l1, l2) ⇒ SEQ(s, CJUMP(op, e1, e2, l1, l2))</li>\n</ul>\n<h5 id=\"Commutativity（重点）\"><a href=\"#Commutativity（重点）\" class=\"headerlink\" title=\"Commutativity（重点）\"></a>Commutativity（重点）</h5><p>当<code>ESEQ</code>出现在<code>BINOP</code>的右操作数，即$BINOP(op, e1, ESEQ(s, e2))$时，我们不能再像之前那样简单地把<code>s</code>提升到整个<code>BINOP</code>之前，因为<code>e1</code>的求值在<code>e2</code>之前，否则可能影响<code>e1</code>的计算结果</p>\n<p>Commutativity：交换性</p>\n<ul>\n<li>Commuting: s不影响e1的结果<ul>\n<li>rule: $BINOP(op, e1, ESEQ(s, e2)) &#x3D; ESEQ(s, BINOP(op, e1, e2))$</li>\n</ul>\n</li>\n<li>Non-commuting: s会影响e1的结果，把e1的结果显算出来放到临时变量t里，再提升s<ul>\n<li>rule: $BINOP(op, ESEQ(s, e1), e2) &#x3D; ESEQ(MOVE(TEMP t, e1), ESEQ(s, BINOP(op, TEMP t, e2)))$</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"将CALL移到顶层\"><a href=\"#将CALL移到顶层\" class=\"headerlink\" title=\"将CALL移到顶层\"></a>将CALL移到顶层</h4><p>方法：立即将每一个返回值赋给一个新的临时寄存器<br>$$<br>CALL(fun, args) ⇒ ESEQ(MOVE(TEMP t, CALL(fun, args)), TEMP t)<br>$$</p>\n<h4 id=\"消除SEQ\"><a href=\"#消除SEQ\" class=\"headerlink\" title=\"消除SEQ\"></a>消除SEQ</h4><p>$$<br>SEQ(SEQ(a, b), c) &#x3D; SEQ(a, SEQ(b, c))<br>$$<br>把SEQ变成一个线性语句表：$SEQ(s_1, SEQ(s_2, …, SEQ(s_{n-1}, s_n) …))$<br>就可以认为是由语句组成的简单列表$s_1, s_2, …, s_n$</p>\n<h3 id=\"处理CJUMP\"><a href=\"#处理CJUMP\" class=\"headerlink\" title=\"处理CJUMP\"></a>处理CJUMP</h3><p>重排CJUMP，使得每个$CJUMP(op, e_1, e_2, l_t, l_f)后面都紧跟着$LABEL(l_f)$<br>分两步：1. 取一列canonical tree由它们形成basic block 2. 对basic block进行排序形成trace</p>\n<h4 id=\"Basic-Block\"><a href=\"#Basic-Block\" class=\"headerlink\" title=\"Basic Block\"></a>Basic Block</h4><p>一个基本块是一段连续的指令序列，即:</p>\n<ul>\n<li>第一个语句是一个<code>LABEL</code></li>\n<li>最后一个语句是<code>JUMP</code>或<code>CJUMP</code></li>\n<li>没有其他的<code>LABEL</code>, <code>JUMP</code>或<code>CJUMP</code><br>划分方法：</li>\n</ul>\n<ol>\n<li>每一个<code>LABEL</code>都对应一个基本块的开始</li>\n<li>每一个<code>JUMP</code>或<code>CJUMP</code>都对应一个基本块的结束</li>\n<li>如果遇到<code>LABEL1</code> -&gt; <code>LABEL2</code>,就在<code>LABEL2</code>前面加一个<code>JUMP</code>到<code>LABEL2</code></li>\n<li>如果遇到开头没有<code>LABEL</code>的，则加一个<code>LABEL</code>（比如程序的开头）</li>\n<li>出口处理：添加一个LABEL <code>done</code>表示出口处理的开始，并把$JUMP done$放最后一个block末尾</li>\n</ol>\n<h4 id=\"Trace\"><a href=\"#Trace\" class=\"headerlink\" title=\"Trace\"></a>Trace</h4><p>现在我们可以按任意顺序来安排这些基本块，并且程序执行的结果仍是相同的——因为无论怎么排序，每个基本块的末尾都能转移到一个正确的位置。我们可以利用这一点来选择适当的基本块排列顺序，以满足每个<code>CJUMP</code>之后都跟随它的false标号这一条件。<br>与此同时，我们也可以安排基本块使得无条件转移<code>JUMP</code>之后直接跟随的是它们的目标标号。这样便可以删除这些无条件转移，从而使编译生成的程序的执行速度更快。</p>\n<p>把basic block排成trace的方法也很简单：&#x3D;&#x3D;从每个基本块开始，追踪JUMP链，标记遇到的每一个未标记的基本快并添加到当前trace中，最终到达一个其后继都标记过的块，就是结束块。之后再选则一个未标记的基本块开始，重复上述过程。&#x3D;&#x3D;</p>\n<p>因为轨迹调度不可能覆盖所有情况，所以：</p>\n<ol>\n<li>如果CJUMP 后跟 true label: 条件取反，交换 true&#x2F;false，改成：<br>$$<br>CJUMP(!cond, lf, lt)<br>$$</li>\n<li>CJUMP 后跟的不是 true 也不是 false: 创建中间 label，插入 JUMP<br>$$<br>CJUMP(cond, lt, lf) &#x3D;&gt; CJUMP(cond, lt, l’f) LABEL l’f   JUMP NAME(lf)<br>$$</li>\n</ol>\n<h4 id=\"最优轨迹-Optimal-Trace\"><a href=\"#最优轨迹-Optimal-Trace\" class=\"headerlink\" title=\"最优轨迹(Optimal Trace)\"></a>最优轨迹(Optimal Trace)</h4><p>对于basic block可能有不同的trace划分方法</p>\n<ul>\n<li>Hot Path Prioritization（优先热路径）: 优先将**运行频率高的基本块（hot blocks）**合并在同一条轨迹（trace）里，减少跳转，提高局部性。<br>+++info example<br>假设 if-else 中 if 分支占 90% 执行概率，else 只有 10%：</li>\n</ul>\n<figure class=\"highlight c\"><figcaption><span>tiger</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span> then</span><br><span class=\"line\">    a := a + <span class=\"number\">1</span>   -- 热路径</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    a := a - <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>生成时应把 x &gt; 0 为真的路径（包括 CJUMP 的 false 分支）安排成 fall-through，避免跳转开销出现在热路径上。<br>+++</p>\n<ul>\n<li>Locality Enhancement（增强局部性）: 把逻辑上相关联的代码块放得更近一些，让它们在内存中“邻近”。<ul>\n<li>原因：<ul>\n<li>更好地利用 CPU cache、预取机制。</li>\n<li>避免指令 cache miss 导致性能下降。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>比如：将循环体和循环条件代码块排在一起（而不是让条件跳到远处），从而保持指令流顺序性。</p>\n<ul>\n<li>Jump Minimization（最小化跳转）: 尽量减少无条件跳转（JUMP）和不必要的条件跳转（CJUMP），尤其在常走路径上，\t减少分支预测失败。</li>\n</ul>\n<p><img data-src=\"/f1.jpg\"><br>哪个划分比较好？<br>根据3，c比a好；</p>\n",
            "tags": [
                "Basic Blocks and Traces"
            ]
        }
    ]
}