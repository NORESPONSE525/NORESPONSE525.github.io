<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>NoResponse&#39;s Blog • Posts by &#34;指令&#34; tag</title>
        <link>http://example.com</link>
        <description>成分复杂的CSer from ZJU</description>
        <language>en</language>
        <pubDate>Fri, 01 Aug 2025 00:00:00 +0800</pubDate>
        <lastBuildDate>Fri, 01 Aug 2025 00:00:00 +0800</lastBuildDate>
        <category>人工智能</category>
        <category>软件工程</category>
        <category>编译原理</category>
        <category>Register Allocation</category>
        <category>词法分析</category>
        <category>语法分析</category>
        <category>Liveness Analysis</category>
        <category>抽象语法</category>
        <category>活动记录</category>
        <category>中间代码</category>
        <category>语义分析</category>
        <category>Basic Blocks and Traces</category>
        <category>指令选择</category>
        <category>计算机网络</category>
        <category>计算机组成</category>
        <category>数据的表示与运算</category>
        <category>存储系统</category>
        <category>指令</category>
        <category>错题</category>
        <item>
            <guid isPermalink="true">http://example.com/2025/08/01/computer-science/computer-organization/ch4/</guid>
            <title>Ch4</title>
            <link>http://example.com/2025/08/01/computer-science/computer-organization/ch4/</link>
            <category>指令</category>
            <pubDate>Fri, 01 Aug 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;ch4-指令系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ch4-指令系统&#34;&gt;#&lt;/a&gt; Ch4 指令系统&lt;/h1&gt;
&lt;h2 id=&#34;指令系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指令系统&#34;&gt;#&lt;/a&gt; 指令系统&lt;/h2&gt;
&lt;h3 id=&#34;isa王道叫它指令集体系结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#isa王道叫它指令集体系结构&#34;&gt;#&lt;/a&gt; ISA（王道叫它指令集体系结构）&lt;/h3&gt;
&lt;p&gt;指令系统 vs ISA&lt;/p&gt;
&lt;p&gt;ISA 完整地定义了软件和硬件之间的接口，规定了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令格式（指令寻址方式，操作类型，操作数）&lt;/li&gt;
&lt;li&gt;操作数的类型、寻址方式、大端小端存放&lt;/li&gt;
&lt;li&gt;程序可访问的寄存器编号、个数和位数，存储空间大小和编址方式&lt;/li&gt;
&lt;li&gt;指令执行过程的控制方式（PC, condition code, …）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;指令的基本格式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指令的基本格式&#34;&gt;#&lt;/a&gt; 指令的基本格式&lt;/h3&gt;
&lt;p&gt;操作码 + 地址码&lt;br&gt;
主存一般是按字节编址，所以指令字长通常为字节的整数倍&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;零地址指令&lt;br&gt;
 NOP, HLT&lt;br&gt;
 不需要操作数。&lt;br&gt;
零地址的运算类指令仅用在堆栈计算机中（操作数直接从栈顶弹出）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一地址指令&lt;br&gt;
 OP, A1&lt;br&gt;
OP(A1) -&amp;gt; A1&lt;br&gt;
 加 1，减 1，取反，求补，移位等&lt;br&gt;
可能有一个操作数或者两个操作数&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;隐含约定目的地址的双操作数指令，地址码指明一个操作数，另一个操作数来自隐含寻址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;二地址指令&lt;br&gt;
 OP, A1, A2&lt;br&gt;
(A1)OP(A2) -&amp;gt; A1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三地址指令&lt;br&gt;
 OP, A1, A2, A3&lt;br&gt;
(A1)OP(A2) -&amp;gt; A3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四地址指令&lt;br&gt;
 OP, A1, A2, A3, A4&lt;br&gt;
 (A1) OP (A2) -&amp;gt; A3, A4 = 下一条将要执行指令的地址&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;定长操作码指令格式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定长操作码指令格式&#34;&gt;#&lt;/a&gt; 定长操作码指令格式&lt;/h3&gt;
&lt;p&gt;n 位 opcode 最多能表示 2^n 条指令&lt;br&gt;
指令字长：单字长 (PC = PC + 1)、双字长 (PC = PC + 2)…&lt;/p&gt;
&lt;h3 id=&#34;扩展操作码指令格式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#扩展操作码指令格式&#34;&gt;#&lt;/a&gt; 扩展操作码指令格式&lt;/h3&gt;
&lt;p&gt;才去可变长度操作码，分散地放在指令字的不同位置上&lt;br&gt;
要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不允许短码是长码的前缀&lt;/li&gt;
&lt;li&gt;各指令的操作码不能重复&lt;br&gt;
&lt;img data-src=&#34;f1.jpg&#34; alt&gt;&lt;br&gt;
 RISC-V 指令集&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;指令的操作类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指令的操作类型&#34;&gt;#&lt;/a&gt; 指令的操作类型&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;数据传送&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;MOV: 寄存器到寄存器&lt;/li&gt;
&lt;li&gt;LOAD: 从内存读到寄存器&lt;/li&gt;
&lt;li&gt;STORE: 从寄存器写入内存&lt;/li&gt;
&lt;li&gt;PUSH&lt;/li&gt;
&lt;li&gt;POP&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;算术和逻辑运算&lt;br&gt;
 ADD, SUB, MUL, DIV, MOD, AND, OR, XOR, NOT, XOR, INC (加一), DEC (减一)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移位&lt;br&gt;
算术移位，逻辑移位，循环移位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;转移&lt;br&gt;
 JMP, BRANCH, CALL, RET, TRAP（中断隐指令是硬件实现的，只有 TRAP 是软指令）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O 操作&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
    </channel>
</rss>
