<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>NoResponse&#39;s Blog • Posts by &#34;活动记录&#34; tag</title>
    <link href="http://example.com" />
    <updated>2025-06-14T16:00:00.000Z</updated>
    <category term="人工智能" />
    <category term="计算机网络" />
    <category term="计算机组成" />
    <category term="数据的表示与运算" />
    <category term="词法分析" />
    <category term="编译原理" />
    <category term="抽象语法" />
    <category term="语法分析" />
    <category term="语义分析" />
    <category term="中间代码" />
    <category term="活动记录" />
    <entry>
        <id>http://example.com/2025/06/15/computer-science/compile-principles/ch6/</id>
        <title>Ch6</title>
        <link rel="alternate" href="http://example.com/2025/06/15/computer-science/compile-principles/ch6/"/>
        <content type="html">&lt;h1 id=&#34;activation-recordstack-frame&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#activation-recordstack-frame&#34;&gt;#&lt;/a&gt; Activation Record/Stack Frame&lt;/h1&gt;
&lt;p&gt;函数的栈帧是栈上用来放函数的局部变量、参数、返回地址以及其他临时变量的区域&lt;br&gt;
 stack 一般从高地址向低地址，heap 从低地址向高地址&lt;br&gt;
 layout:&lt;br&gt;
&lt;img data-src=&#34;f1.jpg&#34; alt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;incoming arguments: 存储 caller 传递给 callee 的参数&lt;/li&gt;
&lt;li&gt;frame pointer: 帧指针，用来访问 incoming arguments，从低向高是 argument 1, argument 2, …&lt;/li&gt;
&lt;li&gt;local variables: 存储函数的局部变量（还有一些保存在寄存器里）&lt;/li&gt;
&lt;li&gt;return address: 存储需要返回 caller 的哪里；non-leaf 过程会把 return address 写入栈帧里面&lt;/li&gt;
&lt;li&gt;temporaries: 存储临时变量，复杂表达式拆出来的中间变量放的地方&lt;/li&gt;
&lt;li&gt;saved registers&lt;/li&gt;
&lt;li&gt;outgoing arguments: 存储当前函数要传递给别的函数的参数&lt;/li&gt;
&lt;li&gt;stack pointer: 栈指针，从低向高&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;函数调用流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数调用流程&#34;&gt;#&lt;/a&gt; 函数调用流程：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;g 调用 f 的时候&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;进入 f 的时候，保存旧的 FP (g 的 FP)&lt;/li&gt;
&lt;li&gt;把 FP 设置为原来的 SP，把 SP = SP - frame size&lt;br&gt;
&lt;img data-src=&#34;f2.jpg&#34; alt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;f 返回的时候&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;让 SP = FP (恢复 g 的 SP)&lt;/li&gt;
&lt;li&gt;从内存中读出 g 的 FP 恢复回去&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果栈帧大小固定就只需要 FP 不需要 SP 了，因为 FP = SP + frame size&lt;/p&gt;
&lt;h2 id=&#34;saved-register&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#saved-register&#34;&gt;#&lt;/a&gt; saved register&lt;/h2&gt;
&lt;p&gt;函数 g 调用 f 的时候，用到了寄存器 r，调用 f 的时候要把 r 保存在 saved register 中，等调用结束再恢复回去&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;caller-saved register: 函数调用的时候用到的寄存器，调用结束后可以恢复&lt;/li&gt;
&lt;li&gt;callee-saved register: 函数调用的时候用不到的寄存器，调用结束后不能恢复&lt;br&gt;
&lt;mark&gt; FP 是由 callee 保存和恢复的&lt;/mark&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参数传递&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#参数传递&#34;&gt;#&lt;/a&gt; 参数传递&lt;/h2&gt;
&lt;p&gt;一般约定把前 k (4 or 6) 个参数放在寄存器传递，剩下的参数放在栈中传递&lt;br&gt;
四种传参方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不给叶过程 (leaf procedure) 分配栈帧&lt;br&gt;
叶过程是指不调用其他过程的过程。在这种情况下，可以不为叶过程分配栈帧&lt;/li&gt;
&lt;li&gt;过程间寄存器分配 (interprocedural register allocation)&lt;br&gt;
 这种方法需要先分析代码中全部的函数，然后再根据分析结果来分配寄存器。&lt;br&gt;
假设有一个程序包含多个函数，通过全局分析发现某些变量在多个函数之间频繁使用，可以为其分配固定的寄存器，避免频繁的内存读写&lt;/li&gt;
&lt;li&gt;若变量 x 不再被使用，可以直接写其寄存器，不需要再保存 x 到栈帧中&lt;br&gt;
当一个变量在当前作用域内不再被使用时，可以直接将其值写入寄存器，而无需保存到栈帧中&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;exampleFunction&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y = x * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 使用x后，x不再被使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 直接将y的值写入寄存器，无需保存x到栈帧中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Result: %d\n&amp;quot;&lt;/span&gt;, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;寄存器窗口技术 (register windows)&lt;br&gt;
 在每次函数调用时，系统会自动切换到一组新的寄存器，称为寄存器窗口。这样，每个函数都可以独立地使用自己的寄存器，而不会影响其他函数的寄存器状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;functionA&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 使用寄存器窗口A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;functionB&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 使用寄存器窗口B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    functionA();  &lt;span class=&#34;comment&#34;&gt;// 调用functionA时，自动切换到寄存器窗口A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;frame-resident-variables&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#frame-resident-variables&#34;&gt;#&lt;/a&gt; Frame-Resident Variables&lt;/h2&gt;
&lt;p&gt;什么情况下要把变量写入栈帧里面？、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the varibles will be passed by reference 变量传地址 / 引用&lt;/li&gt;
&lt;li&gt;变量被嵌套在函数内部的函数访问（不绝对）&lt;/li&gt;
&lt;li&gt;变量太大了没法直接放寄存器&lt;/li&gt;
&lt;li&gt;变量是一个数组&lt;/li&gt;
&lt;li&gt;传递参数&lt;/li&gt;
&lt;li&gt;有太多局部变量和临时变量放不下了&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;escape 逃逸：如果一个变量需要传地址 / 取地址 / 被过程内部嵌套的函数访问，那么这个变量就会逃逸。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;static-links&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#static-links&#34;&gt;#&lt;/a&gt; static links&lt;/h2&gt;
&lt;p&gt;在嵌套的函数声明中，内层函数是有可能用到外层函数的局部变量的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static links 是指向上一层嵌套层级的栈帧的指针。内层嵌套函数调用外层定义的变量的时候需要用到 static links，否则无法寻址。&lt;br&gt;
&lt;img data-src=&#34;f3.jpg&#34; alt&gt;&lt;br&gt;
&lt;img data-src=&#34;f4.jpg&#34; alt&gt;&lt;br&gt;
只有调用自身的时候才传递自己的 static link 作为 static link，其他的都是把外层函数的 fp 作为 static link&lt;br&gt;
 如果要访问外层变量，就顺着 static 一层一层查上去直到找到了为止。&lt;br&gt;
其他访问方法：&lt;/li&gt;
&lt;li&gt;嵌套层次显示表 (display)&lt;br&gt;
 建立一个全局数组，位置 i 包含一个指针，指向最近一次进入的，其静态嵌套深度是 i 的过程的栈帧&lt;br&gt;
&lt;img data-src=&#34;f5.jpg&#34; alt&gt;&lt;br&gt;
先给它们标上嵌套深度&lt;br&gt;
直接把链表变成数组了，需要用到一个变量，就查看当前变量的嵌套深度 i 然后直接找那个数组 i 位置的座位 fp 地址来找&lt;/li&gt;
&lt;li&gt;lambda lifting&lt;br&gt;
g 调用 f 时，g 中每一个实际（或被嵌套在 f 内的任意函数）访问了的变量，都将作为额外的参数传递给 f&lt;br&gt;
 把内部的函数，从内往外进行改写，改写函数的参数实现 lambda lifting&lt;br&gt;
&lt;img data-src=&#34;f6.jpg&#34; alt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tiger编译器的栈帧&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tiger编译器的栈帧&#34;&gt;#&lt;/a&gt; tiger 编译器的栈帧&lt;/h2&gt;
&lt;p&gt;tiger 不支持高阶函数&lt;br&gt;
看不完了。。再说吧&lt;/p&gt;
</content>
        <category term="活动记录" />
        <updated>2025-06-14T16:00:00.000Z</updated>
    </entry>
</feed>
