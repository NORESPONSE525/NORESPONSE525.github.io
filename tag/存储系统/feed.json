{
    "version": "https://jsonfeed.org/version/1",
    "title": "NoResponse's Blog • All posts by \"存储系统\" tag",
    "description": "成分复杂的CSer from ZJU",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/07/01/computer-science/computer-organization/ch3/",
            "url": "http://example.com/2025/07/01/computer-science/computer-organization/ch3/",
            "title": "Ch3",
            "date_published": "2025-06-30T16:00:00.000Z",
            "content_html": "<h1 id=\"存储系统\"><a class=\"markdownIt-Anchor\" href=\"#存储系统\">#</a> 存储系统</h1>\n<h2 id=\"存储器概述\"><a class=\"markdownIt-Anchor\" href=\"#存储器概述\">#</a> 存储器概述</h2>\n<h3 id=\"存储器的分类\"><a class=\"markdownIt-Anchor\" href=\"#存储器的分类\">#</a> 存储器的分类</h3>\n<ol>\n<li>按层次分</li>\n</ol>\n<ul>\n<li>主存（小、快、成本高）</li>\n<li>辅存（大、慢、成本低）</li>\n<li>Cache</li>\n</ul>\n<ol start=\"2\">\n<li>按存储介质分</li>\n</ol>\n<ul>\n<li>磁表面存储器（磁盘、磁带）</li>\n<li>磁芯存储器</li>\n<li>半导体存储器（MOS 型、双极型）</li>\n<li>光存储器（光盘）</li>\n</ul>\n<ol start=\"3\">\n<li>按存储方式分</li>\n</ol>\n<ul>\n<li>RAM （随机存储器）: 随机读取存储单元，存取时间与存储单元的物理位置无关。读写方便，主要用作主存和 cache，分静态 RAM 和动态 RAM。</li>\n<li>ROM （只读存储器）：只能读不能写，非易失性，随机读取。广义的 ROM 也可以通过电擦除进行写入 (EEPROM)</li>\n<li>SAM （顺序存储器）：按顺序存储，存取时间与存储单元的物理位置有关</li>\n<li>DAM （直接存储器）：先选取信息所在区域，然后顺序存取。结合了 RAM 和 SAM 的特性（磁盘）</li>\n<li>Associated memory: 不根据地址而是根据存储内容来进行存取的存储器，可以实现快速地查找快表。既可以按照<mark>地址</mark>寻址也可以按照<mark>内容</mark>寻址（通常是某些字段）</li>\n<li>串行访问存储器：SAM 和 DAM 都是，所以读写时间和物理位置有关</li>\n</ul>\n<ol start=\"4\">\n<li>按信息的可保存性分类</li>\n</ol>\n<ul>\n<li>易失性存储器：断电后丢失数据，如 RAM</li>\n<li>非易失性存储器：断电后数据还在，如 ROM，磁盘光盘</li>\n<li>破坏性读出：读出数据后数据被破坏</li>\n<li>非破坏性读出：读出数据后数据不改变</li>\n</ul>\n<h3 id=\"存储器的性能指标\"><a class=\"markdownIt-Anchor\" href=\"#存储器的性能指标\">#</a> 存储器的性能指标</h3>\n<p>三个主要性能指标：存储容量、单位成本、存储速度</p>\n<ol>\n<li>容量 = 存储字数 * 字长</li>\n<li>单位成本 = 总成本 / 总容量</li>\n<li>存储速度：<br>\n存取时间<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>a</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>: 启动一次存储器操作到完成该操作所经历的时间，分为读出时间和写入事件<br>\n存取周期<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>: 进行连续读 / 写操作所允许的最短时间间隔<br>\n主存带宽<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>B</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">B_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>: b/s, B/s, word/s</li>\n</ol>\n<blockquote>\n<p>存取时间仅为完成一次操作的时间，而存取周期不仅包含操作时间，还包括操作后线路的恢复时间</p>\n</blockquote>\n<h3 id=\"多级层次的存储系统\"><a class=\"markdownIt-Anchor\" href=\"#多级层次的存储系统\">#</a> 多级层次的存储系统</h3>\n<p><img data-src=\"f1.jpg\" alt><br>\n从上到下价格越来越低，速度越来越慢，容量越来越大，CPU 访问频度越来越低<br>\n<img data-src=\"f2.jpg\" alt><br>\n存储时间与存储周期的关系</p>\n<p>主存 - Cache 之间的数据调用由硬件自动完成，对所有程序员均是透明的<br>\n主存 - 辅存的数据调用由硬件和操作系统共同完成，对应用程序员是透明的</p>\n<h2 id=\"主存储器\"><a class=\"markdownIt-Anchor\" href=\"#主存储器\">#</a> 主存储器</h2>\n<p>存储元件：MOS 管</p>\n<h3 id=\"sram-dram\"><a class=\"markdownIt-Anchor\" href=\"#sram-dram\">#</a> SRAM &amp; DRAM</h3>\n<p>RAM: SRAM 静态随机存储器和 DRAM 动态随机存储器<br>\n<mark>主存主要是 DRAM，Cache 主要是 SRAM</mark>，都易失</p>\n<p>DRAM 芯片：使用栅极电容存储信息，只要一个晶体管，读写更慢，是<mark>破坏性读出</mark>，需要重写，<mark>成本低，集成度高，功耗低</mark></p>\n<p>SRAM 芯片：使用双稳态触发器存储信息（六晶体管 MOS，RS, JK, D）。读写更快，是非破坏性读出，<mark>成本高，集成度低，功耗大</mark><br>\n<img data-src=\"f4.jpg\" alt><br>\n栅极电容需要一直刷新给电容充电，触发器不需要刷新，只要不断电状态不会改变</p>\n<h4 id=\"dram的刷新\"><a class=\"markdownIt-Anchor\" href=\"#dram的刷新\">#</a> DRAM 的刷新</h4>\n<ol>\n<li>多久需要刷新一次？ 刷新周期：一般为 2ms</li>\n<li>每次刷新多少存储单元？以行为单位，每次刷新一行存储单元<br>\n —— 为什么要用行列地址？减少选通线的数量</li>\n<li>在什么时刻刷新？<br>\n有硬件支持，读出一行的信息后重新写入，占用 1 个读 / 写周期<br>\n假设 DRAM 内部结构排列成 128×128 的形式，读 / 写周期 0.5us<br>\n2ms 共 2ms/0.5us = 4000 个周期<br>\n三种刷新方式：<br>\n<img data-src=\"f5.jpg\" alt><br>\n刷新以行为单位，再生（重写）只需要恢复被读出来的存储单元<br>\n刷新由存储器独立完成，不需要 CPU 控制</li>\n</ol>\n<h5 id=\"dram的地址引脚复用技术\"><a class=\"markdownIt-Anchor\" href=\"#dram的地址引脚复用技术\">#</a> DRAM 的地址引脚复用技术</h5>\n<p><img data-src=\"f6.jpg\" alt><br>\n行列地址分成两次送，节省了一半的地址线<br>\n行列数优化原则：尽量使行、列数相同，且行数较少（因为按行刷新）<br>\n目前常用 SDRAM（同步 DRAM），数据交换同步于 CPU 的时钟信号，使得 CPU 不需要等待</p>\n<h3 id=\"rom\"><a class=\"markdownIt-Anchor\" href=\"#rom\">#</a> ROM</h3>\n<p>结构简单、非易失性<br>\n类型：</p>\n<ol>\n<li>MROM 掩模式 ROM<br>\n 在芯片生产过程中写入，无法改变，可靠性高，急程度高，价格便宜，灵活性差</li>\n<li>PROM 一次可编程 ROM<br>\n 可以用专门的设备写入一次，一旦写入无法改变</li>\n<li>EPROM 可擦除可编程 ROM<br>\n 可以写入并多次改写，但是编程次数有限且时间长</li>\n<li>Flash<br>\n 兼有 RAM 和 ROM 的优先，可以不加点长期保存信息，又能在线快速擦除和重写，价格便宜，急程度高，电可擦除重写且速度快<br>\n SSD 固态硬盘基于 Flash，由控制单元和 Flash 组成，长期保存、快速擦除和重写，对比传统硬盘读写速度快。低功耗。但是价格高</li>\n</ol>\n<h3 id=\"主存储器的基本组成\"><a class=\"markdownIt-Anchor\" href=\"#主存储器的基本组成\">#</a> 主存储器的基本组成</h3>\n",
            "tags": [
                "存储系统"
            ]
        }
    ]
}