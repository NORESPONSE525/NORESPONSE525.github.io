<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>NoResponse&#39;s Blog • Posts by &#34;存储系统&#34; tag</title>
    <link href="http://example.com" />
    <updated>2025-06-30T16:00:00.000Z</updated>
    <category term="软件工程" />
    <category term="人工智能" />
    <category term="编译原理" />
    <category term="Liveness Analysis" />
    <category term="Register Allocation" />
    <category term="词法分析" />
    <category term="语法分析" />
    <category term="抽象语法" />
    <category term="活动记录" />
    <category term="语义分析" />
    <category term="Basic Blocks and Traces" />
    <category term="指令选择" />
    <category term="中间代码" />
    <category term="计算机网络" />
    <category term="计算机组成" />
    <category term="数据的表示与运算" />
    <category term="存储系统" />
    <category term="错题" />
    <entry>
        <id>http://example.com/2025/07/01/computer-science/computer-organization/ch3/</id>
        <title>Ch3</title>
        <link rel="alternate" href="http://example.com/2025/07/01/computer-science/computer-organization/ch3/"/>
        <content type="html">&lt;h1 id=&#34;ch3-存储系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ch3-存储系统&#34;&gt;#&lt;/a&gt; Ch3 存储系统&lt;/h1&gt;
&lt;h2 id=&#34;存储器概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#存储器概述&#34;&gt;#&lt;/a&gt; 存储器概述&lt;/h2&gt;
&lt;h3 id=&#34;存储器的分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#存储器的分类&#34;&gt;#&lt;/a&gt; 存储器的分类&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;按层次分&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;主存（小、快、成本高）&lt;/li&gt;
&lt;li&gt;辅存（大、慢、成本低）&lt;/li&gt;
&lt;li&gt;Cache&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;按存储介质分&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;磁表面存储器（磁盘、磁带）&lt;/li&gt;
&lt;li&gt;磁芯存储器&lt;/li&gt;
&lt;li&gt;半导体存储器（MOS 型、双极型）&lt;/li&gt;
&lt;li&gt;光存储器（光盘）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;按存储方式分&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;RAM （随机存储器）: 随机读取存储单元，存取时间与存储单元的物理位置无关。读写方便，主要用作主存和 cache，分静态 RAM 和动态 RAM。&lt;/li&gt;
&lt;li&gt;ROM （只读存储器）：只能读不能写，非易失性，随机读取。广义的 ROM 也可以通过电擦除进行写入 (EEPROM)&lt;/li&gt;
&lt;li&gt;SAM （顺序存储器）：按顺序存储，存取时间与存储单元的物理位置有关&lt;/li&gt;
&lt;li&gt;DAM （直接存储器）：先选取信息所在区域，然后顺序存取。结合了 RAM 和 SAM 的特性（磁盘）&lt;/li&gt;
&lt;li&gt;Associated memory: 不根据地址而是根据存储内容来进行存取的存储器，可以实现快速地查找快表。既可以按照&lt;mark&gt;地址&lt;/mark&gt;寻址也可以按照&lt;mark&gt;内容&lt;/mark&gt;寻址（通常是某些字段）&lt;/li&gt;
&lt;li&gt;串行访问存储器：SAM 和 DAM 都是，所以读写时间和物理位置有关&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;按信息的可保存性分类&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;易失性存储器：断电后丢失数据，如 RAM&lt;/li&gt;
&lt;li&gt;非易失性存储器：断电后数据还在，如 ROM，磁盘光盘&lt;/li&gt;
&lt;li&gt;破坏性读出：读出数据后数据被破坏&lt;/li&gt;
&lt;li&gt;非破坏性读出：读出数据后数据不改变&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;存储器的性能指标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#存储器的性能指标&#34;&gt;#&lt;/a&gt; 存储器的性能指标&lt;/h3&gt;
&lt;p&gt;三个主要性能指标：存储容量、单位成本、存储速度&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;容量 = 存储字数 * 字长&lt;/li&gt;
&lt;li&gt;单位成本 = 总成本 / 总容量&lt;/li&gt;
&lt;li&gt;存储速度：&lt;br&gt;
存取时间&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;T_a&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;: 启动一次存储器操作到完成该操作所经历的时间，分为读出时间和写入事件&lt;br&gt;
存取周期&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;T_m&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;: 进行连续读 / 写操作所允许的最短时间间隔&lt;br&gt;
主存带宽&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;B_m&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;: b/s, B/s, word/s&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;存取时间仅为完成一次操作的时间，而存取周期不仅包含操作时间，还包括操作后线路的恢复时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;多级层次的存储系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多级层次的存储系统&#34;&gt;#&lt;/a&gt; 多级层次的存储系统&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;f1.jpg&#34; alt&gt;&lt;br&gt;
从上到下价格越来越低，速度越来越慢，容量越来越大，CPU 访问频度越来越低&lt;br&gt;
&lt;img data-src=&#34;f2.jpg&#34; alt&gt;&lt;br&gt;
存储时间与存储周期的关系&lt;/p&gt;
&lt;p&gt;主存 - Cache 之间的数据调用由硬件自动完成，对所有程序员均是透明的&lt;br&gt;
主存 - 辅存的数据调用由硬件和操作系统共同完成，对应用程序员是透明的&lt;/p&gt;
&lt;h2 id=&#34;主存储器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主存储器&#34;&gt;#&lt;/a&gt; 主存储器&lt;/h2&gt;
&lt;p&gt;存储元件：MOS 管&lt;/p&gt;
&lt;h3 id=&#34;sram-dram&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sram-dram&#34;&gt;#&lt;/a&gt; SRAM &amp;amp; DRAM&lt;/h3&gt;
&lt;p&gt;RAM: SRAM 静态随机存储器和 DRAM 动态随机存储器&lt;br&gt;
&lt;mark&gt;主存主要是 DRAM，Cache 主要是 SRAM&lt;/mark&gt;，都易失&lt;/p&gt;
&lt;p&gt;DRAM 芯片：使用栅极电容存储信息，只要一个晶体管，读写&lt;mark&gt;更慢&lt;/mark&gt;，是&lt;mark&gt;破坏性读出&lt;/mark&gt;，需要重写，&lt;mark&gt;成本低，集成度高，功耗低&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;SRAM 芯片：使用双稳态触发器存储信息（六晶体管 MOS，RS, JK, D）。读写&lt;mark&gt;更快&lt;/mark&gt;，是非破坏性读出，&lt;mark&gt;成本高，集成度低，功耗大&lt;/mark&gt;&lt;br&gt;
&lt;img data-src=&#34;f4.jpg&#34; alt&gt;&lt;br&gt;
栅极电容需要一直刷新给电容充电，触发器不需要刷新，只要不断电状态不会改变&lt;/p&gt;
&lt;h4 id=&#34;dram的刷新&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dram的刷新&#34;&gt;#&lt;/a&gt; DRAM 的刷新&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;多久需要刷新一次？ 刷新周期：一般为 2ms&lt;/li&gt;
&lt;li&gt;每次刷新多少存储单元？以行为单位，每次刷新一行存储单元&lt;br&gt;
 —— 为什么要用行列地址？减少选通线的数量&lt;/li&gt;
&lt;li&gt;在什么时刻刷新？&lt;br&gt;
有硬件支持，读出一行的信息后重新写入，占用 1 个读 / 写周期&lt;br&gt;
假设 DRAM 内部结构排列成 128×128 的形式，读 / 写周期 0.5us&lt;br&gt;
2ms 共 2ms/0.5us = 4000 个周期&lt;br&gt;
三种刷新方式：&lt;br&gt;
&lt;img data-src=&#34;f5.jpg&#34; alt&gt;&lt;br&gt;
刷新以行为单位，再生（重写）只需要恢复被读出来的存储单元&lt;br&gt;
刷新由存储器独立完成，不需要 CPU 控制&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;dram的地址引脚复用技术&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dram的地址引脚复用技术&#34;&gt;#&lt;/a&gt; DRAM 的地址引脚复用技术&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;f6.jpg&#34; alt&gt;&lt;br&gt;
行列地址分成两次送，节省了一半的地址线&lt;br&gt;
行列数优化原则：尽量使行、列数相同，且行数较少（因为按行刷新）&lt;br&gt;
目前常用 SDRAM（同步 DRAM），数据交换同步于 CPU 的时钟信号，使得 CPU 不需要等待&lt;/p&gt;
&lt;h3 id=&#34;rom&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rom&#34;&gt;#&lt;/a&gt; ROM&lt;/h3&gt;
&lt;p&gt;结构简单、非易失性&lt;br&gt;
类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MROM 掩模式 ROM&lt;br&gt;
 在芯片生产过程中写入，无法改变，可靠性高，急程度高，价格便宜，灵活性差&lt;/li&gt;
&lt;li&gt;PROM 一次可编程 ROM&lt;br&gt;
 可以用专门的设备写入一次，一旦写入无法改变&lt;/li&gt;
&lt;li&gt;EPROM 可擦除可编程 ROM&lt;br&gt;
 可以写入并多次改写，但是编程次数有限且时间长&lt;/li&gt;
&lt;li&gt;Flash&lt;br&gt;
 兼有 RAM 和 ROM 的优点，可以不加电长期保存信息，又能在线快速擦除和重写，价格便宜，急程度高，电可擦除重写且速度快&lt;br&gt;
 SSD 固态硬盘基于 Flash，由控制单元和 Flash 组成，长期保存、快速擦除和重写，对比传统硬盘读写速度快。低功耗。但是价格高&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;主存储器的基本组成&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主存储器的基本组成&#34;&gt;#&lt;/a&gt; 主存储器的基本组成&lt;/h3&gt;
&lt;p&gt;核心部件：一个个存储 0 或 1 的存储单元构成的存储矩阵&lt;br&gt;
访问主存时，CPU 把地址送到 MAR，MAR 通过地址总线把地址送到主存中的地址寄存器，地址译码器进行译码，选中相应的内存单元，然后通过控制电路决定读 / 写操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读操作：将选中的内存单元的内容通过数据总线送到 MDR 中&lt;/li&gt;
&lt;li&gt;写操作：将 MDR 中的内容通过数据总线送到选中的内存单元中&lt;br&gt;
 MDR 的位数和数据总线位数相同，通常等于存储字长；MAR 的位数和地址总线位数相同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多模块存储器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多模块存储器&#34;&gt;#&lt;/a&gt; 多模块存储器&lt;/h3&gt;
&lt;p&gt;DRAM 芯片的恢复时间比较长，有可能是存取时间的几倍（SRAM 的恢复时间较短）。CPU 的读写速度比主存快很多，主存恢复时间太长&lt;br&gt;
 —— 利用多个完全相同的存储模块并行工作来提高吞吐率：单体多字存储器，多体低位交叉存储器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;双端口 RAM（408 不考，了解即可）&lt;br&gt;
&lt;img data-src=&#34;f7.jpg&#34; alt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;单体多字存储器&lt;br&gt;
一般一个存储单元只存储一个 word，但是单体多字存储器一个存储单元存储多个 word，然后读的时候一次性读取这多个字。好处是快，缺点是只有指令和数据连续存放时才能提高存取速度，否则造成不必要的读取。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;mark&gt;多体并行存储器（重点）&lt;/mark&gt;&lt;br&gt;
分为高位交叉编址和低位交叉编址两种&lt;br&gt;
&lt;img data-src=&#34;f8.jpg&#34; alt&gt;&lt;br&gt;
高位交叉编址每一块存储体的高位是一样的，实际上还是顺序存储。因此访问连续内存实际上访问的还是同一块存储体，并不能通过并行加快访问速度&lt;br&gt;
低位交叉编址的每一块存储体低位相同，因此可以在恢复时间并行存取下一块内存的数据&lt;br&gt;
存取周期为 &lt;code&gt;T&lt;/code&gt; , 存取时间为 &lt;code&gt;r&lt;/code&gt; , T = r + 恢复时间&lt;br&gt;
对于 n 个存储器并行访问的存储器：&lt;br&gt;
采用高位交叉编址的时间为 &lt;code&gt;n*T&lt;/code&gt; &lt;br&gt;
 低位交叉编址为 &lt;code&gt;T + (n-1)*r&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;f9.png&#34; alt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;轮流启动：每个 bank 的存储位数等于数据总线的位数，此时采用轮流启动
&lt;ul&gt;
&lt;li&gt;对于低位交叉编址，要保证 &lt;code&gt;m&amp;gt;=T/r&lt;/code&gt; ，以保证流水线不间断&lt;/li&gt;
&lt;li&gt;理想情况下，m 个 bank 的交叉存储器每隔 &lt;code&gt;T/m&lt;/code&gt;  个周期可以读 / 写一个数据，若相邻 m 次访问的当存地址出现在同一个模块内，则会发生访存冲突，此时需要延迟发生冲突的访问请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同时启动：如果 m 个 bank 的总位数加起来刚好等于数据总线的位数，则 m 个同时存 / 取&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;主存储器与cpu的连接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主存储器与cpu的连接&#34;&gt;#&lt;/a&gt; 主存储器与 CPU 的连接&lt;/h2&gt;
&lt;h3 id=&#34;连接原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#连接原理&#34;&gt;#&lt;/a&gt; 连接原理&lt;/h3&gt;
&lt;p&gt;通过总线连接（控制、地址、数据）&lt;br&gt;
传输速率 = 总线宽度 / 传输时间&lt;br&gt;
地址总线的位数决定了可寻址的最大内存空间&lt;br&gt;
控制总线指出总线周期的类型和本次输入输出完成的时刻&lt;br&gt;
将多个芯片集成在内存条上，由多个内存条和主板上的 ROM 芯片组成计算机所需的主存空间，通过总线与 CPU 连接&lt;/p&gt;
&lt;h3 id=&#34;主存容量的扩展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主存容量的扩展&#34;&gt;#&lt;/a&gt; 主存容量的扩展&lt;/h3&gt;
&lt;p&gt;数据总线宽度 &amp;gt; 存储字长 —— 位扩展&lt;br&gt;
地址总线宽度 &amp;gt; 存储字数量所需的宽度&lt;br&gt;
&lt;img data-src=&#34;f10.jpg&#34; alt&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;位扩展法：增加存储字长&lt;br&gt;
由于数据总线宽度大于存储字长，存在浪费情况，必须进行位扩展使数据位数与数据总线位数相等&lt;br&gt;
如图：&lt;br&gt;
&lt;img data-src=&#34;f11.jpg&#34; alt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字扩展法&lt;br&gt;
地址总线存在浪费情况，对存储字的数量进行扩展&lt;br&gt;
用多出来的地址线提供 CS 片选信号，决定输出的是哪个芯片的数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;线选法：n 条多余的地址线，对应 n 个选片信号，地址空间不连续造成地址空间浪费（只能有一个 1 有效），电路简单&lt;br&gt;
&lt;img data-src=&#34;f13.jpg&#34; alt&gt;&lt;/li&gt;
&lt;li&gt;译码器选法：n 条多余的线对应&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.664392em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个选片信号，地址空间可以连续&lt;br&gt;
&lt;img data-src=&#34;f12.jpg&#34; alt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;字、位同时扩展&lt;br&gt;
既增加存储字的数量，又增加存储字长&lt;br&gt;
&lt;img data-src=&#34;f14.jpg&#34; alt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;存储芯片的地址分配和片选&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#存储芯片的地址分配和片选&#34;&gt;#&lt;/a&gt; 存储芯片的地址分配和片选&lt;/h3&gt;
&lt;p&gt;见上方线选法译码器选法&lt;/p&gt;
&lt;h3 id=&#34;存储器与cpu的连接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#存储器与cpu的连接&#34;&gt;#&lt;/a&gt; 存储器与 CPU 的连接&lt;/h3&gt;
&lt;p&gt;…&lt;br&gt;
 片选信号还与 CPU 的方寸控制信号&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mrow&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;/mrow&gt;&lt;mo stretchy=&#34;true&#34;&gt;‾&lt;/mo&gt;&lt;/mover&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\overline{MREQ}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.0777700000000001em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord overline&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8833300000000001em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;Q&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.80333em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;overline-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.19444em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 有关（低电平有效），若 CPU 访问 IO 则此信号为高电平&lt;br&gt;
 MAR 位数要看主存地址空间大小，而不能看实际上用了多少位&lt;/p&gt;
&lt;h2 id=&#34;外部存储器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#外部存储器&#34;&gt;#&lt;/a&gt; 外部存储器&lt;/h2&gt;
&lt;p&gt;磁盘存储器是以磁盘为存储介质的存储器，优点：容量大，价格低；记录介质可重复使用；可以长期保存；非破坏性读出。缺点：存取速度慢；机械结构复杂；对工作环境要求高&lt;/p&gt;
&lt;h3 id=&#34;磁盘存储器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#磁盘存储器&#34;&gt;#&lt;/a&gt; 磁盘存储器&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;磁盘存储器&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;组成：磁盘驱动器，磁盘控制器，盘片&lt;br&gt;
&lt;img data-src=&#34;f15.jpg&#34; alt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储区域：&lt;mark&gt;扇区（也称块）是磁盘读写的最小单位&lt;/mark&gt;，按块存取&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;磁头数 (Heads)：一个记录面对应一个磁头&lt;/li&gt;
&lt;li&gt;柱面数 (Cylinders)：表示每面盘片上的磁道数，不同记录面的相同位置的磁道构成一个柱面&lt;/li&gt;
&lt;li&gt;扇区数 (Sectors)：每条磁道上有多少扇区&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disk Cache&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在内存上的一片区域，用来缓冲被送到磁盘上的数据。优点：写磁盘时按簇进行，可以避免频繁地用小块数据写；中间结果数据写回之前可以被快速再次使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;磁记录原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原理：当磁头和磁性记录介质有相对运动时，通过电磁转换完成读 / 写操作。&lt;/li&gt;
&lt;li&gt;编码方法：按某种方案（规律），把一连串的二进制信息变换成存储介质磁层中一个磁化翻转状态的序列，并使读 / 写控制电路容易、可靠地实现转换。&lt;/li&gt;
&lt;li&gt;磁记录方式：通常采用调频制（FM）和改进型调频制（MFM）的记录方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能指标&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;磁盘的容量：一个磁盘所能存储的字节总数称为磁盘容量。磁盘容量有非格式化容量和格式化容量之分。&lt;br&gt;
非格式化容量是指磁记录表面可以利用的磁化单元总数，非格式化容量 = 记录面数 * 柱面数 * 每条磁道的磁化单元数&lt;br&gt;
格式化容量是指按照某种特定的记录格式所能存储信息的总量，格式化容量 = 记录面数 * 柱面数 * 每道扇区数 * 每个扇区的容量&lt;br&gt;
&lt;mark&gt;格式化容量 &amp;lt; 非格式化容量&lt;/mark&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;记录密度：记录密度是指盘片单位面积上记录的二进制的信息量，通常以 &lt;code&gt;道密度&lt;/code&gt; 、 &lt;code&gt;位密度&lt;/code&gt; 和 &lt;code&gt;面密度&lt;/code&gt; 表示。道密度是&lt;mark&gt;沿磁盘半径方向单位长度上的磁道数&lt;/mark&gt;；位密度是&lt;mark&gt;磁道单位长度上能记录的二进制代码位数&lt;/mark&gt;；面密度是位密度和道密度的乘积。&lt;br&gt;
&lt;mark&gt;磁盘所有磁道记录的信息量一定是相等的，并不是圆越大信息越多，故每个磁道的位密度都不同，越靠近圆心位密度越大&lt;/mark&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平均存取时间：平均存取时间 = 寻道时间（磁头移动到目的磁道）+ 旋转延迟时间（磁头定位到所在扇区）+ 传输时间（传输数据所花费的时间）&lt;br&gt;
&lt;mark&gt;寻道时间通常取从最外道到最内道时间的一半，旋转延迟时间通常取旋转半周的时间&lt;/mark&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据传输率：磁盘存储器在单位时间内向主机传送数据的字节数，称为数据传输率&lt;br&gt;
假设磁盘转速为 r（转 / 秒），每条磁道容量为 N 个字节，则数据传输率为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;D_r=rN&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;磁盘地址&lt;br&gt;
&lt;img data-src=&#34;f16.jpg&#34; alt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;磁盘的工作原理&lt;br&gt;
硬盘的主要操作是寻址、读盘、写盘。每个操作都对应一个控制字，硬盘工作时，第一步是取控制字，第二步是执行控制字。&lt;br&gt;
硬盘属于机械式部件，其读写操作是串行的，不可能在同一时刻既读又写，也不可能在同一时刻读两组数据或写两组数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;RAID&lt;br&gt;
 将多个独立的物理磁盘组成一个独立的逻辑磁盘，数据分割交叉存储，并行访问。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;RAID0：无冗余和无校验的磁盘阵列。&lt;/li&gt;
&lt;li&gt;RAID1：镜像磁盘阵列。每份数据存两遍，成本太高&lt;/li&gt;
&lt;li&gt;RAID2：采用纠错的海明码的磁盘阵列。&lt;br&gt;
逻辑上连续的几个 bit 物理上分散存储在各个盘中 4bit 信息位 + 3bit 海明校验位 —— 可纠正 1bit 错误&lt;br&gt;
每个码字有  &lt;code&gt;m&lt;/code&gt;  个信息位和  &lt;code&gt;r&lt;/code&gt;  个冗余位，$ (m+r+1)≤2^r$&lt;br&gt;
 参考 xyx 学长的计网笔记：&lt;br&gt;
&lt;img data-src=&#34;f17.jpg&#34; alt&gt;&lt;/li&gt;
&lt;li&gt;RAID3：位交叉奇偶校验的磁盘阵列。前三个盘的奇偶校验位写在第四个盘上&lt;/li&gt;
&lt;li&gt;RAID4：块交叉奇偶校验的磁盘阵列。&lt;/li&gt;
&lt;li&gt;RAID5：无独立校验的奇偶校验磁盘阵列。在所有磁盘之间分条，并且每个数据块的奇偶校验块 § 写入到同一条带上&lt;br&gt;
 RAID1-RAID5 数据不会损坏&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;固态硬盘ssd&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#固态硬盘ssd&#34;&gt;#&lt;/a&gt; 固态硬盘 (SSD)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;特性&lt;br&gt;
属于 Flash memory, EEPROM&lt;br&gt;
 组成：闪存翻译层，存储介质&lt;br&gt;
&lt;img data-src=&#34;f18.jpg&#34; alt&gt;&lt;br&gt;
&lt;mark&gt;数据以页为单位读写，以块为单位擦除&lt;/mark&gt;只有整个块被擦除之后才能写这一页，若视图修改包含已有数据的页&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;P_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，则这个快中所有含有有用数据的页必须被复制到新的空白的块中，才能对&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;P_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 进行写操作&lt;br&gt;
 SSD 的优点：随机访问比机械磁盘块，没噪声，能耗低，抗震性好，安全性高&lt;/li&gt;
&lt;li&gt;Wear Leveling 磨损均衡&lt;br&gt;
重复擦写块就会磨损坏，一般是几百次到几千次&lt;br&gt;
 (1) 动态磨损均衡：&lt;mark&gt;写入时&lt;/mark&gt;优先选择擦除次数少的新闪存块，只在写入时触发，仅考虑可用空间（对于冷数据不包括在空间池中，减少了可以用的 block 数量）&lt;br&gt;
(2) 静态磨损均衡：就算没有写入，SSD 也会监测并自动进行数据分配，让老的闪存快以读为主，让新的块腾出空间，以写为主：将数据从写入 / 擦除次数较低的 block 移动到其他 block 中，这样可以将低擦写次数的 block 释放出来，添加到可用可用空间池中，以便后续使用。仅覆盖单个闪存芯片单元&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="存储系统" />
        <updated>2025-06-30T16:00:00.000Z</updated>
    </entry>
</feed>
