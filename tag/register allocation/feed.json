{
    "version": "https://jsonfeed.org/version/1",
    "title": "NoResponse's Blog • All posts by \"register allocation\" tag",
    "description": "成分复杂的CSer from ZJU",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/06/18/computer-science/compile-principles/ch11/",
            "url": "http://example.com/2025/06/18/computer-science/compile-principles/ch11/",
            "title": "Register Allocation",
            "date_published": "2025-06-17T16:00:00.000Z",
            "content_html": "<h1 id=\"register-allocation\"><a class=\"markdownIt-Anchor\" href=\"#register-allocation\">#</a> Register Allocation</h1>\n<p>目标：</p>\n<ul>\n<li>Map temporaries to registers</li>\n<li>Preserve program semantics</li>\n<li>Optimize performance</li>\n</ul>\n<h2 id=\"图着色算法\"><a class=\"markdownIt-Anchor\" href=\"#图着色算法\">#</a> 图着色算法</h2>\n<p>冲突图是一个无向图，冲突图中，每个节点是一个变量（寄存器分配的候选对象）。<br>\n如果两个变量在同一时刻是活跃的（live），它们就有冲突边（interference edge），表示它们不能被分配到同一个寄存器<br>\n冲突信息可以用矩阵或者图来表示</p>\n<h3 id=\"冲突图构建\"><a class=\"markdownIt-Anchor\" href=\"#冲突图构建\">#</a> 冲突图构建</h3>\n<p>我们从一个中间代码的指令出发，根据 live-out（就是 out 集合）添加冲突边：</p>\n<ol>\n<li>非 move 指令（不是 a := b 这种）<br>\n比如 a := b1 + b2<br>\n 对于每个 bn 和 a 之间都添加冲突边<br>\n比如下面这个例子：<br>\n<img data-src=\"f1.jpg\" alt><br>\n可以看到有 ab ac 同时 live 了，所以为 a 和 b，a 和 c 添加冲突边</li>\n<li>move 指令<br>\n对于 move 指令，不添加冲突边：<br>\n比如对于第 2 条指令 d ← a，out [2] = {a, e}，那么只对 d 和 e 添加冲突边，对 d 和 a 不添加<br>\n但如果 move 之后又对 d 重新赋值了，那么还是要添加上 d 和 a 之间的冲突边</li>\n</ol>\n<h3 id=\"冲突图着色\"><a class=\"markdownIt-Anchor\" href=\"#冲突图着色\">#</a> 冲突图着色</h3>\n<p>Vertex Coloring: 给图中的顶点着色，使得图中没有边连接相同颜色的顶点<br>\n K-Coloring: 颜色数小于 K</p>\n<h4 id=\"kempe-简化\"><a class=\"markdownIt-Anchor\" href=\"#kempe-简化\">#</a> Kempe 简化</h4>\n<p>如果图中有一个节点 n 的度数 &lt;K（也就是它的冲突数少于寄存器数），那我们可以 “临时删掉” 这个节点，并递归给剩下的图上色。之后再把这个节点加回来，它一定可以找到一个合法颜色。</p>\n<p>如果图中所有节点的度数都 ≥ K，那就可能要进入溢出（spill）处理<br>\n算法步骤：</p>\n<ol>\n<li>build: 画冲突图</li>\n<li>simplify the nodes with insignificant degree: 选取 degree &lt; k 的节点，压栈</li>\n<li>select (or color) while rebuilding the graph: 出栈，分配颜色<br>\n A vertex such that its degree &lt; k is always k-colorable<br>\nRemove such vertices and push them to a stack until the graph becomes empty<br>\n 移除顶点的同时移除相关边</li>\n</ol>\n<h4 id=\"coalescing\"><a class=\"markdownIt-Anchor\" href=\"#coalescing\">#</a> Coalescing</h4>\n<p>遵循两种策略：</p>\n<ul>\n<li><strong>Briggs Criteria</strong>: 如果将节点  <code>a</code>  和  <code>b</code>  合并后得到的新节点  <code>ab</code> ，其相邻节点中 degree &gt;= K 的节点（significant-degree neighbors）的数量 小于 K，则可以合并</li>\n<li><strong>George Criteria</strong>: 如果对节点  <code>a</code>  和  <code>b</code> ，对于  <code>a</code>  的每一个邻居  <code>t</code> ， 满足二者其中之一，就能合并：\n<ul>\n<li><code>t</code>  本来就和  <code>b</code>  有冲突</li>\n<li><code>t</code>  的 degree &lt; K</li>\n</ul>\n</li>\n</ul>\n<p>整体流程：<br>\n<img data-src=\"f2.jpg\" alt></p>\n<ul>\n<li>为什么要 simplify non-move-related node: 保留 move-related 的后续可以合并</li>\n<li>freeze: 当我们遇到两个变量 a ← b 有 move 指令，但现在还不能安全合并，我们又不想立刻 spill，于是我们 “冻结” 这条 move 指令：不再试图合并 a 和 b，而是让其中一个变成非 move 相关（non-move-related），进入 Simplify 阶段继续处理</li>\n<li>spill 规则：优先移除不被经常使用、degree 大的节点\n<ul>\n<li>实际溢出的 priority 计算，对于节点 a：</li>\n</ul>\n</li>\n</ul>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>i</mi><mi>o</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><mi>u</mi><mi>s</mi><mi>e</mi><mo>+</mo><mi>d</mi><mi>e</mi><mi>f</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>s</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>l</mi><mi>o</mi><mi>o</mi><mi>p</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>l</mi><mi>o</mi><mi>o</mi><msub><mi>p</mi><mi>n</mi></msub><mi>u</mi><mi>m</mi><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>u</mi><mi>s</mi><mi>e</mi><mo>+</mo><mi>d</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>n</mi><mi>s</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>l</mi><mi>o</mi><mi>o</mi><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><mi>D</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">priority(t) = \\frac{(use + def outside loop) + loop_num * (use + def inside loop)}{D}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n",
            "tags": [
                "Register Allocation"
            ]
        }
    ]
}