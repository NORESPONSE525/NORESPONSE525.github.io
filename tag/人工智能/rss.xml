<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>NoResponse&#39;s Blog • Posts by &#34;人工智能&#34; tag</title>
        <link>http://example.com</link>
        <description>成分复杂的CSer from ZJU</description>
        <language>en</language>
        <pubDate>Mon, 16 Jun 2025 00:00:00 +0800</pubDate>
        <lastBuildDate>Mon, 16 Jun 2025 00:00:00 +0800</lastBuildDate>
        <category>人工智能</category>
        <category>软件工程</category>
        <category>计算机网络</category>
        <category>编译原理</category>
        <category>Liveness Analysis</category>
        <category>Register Allocation</category>
        <category>词法分析</category>
        <category>语法分析</category>
        <category>语义分析</category>
        <category>抽象语法</category>
        <category>活动记录</category>
        <category>Basic Blocks and Traces</category>
        <category>中间代码</category>
        <category>指令选择</category>
        <category>计算机组成</category>
        <category>数据的表示与运算</category>
        <category>存储系统</category>
        <category>错题</category>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/16/AI/week10-11/</guid>
            <title>Week10-11</title>
            <link>http://example.com/2025/06/16/AI/week10-11/</link>
            <category>人工智能</category>
            <pubDate>Mon, 16 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;深度学习&#34;&gt;&lt;a href=&#34;#深度学习&#34; class=&#34;headerlink&#34; title=&#34;深度学习&#34;&gt;&lt;/a&gt;深度学习&lt;/h1&gt;&lt;h2 id=&#34;前馈神经网络&#34;&gt;&lt;a href=&#34;#前馈神经网络&#34; class=&#34;headerlink&#34; title=&#34;前馈神经网络&#34;&gt;&lt;/a&gt;前馈神经网络&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;神经元&lt;/li&gt;
&lt;li&gt;感知机（多一个激活函数）&lt;/li&gt;
&lt;li&gt;激活函数: .RelU, Sigmoid, Softmax, tanh..&lt;/li&gt;
&lt;li&gt;损失函数: MSE, Cross Entropy…s&lt;/li&gt;
&lt;li&gt;参数优化: BP, 梯度下降&lt;br&gt;具体懒得写了，都说烂了&lt;br&gt;记一下这几个激活函数的形状和应用: tanh和sigmoid大多用于二分类，RelU一般用在隐藏层，Softmax用在多分类而且概率和为1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;CNN&#34;&gt;&lt;a href=&#34;#CNN&#34; class=&#34;headerlink&#34; title=&#34;CNN&#34;&gt;&lt;/a&gt;CNN&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;了解卷积操作和操作之后的结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;池化操作（最大池化、平均池化）&lt;br&gt;卷积层负责提取图像中的局部特征；&lt;br&gt;池化层用来大幅降低参数量级(降维)；&lt;br&gt;激活函数负责非线性化；&lt;br&gt;全连接层类似传统神经网络的部分，用来输出想要的结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;神经网络正则化：为了缓解神经网络在训练过程中出现的过拟合问题，需要采取一些正则化技术来提升神经网络的泛化能力(generalization)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dropout：在训练神经网络过程中，每次参数更新时随机丢掉一部分神经元来减少神经网络复杂度，防止过拟合&lt;br&gt; &lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;/li&gt;
&lt;li&gt;Batch-Normalization（批归一化）:通过规范化的手段，把神经网络每层中任意神经元的输入值分布改变到均值为0、方差为1的标准正态分布。防止梯度消失，收敛更快&lt;/li&gt;
&lt;li&gt;L1-Norm &amp;amp; L2-Norm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;循环神经网络（RNN）&#34;&gt;&lt;a href=&#34;#循环神经网络（RNN）&#34; class=&#34;headerlink&#34; title=&#34;循环神经网络（RNN）&#34;&gt;&lt;/a&gt;循环神经网络（RNN）&lt;/h2&gt;&lt;p&gt;RNN对具有序列特性的数据非常有效，它能挖掘数据中的时序信息以及语义信息&lt;/p&gt;
&lt;p&gt;为了解决&amp;#x3D;&amp;#x3D;梯度消失问题&amp;#x3D;&amp;#x3D;，长短时记忆模型（Long Short-Term Memory，LSTM）被提出&lt;br&gt;LSTM：&lt;br&gt;与简单的循环神经网络结构不同，长短时记忆网络（Long Short-Term Memory，LSTM）中引入了&amp;#x3D;&amp;#x3D;内部记忆单元&amp;#x3D;&amp;#x3D;（internal memory cell）和&amp;#x3D;&amp;#x3D;门&amp;#x3D;&amp;#x3D;（gates）两种结构来对当前时刻输入信息以及前序时刻所生成信息进行整合和传递。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入门(input gate)、遗忘门(forget gate)和输出门(output gate)三种gate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;门控循环单元（GRU）是一种对LSTM简化的深度学习模型。与长短时记忆网络相比，GRU不再使用记忆单元来传递信息，仅使用隐藏状态来进行信息的传递。相比于长短时记忆网络来说，GRU有更高的计算速度。&lt;/p&gt;
&lt;h3 id=&#34;注意力机制&#34;&gt;&lt;a href=&#34;#注意力机制&#34; class=&#34;headerlink&#34; title=&#34;注意力机制&#34;&gt;&lt;/a&gt;注意力机制&lt;/h3&gt;&lt;p&gt;注意力机制对不同信息的关注程度（重要程度）由权值来体现，注意力机制可以视为&amp;#x3D;&amp;#x3D;查询矩阵(Query)&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;、键(key)&amp;#x3D;&amp;#x3D;以及&amp;#x3D;&amp;#x3D;加权平均值&amp;#x3D;&amp;#x3D;构成了多层感知机(Multilayer Perceptron, MLP)&lt;/p&gt;
&lt;h2 id=&#34;深度生成学习（deep-generative-learning-model）&#34;&gt;&lt;a href=&#34;#深度生成学习（deep-generative-learning-model）&#34; class=&#34;headerlink&#34; title=&#34;深度生成学习（deep generative learning model）&#34;&gt;&lt;/a&gt;深度生成学习（deep generative learning model）&lt;/h2&gt;&lt;p&gt;判别模型vs生成模型&lt;br&gt;变分自编码器 (variational auto-encoder, VAE) 、 自回归模型 (Autoregressivemodels)与生成对抗网络（generative adversarial network，GAN）等&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/16/AI/week12-13/</guid>
            <title>Week12-13</title>
            <link>http://example.com/2025/06/16/AI/week12-13/</link>
            <category>人工智能</category>
            <pubDate>Mon, 16 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;强化学习&#34;&gt;&lt;a href=&#34;#强化学习&#34; class=&#34;headerlink&#34; title=&#34;强化学习&#34;&gt;&lt;/a&gt;强化学习&lt;/h1&gt;&lt;p&gt;根据环境所提供的奖罚反馈来学习所处状态可施加的最佳行动，在“探索（未知空间）-利用（已有经验）（exploration vs. exploitation）”之间寻找平衡，完成某个序列化任务，具备自我学习能力&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;智能体（agent）：智能体是强化学习算法的主体，它能够根据经验做出主观判断并执行动作，是整个智能系统的核心。&lt;/li&gt;
&lt;li&gt;环境（environment）：智能体以外的一切统称为环境，环境在与智能体的交互中，能被智能体所采取的动作影响，同时环境也能向智能体反馈状态和奖励。虽说智能体以外的一切都可视为环境，但在设计算法时常常会排除不相关的因素建立一个理想的环境模型来对算法功能进行模拟。&lt;/li&gt;
&lt;li&gt;状态（state）：状态可以理解为智能体对环境的一种理解和编码，通常包含了对智能体所采取决策产生影响的信息。&lt;/li&gt;
&lt;li&gt;动作（action）：动作是智能体对环境产生影响的方式，这里说的动作常常指概念上的动作，如果是在设计机器人时还需考虑动作的执行机构。&lt;/li&gt;
&lt;li&gt;策略（policy）：策略是智能体在所处状态下去执行某个动作的依据，即给定一个状态，智能体可根据一个策略来选择应该采取的动作。&lt;/li&gt;
&lt;li&gt;奖励（reward）：奖励是智能体序贯式采取一系列动作后从环境获得的收益。注意奖励概念是现实中奖励和惩罚的统合，一般用正值来代表实际奖励，用负值来代表实际惩罚。&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;强化学习的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;基于评估&amp;#x3D;&amp;#x3D;：强化学习利用环境评估当前策略，以此为依据进行优化&lt;/li&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;交互性&amp;#x3D;&amp;#x3D;：强化学习的数据在与环境的交互中产生&lt;/li&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;序列决策过程&amp;#x3D;&amp;#x3D;：智能主体在与环境的交互中需要作出一系列的决策，这些决策往往是前后关联的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;离散马尔可夫过程（Discrete-Markov-Process）&#34;&gt;&lt;a href=&#34;#离散马尔可夫过程（Discrete-Markov-Process）&#34; class=&#34;headerlink&#34; title=&#34;离散马尔可夫过程（Discrete Markov Process）&#34;&gt;&lt;/a&gt;离散马尔可夫过程（Discrete Markov Process）&lt;/h2&gt;&lt;p&gt;满足马尔可夫性的离散随机过程&lt;br&gt;用数学归纳法，推出t+1时刻状态仅与t时刻状态有关（一阶马尔可夫链）&lt;br&gt;强化学习是一种机器学习方法，通过与环境的交互来学习最优策略。下面我将通过具体的例子来解释这些公式和概念。&lt;/p&gt;
&lt;h3 id=&#34;马尔可夫奖励过程&#34;&gt;&lt;a href=&#34;#马尔可夫奖励过程&#34; class=&#34;headerlink&#34; title=&#34;马尔可夫奖励过程&#34;&gt;&lt;/a&gt;马尔可夫奖励过程&lt;/h3&gt;&lt;p&gt;$$&lt;br&gt;G_t &amp;#x3D; R_{t+1} + \gamma R_{t+2} + \gamma^2 R_{t+3} + \ldots&lt;br&gt;$$&lt;br&gt;这个公式表示从时间步 t开始的累积回报 $G_t$，其中 $R_{t+i}$ 是在时间步 $t+i$ 获得的即时奖励，$\gamma$ 是折扣因子（范围在 [0, 1] 之间），用于减少未来奖励对当前决策的影响。&lt;/p&gt;
&lt;p&gt;例: 假在一个迷宫中寻找宝藏，每走一步都有可能获得或失去一些分数（奖励）。如果你在第 1 步获得 10 分，在第 2 步获得 5 分，在第 3 步获得 2 分，且折扣因子 $\gamma &amp;#x3D; 0.9$，那么从第 0 步开始的累积回报 $G_0$ 就是：&lt;br&gt;$$&lt;br&gt;G_0 &amp;#x3D; 10 + 0.9 \times 5 + 0.9^2 \times 2 &amp;#x3D; 10 + 4.5 + 1.62 &amp;#x3D; 16.12&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;强化学习的求解方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于价值（1.策略优化 2.策略评估）&lt;/li&gt;
&lt;li&gt;基于策略&lt;/li&gt;
&lt;li&gt;基于模型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;策略学习&#34;&gt;&lt;a href=&#34;#策略学习&#34; class=&#34;headerlink&#34; title=&#34;策略学习&#34;&gt;&lt;/a&gt;策略学习&lt;/h3&gt;&lt;p&gt;价值函数 (value function):&lt;br&gt;$$&lt;br&gt;V_\pi(s) &amp;#x3D; E_\pi[G_t | S_t &amp;#x3D; s]&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;在状态 s 下，按照策略 $\pi$ 行动后在未来所获得的回报的期望值。&lt;/p&gt;
&lt;p&gt;动作-价值函数 (action-value function):&lt;br&gt;$$&lt;br&gt;q_\pi(s, a) &amp;#x3D; E_\pi[G_t | S_t &amp;#x3D; s, A_t &amp;#x3D; a]&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;在状态 s 下采取动作 a，按照策略 $\pi 行动后在未来获得的回报值。&lt;/p&gt;
&lt;p&gt;例: 继续迷宫的例子，假设在某个位置（状态 s有两个选择：向左走（动作 $a_1$ 或向右走（动作 $a_2$）。根据历史数据，向左走的平均回报是 8 分，向右走的平均回报是 12 分。那么在这个状态下，动作-价值函数 $q_\pi(s, a_1) &amp;#x3D; 8$，$q_\pi(s, a_2) &amp;#x3D; 12$。&lt;/p&gt;
&lt;h3 id=&#34;贝尔曼方程&#34;&gt;&lt;a href=&#34;#贝尔曼方程&#34; class=&#34;headerlink&#34; title=&#34;贝尔曼方程&#34;&gt;&lt;/a&gt;贝尔曼方程&lt;/h3&gt;&lt;p&gt;价值函数的贝尔曼方程:&lt;br&gt;$$&lt;br&gt;V_\pi(s) &amp;#x3D; \sum_a \pi(s, a) q_\pi(s, a)&lt;br&gt;$$&lt;br&gt;在状态 s 下，采取各个动作的概率加权平均的动作-价值函数。&lt;/p&gt;
&lt;p&gt;动作-价值函数的贝尔曼方程:&lt;br&gt;$$&lt;br&gt;q_\pi(s, a) &amp;#x3D; \sum_{s’} P(s’ | s, a) [R(s, a, s’) + \gamma V_\pi(s’)]&lt;br&gt;$$&lt;br&gt;在状态s采取动作a的概率*（采取a进入s’得到的回报+处于s’可以得到的回报）。&lt;/p&gt;
&lt;h3 id=&#34;策略评估算法步骤&#34;&gt;&lt;a href=&#34;#策略评估算法步骤&#34; class=&#34;headerlink&#34; title=&#34;策略评估算法步骤&#34;&gt;&lt;/a&gt;策略评估算法步骤&lt;/h3&gt;&lt;h4 id=&#34;动态规划&#34;&gt;&lt;a href=&#34;#动态规划&#34; class=&#34;headerlink&#34; title=&#34;动态规划&#34;&gt;&lt;/a&gt;动态规划&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;初始化 $V_\pi$ 函数：首先需要对所有状态 s 的价值函数 $V_\pi(s)$ 进行初始化，通常可以设置为0或者任意合理的初始值。&lt;/li&gt;
&lt;li&gt;循环迭代：&lt;ul&gt;
&lt;li&gt;对于每一个状态 $s \in S$，根据当前的策略 $\pi$ 和已知的状态转移概率 $Pr(s’|s, a)$，以及即时奖励 $R(s, a, s’)$，更新该状态的价值函数 $V_\pi(s)$。&lt;/li&gt;
&lt;li&gt;更新公式如下：&lt;br&gt;$$&lt;br&gt;V_\pi(s) \leftarrow \sum_{a \in A} \pi(a|s) \sum_{s’ \in S} Pr(s’|s, a) [R(s, a, s’) + \gamma V_\pi(s’)]&lt;br&gt;$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;直到收敛：重复上述迭代过程，直到价值函数 $V_\pi(s)$ 在所有状态上都几乎不再发生变化，即达到收敛状态。这表明我们已经找到了在当前策略 $\pi$ 下各个状态的稳定价值。&lt;br&gt;&amp;#x3D;&amp;#x3D;当前状态的价值是由后续状态的价值通过贝尔曼方程传播回来的&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;策略评估：动态规划、蒙特卡洛采样、时序差分&lt;/p&gt;
&lt;h4 id=&#34;蒙特卡洛采样&#34;&gt;&lt;a href=&#34;#蒙特卡洛采样&#34; class=&#34;headerlink&#34; title=&#34;蒙特卡洛采样&#34;&gt;&lt;/a&gt;蒙特卡洛采样&lt;/h4&gt;&lt;p&gt;通过随机采样来估计期望值&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择起始状态：从状态空间 S 中选择不同的起始状态。&lt;/li&gt;
&lt;li&gt;按照当前策略采样轨迹：从每个起始状态出发，按照当前策略 $\pi$ 生成若干条完整的轨迹（episode）。这些轨迹构成了集合 D。&lt;/li&gt;
&lt;li&gt;计算反馈：对于每条轨迹中的每个状态 s，记录该状态出现时对应的回报 $G_i$ 。&lt;/li&gt;
&lt;li&gt;平均回报：对所有轨迹中状态 s 出现时的回报进行平均，得到该状态的价值 $V_\pi(s)$。&lt;br&gt;假设我们有 k 条轨迹，每条轨迹中状态 s 出现时对应的回报分别为$G_1, G_2, \ldots, G_k$，那么该状态的价值 $V_\pi(s)$ 可以通过以下公式计算：&lt;br&gt;$$&lt;br&gt;V_\pi(s) &amp;#x3D; \frac{1}{k} \sum_{i&amp;#x3D;1}^k G_i&lt;br&gt;$$&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;时序差分-TD&#34;&gt;&lt;a href=&#34;#时序差分-TD&#34; class=&#34;headerlink&#34; title=&#34;时序差分(TD)&#34;&gt;&lt;/a&gt;时序差分(TD)&lt;/h4&gt;&lt;p&gt;时序差分算法通过在每个时间步 t 上更新状态价值函数 $V_\pi(s_t)$，而不是在每个状态 $s_t$ 上进行批量更新。&lt;br&gt;$$&lt;br&gt;V_\pi(s) \leftarrow V_\pi(s) + \alpha [R(s, a, s’) + \gamma V_\pi(s’) - V_\pi(s)]&lt;br&gt;$$&lt;br&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\alpha$ 是学习率，通常取较小的值，如0.1。&lt;/li&gt;
&lt;li&gt;$R(s, a, s’)$ 是即时奖励&lt;/li&gt;
&lt;li&gt;$V_\pi(s’)$ 是状态 $s’$ 的价值函数&lt;/li&gt;
&lt;li&gt;$\gamma$ 是折扣因子，通常取较小的值，如0.9。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Q-learning&#34;&gt;&lt;a href=&#34;#Q-learning&#34; class=&#34;headerlink&#34; title=&#34;Q-learning&#34;&gt;&lt;/a&gt;Q-learning&lt;/h4&gt;&lt;h4 id=&#34;DQN&#34;&gt;&lt;a href=&#34;#DQN&#34; class=&#34;headerlink&#34; title=&#34;DQN&#34;&gt;&lt;/a&gt;DQN&lt;/h4&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/16/AI/week14-15/</guid>
            <title>Week14-15</title>
            <link>http://example.com/2025/06/16/AI/week14-15/</link>
            <category>人工智能</category>
            <pubDate>Mon, 16 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;人工智能博弈&#34;&gt;&lt;a href=&#34;#人工智能博弈&#34; class=&#34;headerlink&#34; title=&#34;人工智能博弈&#34;&gt;&lt;/a&gt;人工智能博弈&lt;/h1&gt;&lt;h2 id=&#34;博弈论&#34;&gt;&lt;a href=&#34;#博弈论&#34; class=&#34;headerlink&#34; title=&#34;博弈论&#34;&gt;&lt;/a&gt;博弈论&lt;/h2&gt;&lt;p&gt;博弈的要素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;player&lt;/li&gt;
&lt;li&gt;strategy&lt;/li&gt;
&lt;li&gt;payoff&lt;/li&gt;
&lt;li&gt;rule&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;博弈策略求解&#34;&gt;&lt;a href=&#34;#博弈策略求解&#34; class=&#34;headerlink&#34; title=&#34;博弈策略求解&#34;&gt;&lt;/a&gt;博弈策略求解&lt;/h2&gt;&lt;h3 id=&#34;遗憾最小化算法（Regret-Minimization）&#34;&gt;&lt;a href=&#34;#遗憾最小化算法（Regret-Minimization）&#34; class=&#34;headerlink&#34; title=&#34;遗憾最小化算法（Regret Minimization）&#34;&gt;&lt;/a&gt;遗憾最小化算法（Regret Minimization）&lt;/h3&gt;&lt;p&gt;下一步选择策略$\Sigma_i$的概率P:&lt;br&gt;$$&lt;br&gt;P(\sigma_i^{T+1}) &amp;#x3D; \begin{cases}&lt;br&gt;\frac{\text{Regret}&lt;em&gt;i^{T,+}(\sigma_i)}{\sum&lt;/em&gt;{\sigma_i’ \in \Sigma_i} \text{Regret}&lt;em&gt;i^{T,+}(\sigma_i’)} &amp;amp; \text{if } \sum&lt;/em&gt;{\sigma_i’ \in \Sigma_i} \text{Regret}_i^{T,+}(\sigma_i’) &amp;gt; 0 \&lt;br&gt;\frac{1}{|\Sigma_i|} &amp;amp; \text{otherwise}&lt;br&gt;\end{cases}&lt;br&gt;$$&lt;br&gt;为什么不直接选遗憾最大的：防止对手发现自己所采取的策略&lt;br&gt;+++info 例子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设两个玩家A和B进行石头-剪刀-布（Rock-Paper-Scissors, RPS）的游戏，获胜玩家收益为1分，失败玩家收益为-1分，平局则两个玩家收益均为零分。&lt;/li&gt;
&lt;li&gt;第一局时，若玩家A出石头（R），玩家B出布（P），则此时玩家A的收益 $\mu_A(R, P) &amp;#x3D; -1$，玩家B的收益为 $\mu_B(P, R) &amp;#x3D; 1$。&lt;/li&gt;
&lt;li&gt;对于玩家A来说，在玩家B出布（P）这个策略情况下，如果玩家A选择出布（P）或者剪刀（S），则玩家A对应的收益值 $\mu_A(P, P) &amp;#x3D; 0$ 或者 $\mu_A(S, P) &amp;#x3D; 1$。&lt;/li&gt;
&lt;li&gt;所以第一局之后，玩家A没有出布的遗憾值为 $\mu_A(P, P) - \mu_A(R, P) &amp;#x3D; 0 - (-1) &amp;#x3D; 1$，没有出剪刀的遗憾值为 $\mu_A(S, P) - \mu_A(R, P) &amp;#x3D; 1 - (-1) &amp;#x3D; 2$。&lt;/li&gt;
&lt;li&gt;所以在第二局中，玩家A选择石头、剪刀和布这三个策略的概率分别为 0、$\frac{2}{3}$、$\frac{1}{3}$。因此，玩家A趋向于在第二局中选择出剪刀这个策略。&lt;/li&gt;
&lt;li&gt;第二局中，玩家A选择剪刀和玩家B选择石头情况下，第二轮石头、剪刀、布的Regret分别为1，0，2，把前两轮的regret加起来计算概率，得到出石头、剪刀、布的概率分别为$\frac{1}{6}$、$\frac{2}{6}$、$\frac{3}{6}$。&lt;br&gt;+++&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;双边匹配算法&#34;&gt;&lt;a href=&#34;#双边匹配算法&#34; class=&#34;headerlink&#34; title=&#34;双边匹配算法&#34;&gt;&lt;/a&gt;双边匹配算法&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/f2.jpg&#34;&gt;&lt;br&gt;在第一轮中，4名男性分别向自己最喜欢的女性表白，而收到3人表白的女性A选择了自己最喜欢的男性3，另一个收到表白的女性B选择了男性4；在第二轮中，尚未匹配的男性1和男性2继续向自己第二喜欢的对象表白，收到表白的女性B选择了自己更喜欢的男性2而放弃了男性4；同理，继续三轮表白和选择，所有人都找到了自己的伴侣，且所有匹配都是稳定的。可以看出，使用G-S算法得到了稳定匹配的结果。&lt;/p&gt;
&lt;h3 id=&#34;单边匹配算法-最大交易圈&#34;&gt;&lt;a href=&#34;#单边匹配算法-最大交易圈&#34; class=&#34;headerlink&#34; title=&#34;单边匹配算法-最大交易圈&#34;&gt;&lt;/a&gt;单边匹配算法-最大交易圈&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/f3.jpg&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个人指向最喜欢的物，每个物指向占有它的人&lt;/li&gt;
&lt;li&gt;如果有圈，就把打成交易的人和物和相关边都删掉&lt;/li&gt;
&lt;li&gt;继续&lt;br&gt;&lt;img data-src=&#34;/f4.jpg&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/15/AI/week8-9/</guid>
            <title>Week8-9</title>
            <link>http://example.com/2025/06/15/AI/week8-9/</link>
            <category>人工智能</category>
            <pubDate>Sun, 15 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;K-Means&#34;&gt;&lt;a href=&#34;#K-Means&#34; class=&#34;headerlink&#34; title=&#34;K-Means&#34;&gt;&lt;/a&gt;K-Means&lt;/h1&gt;&lt;p&gt;问题描述：如何将n个数据依据其相似度大小将它们分别聚类到k个集合，使得每个数据仅属于一个聚类集合。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化质心：随机选择k个数据点作为初始质心$c_1, c_2, …, c_k$。&lt;/li&gt;
&lt;li&gt;分配数据点：对于每个数据点$x_i$，计算它与所有质心的距离，并将其分配到距离最近的质心所在的簇中&lt;/li&gt;
&lt;li&gt;更新质心：对于每个簇，计算该簇内所有数据点的平均值，将该平均值作为新的质心。&lt;/li&gt;
&lt;li&gt;迭代过程：重复执行分配和更新步骤，直到质心不再发生变化或达到预设的最大迭代次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;主成分分析-PCA&#34;&gt;&lt;a href=&#34;#主成分分析-PCA&#34; class=&#34;headerlink&#34; title=&#34;主成分分析(PCA)&#34;&gt;&lt;/a&gt;主成分分析(PCA)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;输入：n个d维样本数据所构成的矩阵$\mathbf{X}$，降维后的维数l&lt;/li&gt;
&lt;li&gt;输出：映射矩阵$\mathbf{W} &amp;#x3D; {\mathbf{w}_1, \mathbf{w}_2, …, \mathbf{w}_l}$&lt;br&gt;算法步骤：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对于每个样本数据$\mathbf{x}_i$进行中心化处理：&lt;br&gt;$$&lt;br&gt;\mathbf{x}_i’ &amp;#x3D; \mathbf{x}&lt;em&gt;i - \mu, \quad \mu &amp;#x3D; \frac{1}{n}\sum&lt;/em&gt;{j&amp;#x3D;1}^{n} \mathbf{x}_j&lt;br&gt;$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算原始样本数据的协方差矩阵：&lt;br&gt;$$&lt;br&gt;\Sigma &amp;#x3D; \frac{1}{n-1} \mathbf{X}^T \mathbf{X}&lt;br&gt;$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对协方差矩阵$\Sigma$进行特征值分解，对所得特征根按其值大到小排序$\lambda_1 \geq \lambda_2 \geq \cdots \geq \lambda_d$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;取前$l$个最大特征根所对应特征向量$\mathbf{w}_1, \mathbf{w}_2, …, \mathbf{w}_l$组成映射矩阵$\mathbf{W}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将每个样本数据$\mathbf{x}&lt;em&gt;i$按照如下方法降维：&lt;br&gt;$$&lt;br&gt;(\mathbf{x}&lt;em&gt;i)&lt;/em&gt;{1 \times d} (\mathbf{W})&lt;/em&gt;{d \times l} &amp;#x3D; 1 \times l&lt;br&gt;$$&lt;br&gt;区分：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;维度&lt;/th&gt;
&lt;th&gt;PCA&lt;/th&gt;
&lt;th&gt;LDA&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;无监督&lt;/td&gt;
&lt;td&gt;有监督&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;目标&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;最大化方差，保留主要分布信息&lt;/td&gt;
&lt;td&gt;最大化类间距离，最小化类内距离&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;是否使用类别信息&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;? 不使用&lt;/td&gt;
&lt;td&gt;? 使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;适用任务&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;数据压缩、可视化、去噪&lt;/td&gt;
&lt;td&gt;分类任务的特征提取&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;降维后维度上限&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;可任意，但一般小于原维度&lt;/td&gt;
&lt;td&gt;最多降到 $k-1$ 维（$k$ 是类别数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;数学基础&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;协方差矩阵的特征值分解&lt;/td&gt;
&lt;td&gt;类间&amp;#x2F;类内散度矩阵的广义特征值分解&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;其他降维方法：&lt;ul&gt;
&lt;li&gt;非负矩阵分解 （non-negative matrix factorization, NMF）&lt;/li&gt;
&lt;li&gt;多维尺度法（Metric multidimensional scaling, MDS）&lt;/li&gt;
&lt;li&gt;局部线性嵌入（Locally Linear Embedding，LLE）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;特征人脸方法&#34;&gt;&lt;a href=&#34;#特征人脸方法&#34; class=&#34;headerlink&#34; title=&#34;特征人脸方法&#34;&gt;&lt;/a&gt;特征人脸方法&lt;/h1&gt;&lt;p&gt;输入时将每幅人脸图像转换成列向量&lt;br&gt;&lt;img data-src=&#34;/f1.jpg&#34;&gt;&lt;br&gt;算法描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入：$n$个1024维人脸样本数据所构成的矩阵$\mathbf{X}$，降维后的维数$l$&lt;/li&gt;
&lt;li&gt;输出：映射矩阵$\mathbf{W} &amp;#x3D; {\mathbf{w}_1, \mathbf{w}_2, …, \mathbf{w}_l}$（其中每个$\mathbf{w}_j (1 \leq j \leq l)$是一个特征人脸）&lt;br&gt;算法步骤&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;中心化处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对每个人脸样本数据$x_i$进行中心化处理：&lt;br&gt;$$&lt;br&gt;x_i’ &amp;#x3D; x_i - \mu, \quad \mu &amp;#x3D; \frac{1}{n}\sum_{j&amp;#x3D;1}^{n} x_j&lt;br&gt;$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算协方差矩阵：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算原始人脸样本数据的协方差矩阵：&lt;br&gt;$$&lt;br&gt;\Sigma &amp;#x3D; \frac{1}{n-1} \mathbf{X}^T \mathbf{X}&lt;br&gt;$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;特征值分解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对协方差矩阵$\Sigma$进行特征值分解，对所得特征根按从大到小排序：&lt;br&gt;$$&lt;br&gt;\lambda_1 \geq \lambda_2 \geq \cdots \geq \lambda_d&lt;br&gt;$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;构建映射矩阵：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取前$l$个最大特征根所对应特征向量$\mathbf{w}_1, \mathbf{w}_2, …, \mathbf{w}_l$组成映射矩阵$\mathbf{W}$。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据降维：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将每个人脸图像$x_i$按照如下方法降维：&lt;br&gt;$$&lt;br&gt;(\mathbf{x}&lt;em&gt;i)&lt;/em&gt;{1 \times d} (\mathbf{W})_{d \times l} &amp;#x3D; 1 \times l&lt;br&gt;$$&lt;br&gt;（其实用的是pca，多的一步就是输入的时候把32*32的图摊开成1024*1的列向量而已）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;潜在语义分析（Latent-Semantic-Analysis-LSA）&#34;&gt;&lt;a href=&#34;#潜在语义分析（Latent-Semantic-Analysis-LSA）&#34; class=&#34;headerlink&#34; title=&#34;潜在语义分析（Latent Semantic Analysis, LSA）&#34;&gt;&lt;/a&gt;潜在语义分析（Latent Semantic Analysis, LSA）&lt;/h1&gt;&lt;p&gt;步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;构建单词-文档矩阵：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建一个单词-文档矩阵$A$，其中每个元素$a_{ij}$表示第$i$个单词在第$j$个文档中的频率（通常使用词频-逆文档频率TF-IDF进行加权）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;奇异值分解（SVD）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对单词-文档矩阵$A$进行奇异值分解，即$A &amp;#x3D; U \Sigma V^T$，其中$U$和$V$分别是左奇异向量和右奇异向量组成的矩阵，$\Sigma$是对角矩阵，其对角线上的元素是$A$的奇异值（按降序排列）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择前$k$个最大奇异值及对应的奇异向量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选取前$k$个最大的奇异值及其对应的奇异向量，形成低秩逼近矩阵$A_k &amp;#x3D; U_k \Sigma_k V_k^T$。这里$k$的选择取决于保留多少原始信息量，通常根据累积能量准则或经验确定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重建矩阵并挖掘语义关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用$A_k$代替原始矩阵$A$，可以计算任意两个文档之间的相似度（如皮尔逊相关系数），从而发现文档-文档之间的关联关系。&lt;/li&gt;
&lt;li&gt;同样地，也可以用于探索单词-单词、单词-文档间的隐含关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;期望最大化算法（Expectation-Maximization-Algorithm-EM）&#34;&gt;&lt;a href=&#34;#期望最大化算法（Expectation-Maximization-Algorithm-EM）&#34; class=&#34;headerlink&#34; title=&#34;期望最大化算法（Expectation-Maximization Algorithm, EM）&#34;&gt;&lt;/a&gt;期望最大化算法（Expectation-Maximization Algorithm, EM）&lt;/h1&gt;&lt;p&gt;EM算法是一种迭代方法，主要用于含有隐变量的概率模型参数估计问题。它分为&amp;#x3D;&amp;#x3D;E步（求期望）&amp;#x3D;&amp;#x3D;和&amp;#x3D;&amp;#x3D;M步（最大化）&amp;#x3D;&amp;#x3D;，通过迭代方式逼近模型参数的最大似然估计值。&lt;/p&gt;
&lt;p&gt;步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;初始化模型参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先为模型参数设定初始值（例如高斯混合模型中的均值、方差等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;E步（Expectation Step）：计算隐变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于当前的模型参数，计算隐变量的后验概率分布。对于每一个样本$x_i$和可能的隐变量$z_i$，计算$p(z_i|x_i, \theta)$，其中$\theta$表示当前的模型参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M步（Maximization Step）：最大化似然函数和更新模型参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据观测数据$x_i$、隐变量$z_i$的后验概率分布，重新估计模型参数$\theta$，以最大化完整数据的对数似然函数$\log p(x,z|\theta)$的期望。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重复E步和M步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不断重复执行E步和M步，直到模型参数收敛或者达到预定的迭代次数为止。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体的没看懂，等我懂了再说&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/12/AI/week6-7/</guid>
            <title>Week6-7</title>
            <link>http://example.com/2025/06/12/AI/week6-7/</link>
            <category>人工智能</category>
            <pubDate>Thu, 12 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Ch4-机器学习&#34;&gt;&lt;a href=&#34;#Ch4-机器学习&#34; class=&#34;headerlink&#34; title=&#34;Ch4 机器学习&#34;&gt;&lt;/a&gt;Ch4 机器学习&lt;/h1&gt;&lt;h2 id=&#34;监督学习&#34;&gt;&lt;a href=&#34;#监督学习&#34; class=&#34;headerlink&#34; title=&#34;监督学习&#34;&gt;&lt;/a&gt;监督学习&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;标注数据&lt;/li&gt;
&lt;li&gt;学习模型&lt;/li&gt;
&lt;li&gt;损失函数&lt;br&gt;典型的损失函数&lt;br&gt;&lt;img data-src=&#34;/figure2.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经验风险(empirical risk )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;训练集中数据产生的损失。&lt;/li&gt;
&lt;li&gt;经验风险越小说明学习模型对训练数据拟合程度越好。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;期望风险(expected risk):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当测试集中存在无穷多数据时产生的损失。&lt;/li&gt;
&lt;li&gt;期望风险越小，学习所得模型越好。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经验风险最小化&lt;/p&gt;
&lt;p&gt;$$\min_{f \in \Phi} \frac{1}{n} \sum_{i&amp;#x3D;1}^{n} Loss(y_i, f(x_i))$$&lt;/p&gt;
&lt;p&gt;期望风险最小化&lt;/p&gt;
&lt;p&gt;$$\min_{f \in \Phi} \int_{x \times y} Loss(y, f(x)) P(x, y) dx dy$$&lt;/p&gt;
&lt;p&gt;模型泛化能力与经验风险、期望风险的关系&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;经验风险小（训练集上表现好）&lt;/th&gt;
&lt;th&gt;期望风险小（测试集上表现好）&lt;/th&gt;
&lt;th&gt;泛化能力强&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;经验风险小（训练集上表现好）&lt;/td&gt;
&lt;td&gt;期望风险大（测试集上表现不好）&lt;/td&gt;
&lt;td&gt;过学习（模型过于复杂）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;经验风险大（训练集上表现不好）&lt;/td&gt;
&lt;td&gt;期望风险大（测试集上表现不好）&lt;/td&gt;
&lt;td&gt;欠学习&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;经验风险大（训练集上表现不好）&lt;/td&gt;
&lt;td&gt;期望风险小（测试集上表现好）&lt;/td&gt;
&lt;td&gt;“神仙算法”或“黄粱美梦”&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;结构风险最小化 (structural risk minimization)&lt;/p&gt;
&lt;p&gt;为了防止过拟合，在经验风险上加上表示模型复杂度的正则化项 (regularizer) 或惩罚项 (penalty term):&lt;/p&gt;
&lt;p&gt;$$\min_{f \in \Phi} \frac{1}{n} \sum_{i&amp;#x3D;1}^{n} Loss(y_i, f(x_i)) + \lambda J(f)$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;经验风险: $\frac{1}{n} \sum_{i&amp;#x3D;1}^{n} Loss(y_i, f(x_i))$&lt;/li&gt;
&lt;li&gt;模型复杂度: $\lambda J(f)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;监督学习方法又可以分为 生成方法 (generative approach) 和 判别方法(discriminative approach)。所学到的模型分别称为生成模型(generative model)和判别模型(discriminative model)&lt;br&gt;&lt;img data-src=&#34;/figure1.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;回归分析&#34;&gt;&lt;a href=&#34;#回归分析&#34; class=&#34;headerlink&#34; title=&#34;回归分析&#34;&gt;&lt;/a&gt;回归分析&lt;/h1&gt;&lt;h2 id=&#34;线性回归&#34;&gt;&lt;a href=&#34;#线性回归&#34; class=&#34;headerlink&#34; title=&#34;线性回归&#34;&gt;&lt;/a&gt;线性回归&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一元线性回归&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$y_i &amp;#x3D; ax_i + b \quad (1 \leq i \leq n)$$&lt;/p&gt;
&lt;p&gt;$$a &amp;#x3D; \frac{\sum_{i&amp;#x3D;1}^{n} x_i y_i - n \bar{x} \bar{y}}{\sum_{i&amp;#x3D;1}^{n} x_i^2 - n \bar{x}^2}$$&lt;/p&gt;
&lt;p&gt;$$b &amp;#x3D; \bar{y} - a \bar{x}$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;多元线性回归&lt;br&gt;$$f(x_i) &amp;#x3D; a_0 + \sum_{j&amp;#x3D;1}^{D} a_j x_{i,j} &amp;#x3D; a_0 + \mathbf{a}^T \mathbf{x}_i$$&lt;br&gt;a是要求的参数，x是输入的数据，f是预测值。&lt;br&gt;为了方便，使用矩阵来表示所有的训练数据和数据标签。&lt;br&gt;$$X &amp;#x3D; [x_1, …, x_m], \quad y &amp;#x3D; [y_1, …, y_m]$$&lt;br&gt;最小化均方误差得到：&lt;br&gt;$$a &amp;#x3D; (XX^T)^{-1}X^Ty$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;逻辑斯蒂回归&amp;#x2F;对数几率回归&lt;br&gt;线性回归一个明显的问题是对离群点导致模型建模不稳定，使结果有偏，为了缓解这个问题（特别是在二分类场景中）带来的影响，可考虑逻辑斯蒂回归&lt;br&gt;逻辑斯蒂回归就是在回归模型中引入 sigmoid函数的一种非线性回归模型&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;逻辑斯蒂回归-Logistic-Regression&#34;&gt;&lt;a href=&#34;#逻辑斯蒂回归-Logistic-Regression&#34; class=&#34;headerlink&#34; title=&#34;逻辑斯蒂回归 (Logistic Regression)&#34;&gt;&lt;/a&gt;逻辑斯蒂回归 (Logistic Regression)&lt;/h2&gt;&lt;p&gt;逻辑斯蒂回归（logistic regression）就是在回归模型中引入 sigmoid 函数的一种非线性回归模型。Logistic 回归模型可如下表示：&lt;/p&gt;
&lt;p&gt;$$ y &amp;#x3D; \frac{1}{1 + e^{-z}} &amp;#x3D; \frac{1}{1 + e^{-(w^T x + b)}} $$&lt;br&gt;其中 $y \in (0, 1)$，$z &amp;#x3D; w^T x + b$。&lt;br&gt;这里 $\frac{1}{1 + e^{-z}}$ 是 sigmoid 函数，$x \in \mathbb{R}^d$ 是输入数据，$w \in \mathbb{R}^d$ 和 $b \in \mathbb{R}$ 是回归函数的参数。&lt;/p&gt;
&lt;p&gt;逻辑斯蒂回归多用于&amp;#x3D;&amp;#x3D;二分类&amp;#x3D;&amp;#x3D;问题&lt;br&gt;Sigmoid 函数将任意实数映射到区间(0,1)，这正好符合“概率”的取值范围，所以函数的输出y可以被解释为输入数据x属于正例的概率&lt;br&gt;因此我们可以将输出 y 解释为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在给定输入特征 x 的条件下，该样本属于正类（例如类别 1）的概率。&lt;br&gt;即：&lt;br&gt;$$&lt;br&gt;y &amp;#x3D; P(y &amp;#x3D; 1 \mid x)&lt;br&gt;$$&lt;br&gt;如果 $P(y&amp;#x3D;1|x)$ 表示给定输入 $x$ 属于正类的概率，则 $1 - P(y&amp;#x3D;1|x)$ 表示属于负类的概率。&lt;br&gt;$\frac{P(y&amp;#x3D;1|x)}{1 - P(y&amp;#x3D;1|x)}$ 就是正类相对于负类的优势比。所以&amp;gt;1就归为正类，反之就是负类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;$$&lt;br&gt;\log \frac{P(y&amp;#x3D;1|x)}{P(y&amp;#x3D;0|x)} &amp;#x3D; {w^T x + b} &amp;gt; \log{1} &amp;#x3D; 0&lt;br&gt;$$&lt;br&gt;从这里可以看出，logistic回归本质上是一个线性模型。在预测时，可以计算线性函数$w^T x + b$取值是否大于0来判断输入数据x的类别归属&lt;/p&gt;
&lt;p&gt;为了找到最优参数w和b，我们使用最大似然估计，假设每个样本独立同分布，则&lt;br&gt;……&lt;br&gt;公式懒得敲了，&lt;/p&gt;
&lt;p&gt;为什么基于相关性的方法可能会导致模型的不可解释性和不稳定性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因果特征和非因果特征&lt;/li&gt;
&lt;li&gt;Making V⊥Y: 最终目标是让非因果特征 V 与输出 Y 独立，即消除虚假相关性，使得模型更加稳定和可解释&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;决策树&#34;&gt;&lt;a href=&#34;#决策树&#34; class=&#34;headerlink&#34; title=&#34;决策树&#34;&gt;&lt;/a&gt;决策树&lt;/h1&gt;&lt;p&gt;决策树是一种通过树形结构来进行分类的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信息熵（entropy）是度量样本集合纯度最常用的一种指标&lt;br&gt;假设有一个K个信息（类别），其组成了集合样本D，记第k个信息（类别）发生的概率为$p_k (1 \leq k \leq K)$。如下定义这K个信息的信息熵：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$Ent(D) &amp;#x3D; -\sum_{k&amp;#x3D;1}^{K} p_k \log_2 p_k$$&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;$Ent(D)$值越小，表示D包含的信息越确定，也称D的纯度越高。&amp;#x3D;&amp;#x3D;所有$p_k$累加起来的和为1。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信息增益:衡量使用某个属性进行划分后，数据集不确定性减少的程度&lt;br&gt;得到信息熵后可以进一步计算信息增益：&lt;br&gt;$$Gain(D, A) &amp;#x3D; Ent(D) - \sum_{i&amp;#x3D;1}^{n} \frac{|D_i|}{|D|} Ent(D_i)$$&lt;br&gt;&lt;img data-src=&#34;/f3.png&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/f4.png&#34;&gt;&lt;br&gt;ID3决策树学习算法[Quinlan, 1986]以信息增益为准则来选择划分属性&lt;br&gt;目标：通过不断划分，使得每个子集尽可能“纯净”，即子集内的样本属于同一类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;信息熵（和上面的一样的）&lt;br&gt;$$&lt;br&gt;info &amp;#x3D; -\sum_{i&amp;#x3D;1}^{n} \frac{|D_i|}{|D|} \log_2 \frac{|D_i|}{|D|}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;增益率（Gain-ratio）：&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;Gain-ratio &amp;#x3D; \frac{Gain(D, A)}{info}&lt;br&gt;$$&lt;br&gt;存在的问题：增益率准则对可取数目较少的属性有所偏好&lt;/p&gt;
&lt;p&gt;另一种计算更简的度量指标是如下的 Gini 指数（基尼指数）：&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;Gini(D) &amp;#x3D; 1 - \sum_{k&amp;#x3D;1}^{K} p_k^2&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;相对于信息熵的计算 $E(D) &amp;#x3D; -\sum_{k&amp;#x3D;1}^{K} p_k \log_2 p_k$，不用计算对数 log，计算更为简易。&lt;/p&gt;
&lt;h2 id=&#34;连续属性离散化&#34;&gt;&lt;a href=&#34;#连续属性离散化&#34; class=&#34;headerlink&#34; title=&#34;连续属性离散化&#34;&gt;&lt;/a&gt;连续属性离散化&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;确定连续属性的取值范围，确定划分点集合&lt;br&gt;考虑包含 n-1 个元素的候选划分点集合：&lt;br&gt;$$&lt;br&gt;T_a &amp;#x3D; \left{ \frac{a^i + a^{i+1}}{2} ,\middle|, 1 \leq i \leq n - 1 \right}&lt;br&gt;$$&lt;br&gt;这里的每个候选划分点是相邻两个取值的中点，即区间 $[a^i, a^{i+1})$ 的中位点 $\frac{a^i + a^{i+1}}{2}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算信息增益&lt;br&gt;$$&lt;br&gt;\text{Gain}(D, a, t) &amp;#x3D; \text{Ent}(D) - \sum_{\lambda \in {-, +}} \frac{|D_t^\lambda|}{|D|} \cdot \text{Ent}(D_t^\lambda)&lt;br&gt;$$&lt;br&gt;计算每个划分点的信息增益率，选择信息增益最大的划分点&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++info example&lt;br&gt;;;;id3 example&lt;br&gt;给定数据点及其对应的类别标签如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$a_1 &amp;#x3D; 1$ -&amp;gt; 类别为 0&lt;/li&gt;
&lt;li&gt;$a_2 &amp;#x3D; 3$ -&amp;gt; 类别为 1&lt;/li&gt;
&lt;li&gt;$a_3 &amp;#x3D; 5$ -&amp;gt; 类别为 0&lt;/li&gt;
&lt;li&gt;$a_4 &amp;#x3D; 7$ -&amp;gt; 类别为 1&lt;/li&gt;
&lt;li&gt;$a_5 &amp;#x3D; 9$ -&amp;gt; 类别为 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，我们的数据集 $D$ 是 ${1, 3, 5, 7, 9}$，对应的类别标签分别为 ${0, 1, 0, 1, 0}$。&lt;/p&gt;
&lt;p&gt;第一步：计算原始数据集的信息熵&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;Ent(D) &amp;#x3D; -\left( p_0 \log_2 p_0 + p_1 \log_2 p_1 \right)&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;其中，$p_0 &amp;#x3D; \frac{3}{5}$，$p_1 &amp;#x3D; \frac{2}{5}$，则：&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;Ent(D) &amp;#x3D; -\left( \frac{3}{5} \log_2 \frac{3}{5} + \frac{2}{5} \log_2 \frac{2}{5} \right) \approx 0.971&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;第二步：确定候选划分点集合&lt;/p&gt;
&lt;p&gt;根据公式 $T_a &amp;#x3D; \left{ \frac{a^i + a^{i+1}}{2} ,\middle|, 1 \leq i \leq n - 1 \right}$，我们得到候选划分点集合：&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;T_a &amp;#x3D; {2, 4, 6, 8}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;第三步：计算每个候选划分点的信息增益&lt;/p&gt;
&lt;p&gt;以划分点 $t &amp;#x3D; 4$ 为例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$D_t^{-} &amp;#x3D; {1, 3}$，类别为 ${0, 1}$&lt;/li&gt;
&lt;li&gt;$D_t^{+} &amp;#x3D; {5, 7, 9}$，类别为 ${0, 1, 0}$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算这两个子集的熵：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$$Ent(D_t^{-}) &amp;#x3D; -\left( \frac{1}{2} \log_2 \frac{1}{2} + \frac{1}{2} \log_2 \frac{1}{2} \right) &amp;#x3D; 1$$&lt;/li&gt;
&lt;li&gt;$$Ent(D_t^{+}) &amp;#x3D; -\left( \frac{2}{3} \log_2 \frac{2}{3} + \frac{1}{3} \log_2 \frac{1}{3} \right) \approx 0.918$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算信息增益：&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;Gain(D, a, t&amp;#x3D;4) &amp;#x3D; Ent(D) - \left( \frac{|D_t^{-}|}{|D|} \cdot Ent(D_t^{-}) + \frac{|D_t^{+}|}{|D|} \cdot Ent(D_t^{+}) \right)&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;代入数值：&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;Gain(D, a, t&amp;#x3D;4) &amp;#x3D; 0.971 - \left( \frac{2}{5} \cdot 1 + \frac{3}{5} \cdot 0.918 \right) \approx 0.029&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;重复上述过程，对所有划分点 $t &amp;#x3D; 2, 4, 6, 8$ 进行类似计算，并选择使 $Gain(D, a, t)$ 最大的那个作为最优划分点。&lt;br&gt;;;;&lt;br&gt;+++&lt;/p&gt;
&lt;h1 id=&#34;线性区别分析-LDA-FDA&#34;&gt;&lt;a href=&#34;#线性区别分析-LDA-FDA&#34; class=&#34;headerlink&#34; title=&#34;线性区别分析 (LDA&amp;#x2F;FDA)&#34;&gt;&lt;/a&gt;线性区别分析 (LDA&amp;#x2F;FDA)&lt;/h1&gt;&lt;p&gt;线性判别分析(linear discriminant analysis， LDA)是一种基于监督学习的降维方法，也称为Fisher线性判别分析(fisher’s discriminant analysis，FDA),对于一组具有标签信息的高维数据样本，LDA利用其类别信息，将其线性投影到一个低维空间上，在低维空间中同一类别样本尽可能靠近，不同类别样本尽可能彼此远离。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算数据样本集中每个类别样本的均值&lt;/li&gt;
&lt;li&gt;计算类内散度矩阵$S_w$和类间散度矩阵$S_b$&lt;/li&gt;
&lt;li&gt;根据$S_w^{-1}S_bW&amp;#x3D;\lambda W$来求解$S_w^{-1}S_b$所对应前$r$个最大特征值所对应特征向量$(w_1,w_2,…,w_r)$，构成矩阵W&lt;/li&gt;
&lt;li&gt;通过矩阵$W$将每个样本映射到低维空间，实现特征降维。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体不想看，考到就给了&lt;/p&gt;
&lt;h1 id=&#34;Ada-Boosting&#34;&gt;&lt;a href=&#34;#Ada-Boosting&#34; class=&#34;headerlink&#34; title=&#34;Ada Boosting&#34;&gt;&lt;/a&gt;Ada Boosting&lt;/h1&gt;&lt;p&gt;。。看不懂懒得看&lt;/p&gt;
&lt;h1 id=&#34;支持向量机&#34;&gt;&lt;a href=&#34;#支持向量机&#34; class=&#34;headerlink&#34; title=&#34;支持向量机&#34;&gt;&lt;/a&gt;支持向量机&lt;/h1&gt;&lt;h1 id=&#34;生成学习模型&#34;&gt;&lt;a href=&#34;#生成学习模型&#34; class=&#34;headerlink&#34; title=&#34;生成学习模型&#34;&gt;&lt;/a&gt;生成学习模型&lt;/h1&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/06/11/AI/week4-5/</guid>
            <title>Week4-5</title>
            <link>http://example.com/2025/06/11/AI/week4-5/</link>
            <category>人工智能</category>
            <pubDate>Wed, 11 Jun 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;#Ch3 搜索算法&lt;/p&gt;
&lt;h2 id=&#34;无信息搜索&#34;&gt;&lt;a href=&#34;#无信息搜索&#34; class=&#34;headerlink&#34; title=&#34;无信息搜索&#34;&gt;&lt;/a&gt;无信息搜索&lt;/h2&gt;&lt;p&gt;BFS DFS 略&lt;/p&gt;
&lt;h2 id=&#34;启发式搜索&#34;&gt;&lt;a href=&#34;#启发式搜索&#34; class=&#34;headerlink&#34; title=&#34;启发式搜索&#34;&gt;&lt;/a&gt;启发式搜索&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;贪婪优先搜索&lt;ul&gt;
&lt;li&gt;每次取最短的；缺点：不一定是最优的&lt;/li&gt;
&lt;li&gt;时间和空间复杂度均为 $O(b_m)$，b是搜索树分支因子，m是最大深度&lt;br&gt;&lt;img data-src=&#34;/figure1.png&#34;&gt;&lt;br&gt;:::info&lt;br&gt;每次取当前节点的下一个节点到终点中直线距离最短的&lt;br&gt;:::&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A*算法&lt;ul&gt;
&lt;li&gt;评价函数：f(n) &amp;#x3D; g(n) + h(n)&lt;/li&gt;
&lt;li&gt;代价函数 g(n) 表示从起始结点到结点n的开销代价值&lt;/li&gt;
&lt;li&gt;启发函数 h(n) 表示从结点n到目标结点路径中所估算的最小开销代价值。&lt;/li&gt;
&lt;li&gt;评价函数 f(n) 可视为经过结点n、具有最小开销代价值的路径。&lt;ul&gt;
&lt;li&gt;在最短路径问题中，g(?)为当前选择的路径的实际距离，即从上一个节点到下一个节点的实际距离，?(?)为下一个节点到目标城市的直线距离。每一次搜索，下一个节点选择与此刻城市连接的所有节点中，g(?)+?(?)最小的城市节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::info&lt;br&gt;取（当前节点到下一节点的距离+下一节点到目标城市的距离）最短的&lt;br&gt;:::&lt;br&gt;A*算法的完备性和最优性取决于搜索问题和启发函数的性质&lt;br&gt;一个良好的启发函数需要满足:可容性（admissible）;一致性（consistency）&lt;br&gt;如果启发函数是可容的，那么树搜索的A*算法满足最优性(最优性:搜索算法是否能保证找到的第一个解是最优解)&lt;br&gt;满足一致性条件的启发函数一定满足可容性条件，反之不一定&lt;/p&gt;
&lt;h2 id=&#34;对抗搜索&#34;&gt;&lt;a href=&#34;#对抗搜索&#34; class=&#34;headerlink&#34; title=&#34;对抗搜索&#34;&gt;&lt;/a&gt;对抗搜索&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最小最大搜索（minimax）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最小最大搜索是一个在你和对手轮流行动的情况下，为你自己寻找最优策略的算法。&lt;/li&gt;
&lt;li&gt;算法：略&lt;/li&gt;
&lt;li&gt;时间复杂度：$O(b^m)$&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(bm)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;\alpha-\beta剪枝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minimax 会穷举整个博弈树，但我们可以用剪枝技巧跳过一些无用分支，让它跑得更快&lt;/li&gt;
&lt;li&gt;max层的下界取下一层（上界）里面最大的；min层的上界取下一层（下界）里面最小的&lt;br&gt;懒得写直接看例子：&lt;br&gt;&lt;img data-src=&#34;/figure2.png&#34;&gt;&lt;br&gt; Alpha-Beta 剪枝算法什么时候扩展的结点数量最少？&lt;/li&gt;
&lt;li&gt;每一层最左端结点的所有孩子结点均被访问，其他节点仅有最左端孩子结点被访问、其他孩子结点被剪枝。&lt;br&gt; 如果一个节点导致了其兄弟节点被剪枝，可知其孩子节点必然被扩展。&lt;/li&gt;
&lt;li&gt;最优效率下时间复杂度：$O(b^{m&amp;#x2F;2})$  (或者m+1);最差的就是完全没剪枝和minimax一样&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;蒙特卡洛树搜索&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择(UCB)、扩展、模拟(随机)、反向传播&lt;/li&gt;
&lt;li&gt;悔值函数&lt;br&gt;:::info&lt;br&gt;没完全懂，后面再回来研究&lt;br&gt;:::&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/05/20/AI/week1/</guid>
            <title>Week1</title>
            <link>http://example.com/2025/05/20/AI/week1/</link>
            <category>人工智能</category>
            <pubDate>Tue, 20 May 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;2025-2026春夏人工智能课程笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Ch1-绪论&#34;&gt;&lt;a href=&#34;#Ch1-绪论&#34; class=&#34;headerlink&#34; title=&#34;Ch1 绪论&#34;&gt;&lt;/a&gt;Ch1 绪论&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;人工智能求解：&lt;ul&gt;
&lt;li&gt;以符号主义为核心的逻辑推理：将概念（如命题等）符号化，从若干判断（前提）出发得到新判断（结论）&lt;/li&gt;
&lt;li&gt;以问题求解为核心的探寻搜索:探寻搜索依据已有信息来寻找满足约束条件的待求解问题的答案&lt;/li&gt;
&lt;li&gt;以数据驱动为核心的机器学习:从数据中发现数据所承载语义（如概念）的内在模式&lt;/li&gt;
&lt;li&gt;以行为主义为核心的强化学习:根据环境所提供的奖罚反馈来学习所处状态可施加的最佳行动，在“探索（未知空间）-利用（已有经验）（exploration vs. exploitation）”之间寻找平衡，完成某个序列化任务，具备自我学习能力&lt;/li&gt;
&lt;li&gt;以博弈对抗为核心的群体智能:从“数据拟合”优化解的求取向“均衡解”的求取迈进&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2025/05/20/AI/week2-3/</guid>
            <title>Week2-3</title>
            <link>http://example.com/2025/05/20/AI/week2-3/</link>
            <category>人工智能</category>
            <pubDate>Tue, 20 May 2025 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Ch2-知识表达与推理&#34;&gt;&lt;a href=&#34;#Ch2-知识表达与推理&#34; class=&#34;headerlink&#34; title=&#34;Ch2 知识表达与推理&#34;&gt;&lt;/a&gt;Ch2 知识表达与推理&lt;/h1&gt;&lt;h2 id=&#34;命题逻辑&#34;&gt;&lt;a href=&#34;#命题逻辑&#34; class=&#34;headerlink&#34; title=&#34;命题逻辑&#34;&gt;&lt;/a&gt;命题逻辑&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;/img1.png&#34;&gt;&lt;br&gt;真值表：&lt;br&gt;&lt;img data-src=&#34;/img2.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“条件”命题联结词中前提为假时命题结论永远为真，bi-conditional只有两个都是true或者都是false才是true&lt;br&gt;逻辑等价：给定命题p和命题q，如果&amp;#x3D;&amp;#x3D;p和q在所有情况下都具有同样真假结果&amp;#x3D;&amp;#x3D;，那么p和q在逻辑上等价，一般用 $\equiv$ 来表示，即p $\equiv$ q。&lt;br&gt;判断逻辑等价：画真值表&lt;br&gt;逻辑等价式：&lt;br&gt;&lt;img data-src=&#34;/img3.jpg&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/img4.png&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;normal form&lt;ul&gt;
&lt;li&gt;有限个简单合取式构成的析取式称为析取(or)范式&lt;/li&gt;
&lt;li&gt;由有限个简单析取式构成的合取式称为合取(and)范式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;谓词逻辑&#34;&gt;&lt;a href=&#34;#谓词逻辑&#34; class=&#34;headerlink&#34; title=&#34;谓词逻辑&#34;&gt;&lt;/a&gt;谓词逻辑&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;全称量词与存在量词&lt;/li&gt;
&lt;li&gt;约束变元、自由变元&lt;br&gt;:::info&lt;br&gt;在约束变元相同的情况下，量词的运算满足分配律：全称量词对析取没有分配律、存在量词对合取没有分配律&lt;br&gt;:::&lt;br&gt;$$\begin{aligned}&lt;br&gt;(\forall x)(A(x) \lor B(x)) \equiv (\forall x)A(x) \lor (\forall x)B(x) 不成立&lt;br&gt;\end{aligned}$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\forall x)(A(x) \land B(x)) \equiv (\forall x)A(x) \land (\forall x)B(x) 成立&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\exists x)(A(x) \lor B(x)) \equiv (\exists x)A(x) \lor (\exists x)B(x) 成立&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\exists x)(A(x) \land B(x)) \equiv (\exists x)A(x) \land (\exists x)B(x) 不成立&lt;br&gt;\end{aligned}$$&lt;br&gt;:::info&lt;br&gt;当公式中存在多个量词时，若多个量词都是全称量词或者都是存在量词，则量词的位置可以互换；若多个量词中既有全称量词又有存在量词，则量词的位置不可以随意互换&lt;br&gt;:::&lt;br&gt;$$\begin{aligned}&lt;br&gt;(\forall x)(\forall y)A(x, y) \equiv (\forall y)(\forall x)A(x, y)&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\exists x)(\exists y)A(x, y) \equiv (\exists y)(\exists x)A(x, y)&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\forall x)(\forall y)A(x, y) \equiv (\exists y)(\forall x)A(x, y)&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\forall x)(\forall y)A(x, y) \equiv (\exists x)(\forall y)A(x, y)&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\exists y)(\forall x)A(x, y) \equiv (\forall x)(\exists y)A(x, y)&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\exists x)(\forall y)A(x, y) \equiv (\forall y)(\exists x)A(x, y)&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\forall x)(\exists y)A(x, y) \equiv (\exists y)(\exists x)A(x, y)&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;(\forall y)(\exists x)A(x, y) \equiv (\exists x)(\exists y)A(x, y)&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用谓词逻辑进行推理&lt;ul&gt;
&lt;li&gt;全称量词消去： $(\forall x) A(x) \equiv A(y)$&lt;/li&gt;
&lt;li&gt;全称量词引入： $A(y) \equiv (\forall x) A(x)$&lt;/li&gt;
&lt;li&gt;存在量词消去： $(\exists x) A(x) \equiv A(c)$&lt;/li&gt;
&lt;li&gt;存在量词引入： $A(c) \equiv (\exists x) A(x)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;知识图谱推理&#34;&gt;&lt;a href=&#34;#知识图谱推理&#34; class=&#34;headerlink&#34; title=&#34;知识图谱推理&#34;&gt;&lt;/a&gt;知识图谱推理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;知识图谱可视为包含多种关系的图。在图中，每个节点是一个实体（如人名、地名、事件和活动等），任意两个节点之间的边表示这两个节点之间存在的关系。&lt;/li&gt;
&lt;li&gt;可将知识图谱中任意两个相连节点及其连接边表示成一个三元组（triplet）,即 (left_node, relation, right_node)&lt;br&gt;两类代表性方法：&lt;/li&gt;
&lt;li&gt;归纳逻辑程序设计 (inductive logic programming，ILP)算法&lt;/li&gt;
&lt;li&gt;路径排序算法（path ranking algorithm, PRA）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ILP: 一阶归纳学习FOIL（First Order Inductive Learner）&lt;br&gt;推理手段: 正例集合 + 反例集合 + 背景知识样例 ⟹ 目标谓词作为结论的推理规则&lt;br&gt;&lt;img data-src=&#34;/img5.png&#34;&gt;&lt;br&gt;懒得写了，看ppt吧&lt;br&gt;&lt;img data-src=&#34;/img6.png&#34;&gt;&lt;br&gt;推理规则覆盖所有正例且不覆盖任何反例的时候算法结束&lt;/p&gt;
&lt;p&gt;PRA: 路径排序算法&lt;br&gt;&lt;img data-src=&#34;/img7.png&#34;&gt;&lt;br&gt;(4)的意思是看两个实体能不能通过(3)的关系从第一个走到第二个。&lt;br&gt;后面的1表示正例，-1表示负例。&lt;/p&gt;
&lt;h2 id=&#34;概率图推理&#34;&gt;&lt;a href=&#34;#概率图推理&#34; class=&#34;headerlink&#34; title=&#34;概率图推理&#34;&gt;&lt;/a&gt;概率图推理&lt;/h2&gt;&lt;p&gt;贝叶斯网络&lt;br&gt;&lt;img data-src=&#34;/img14.png&#34;&gt;&lt;br&gt;要会算&lt;/p&gt;
&lt;p&gt;马尔科夫逻辑网络&lt;/p&gt;
&lt;h2 id=&#34;因果推理&#34;&gt;&lt;a href=&#34;#因果推理&#34; class=&#34;headerlink&#34; title=&#34;因果推理&#34;&gt;&lt;/a&gt;因果推理&lt;/h2&gt;&lt;p&gt;因果定义：变量X是变量Y的原因，当且仅当保持其它所有变量不变的情况下，改变X的值能导致Y的值发生变化。&lt;br&gt;因果效应：因变量X改变一个单位时，果变量Y的变化程度&lt;/p&gt;
&lt;p&gt;因果图是有向无环图&lt;/p&gt;
&lt;p&gt;结构因果模型：结构因果模型由两组变量集合U和V以及一组函数f组成。其中，f是根据模型中其他变量取值而给V中每一个变量赋值的函数&lt;br&gt;结构因果模型中的原因：如果变量X出现在给变量X赋值的函数中，如$Y &amp;#x3D; f(X) + \epsilon$，则X是Y的直接原因&lt;br&gt;因果图中的联合概率分布：直接看图&lt;br&gt;&lt;img data-src=&#34;/img8.png&#34;&gt;&lt;br&gt;因果图的基本结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链结构&lt;br&gt;  - &lt;img data-src=&#34;/img9.png&#34;&gt;&lt;br&gt;  - 对于变量X和Y，若X和Y之间只有一条单向的路径，变量Z是截断(intercept)该路径的集合中的任一变量，则在给定Z时，X和Y条件独立。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$&lt;br&gt;P(X, Y | Z) &amp;#x3D; P(X | Z)P(Y | Z)&lt;br&gt;$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分连结构&lt;br&gt;  - &lt;img data-src=&#34;/img10.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$&lt;br&gt;P(X, Y | Z) &amp;#x3D; \frac {P(X, Y, Z)}{P(Z)} &amp;#x3D; \frac {P(X | Z)P(Y | Z)P(Z)}{P(Z)} &amp;#x3D; P(X | Z)P(Y | Z)&lt;br&gt;$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;汇联结构&lt;br&gt;  - &lt;img data-src=&#34;/img11.jpg&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$&lt;br&gt;P(X, Y | Z) &amp;#x3D; \frac{P(X, Y, Z)} {P(Z)} &amp;#x3D; \frac {P(X, Y, Z)}{P(Z)} &amp;#x3D; \frac {P(X)P(Y)P(Z&amp;#x2F;X, Y)}{P(Z)} \neq P(X | Z)P(Y | Z)&lt;br&gt;$$&lt;/p&gt;
&lt;h3 id=&#34;D-分离-directional-separation-d-separation-，可用于判断任意两个节点的相关性和独立性&#34;&gt;&lt;a href=&#34;#D-分离-directional-separation-d-separation-，可用于判断任意两个节点的相关性和独立性&#34; class=&#34;headerlink&#34; title=&#34;D-分离(directional separation, d-separation)，可用于判断任意两个节点的相关性和独立性&#34;&gt;&lt;/a&gt;D-分离(directional separation, d-separation)，可用于判断任意两个节点的相关性和独立性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;限定集：已知或观察到的变量集合（给定的变量集合）&lt;/li&gt;
&lt;li&gt;路径p被限定集Z阻塞(block)当且仅当：&lt;ul&gt;
&lt;li&gt;(1) 路径p含有链结构A → B → C或分连结构A ← B → C且中间节点B在Z中，或&lt;/li&gt;
&lt;li&gt;(2) 路径p含有汇连结构A → B ← C且汇连节点B及其后代都不在Z中。&lt;/li&gt;
&lt;li&gt;若Z阻塞了节点X和节点Y之间的每一条路径，则称给定Z时，X和Y是D-分离，即给定Z时，X和Y条件独立&lt;/li&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;链式、分连中间节点在，汇联中间节点和后代不在则D-分离&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因果定义：变量X是变量Y的原因，当且仅当保持其它所有变量不变的情况下，改变X的值能导致Y的值发生变化。&lt;br&gt;因果效应：因变量X改变一个单位时，果变量Y的变化程度因果推理的两个关键因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改变因变量T&lt;/li&gt;
&lt;li&gt;保证其它变量不变&lt;br&gt;干预：干预(intervention)指的是固定(fix)系统中的变量，然后改变系统，观察其他变量的变化。&lt;br&gt;为了与X自然取值x时进行区分，在对X进行干预时，引入“do算子”(do-calculus)，记作do(X &amp;#x3D; x)。&lt;br&gt;因此，P(Y &amp;#x3D; y|X &amp;#x3D; x)表示的是当发现X &amp;#x3D; x时，Y&amp;#x3D; y的概率；而P(Y &amp;#x3D; y|do(X &amp;#x3D;x))表示的是对X进行干预，固定其值为x时，Y &amp;#x3D; y的概率。&lt;br&gt;用统计学的术语来说，P(Y &amp;#x3D; y|X &amp;#x3D; x)反映的是在取值为x的个体X上，Y的总体分布；而P(Y &amp;#x3D; y|do(X &amp;#x3D;x))反映的是如果将每一个X取值都固定为x时，Y的总体分布。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因果效应差&amp;#x2F;平均因果效应 (ACE)  懒得写了看图吧&lt;br&gt;&lt;img data-src=&#34;/img12.png&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/img13.png&#34;&gt;&lt;br&gt;计算因果效应的关键在于计算操纵概率(manipulatedprobability) $P_m$&lt;br&gt;调整公式：&lt;br&gt;$$&lt;br&gt;P(Y &amp;#x3D; y \mid do(X &amp;#x3D; x)) &amp;#x3D; \sum_z P(Y &amp;#x3D; y \mid X &amp;#x3D; x, Z &amp;#x3D; z) \cdot P(Z &amp;#x3D; z)&lt;br&gt;$$&lt;br&gt;对于Z的每一个取值z，计算X和Y的条件概率并取均值&lt;br&gt;+++info example&lt;br&gt;;;;id3 例题&lt;br&gt;假设我们研究以下变量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X：是否服药  &lt;ul&gt;
&lt;li&gt;$X &amp;#x3D; 1$：服药  &lt;/li&gt;
&lt;li&gt;$X &amp;#x3D; 0$：不服药&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Y：是否康复  &lt;ul&gt;
&lt;li&gt;$Y &amp;#x3D; 1$：康复  &lt;/li&gt;
&lt;li&gt;$Y &amp;#x3D; 0$：未康复&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Z：性别  &lt;ul&gt;
&lt;li&gt;$Z &amp;#x3D; 0$：男  &lt;/li&gt;
&lt;li&gt;$Z &amp;#x3D; 1$：女&lt;br&gt;我们知道性别会影响：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;是否选择服药（比如男性更倾向于尝试新药）&lt;/li&gt;
&lt;li&gt;康复率（比如女性可能有更强的免疫力）&lt;br&gt;因此，性别 Z 是一个混杂变量，需要在分析中进行控制。&lt;br&gt;已知：&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Z（性别）&lt;/th&gt;
&lt;th&gt;P(Z)&lt;/th&gt;
&lt;th&gt;P(Y&amp;#x3D;1 | X&amp;#x3D;1, Z)&lt;/th&gt;
&lt;th&gt;P(Y&amp;#x3D;1 | X&amp;#x3D;0, Z)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;男（0）&lt;/td&gt;
&lt;td&gt;0.6&lt;/td&gt;
&lt;td&gt;0.7&lt;/td&gt;
&lt;td&gt;0.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;女（1）&lt;/td&gt;
&lt;td&gt;0.4&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;0.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;我们想知道：&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;如果强制所有人都服药（即 $do(X&amp;#x3D;1)$），整体康复率是多少？&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;也就是要计算：&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$$&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P(Y&amp;#x3D;1 \mid do(X&amp;#x3D;1))&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$$&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;;;;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;;;;id3 答案&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;根据调整公式：&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$&lt;br&gt;P(Y&amp;#x3D;1 \mid do(X&amp;#x3D;1)) &amp;#x3D; \sum_z P(Y&amp;#x3D;1 \mid X&amp;#x3D;1, Z&amp;#x3D;z) \cdot P(Z&amp;#x3D;z)&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;代入数据计算&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;P(Y&amp;#x3D;1 \mid do(X&amp;#x3D;1)) &amp;#x3D; P(Y&amp;#x3D;1 \mid X&amp;#x3D;1, Z&amp;#x3D;0) \cdot P(Z&amp;#x3D;0) + P(Y&amp;#x3D;1 \mid X&amp;#x3D;1, Z&amp;#x3D;1) \cdot P(Z&amp;#x3D;1)&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;&amp;#x3D; 0.7 \times 0.6 + 0.5 \times 0.4 &amp;#x3D; 0.42 + 0.2 &amp;#x3D; 0.62&lt;br&gt;$$&lt;br&gt;+++&lt;/p&gt;
&lt;p&gt;(因果效应)给定因果图G，PA表示X的父节点集合，则X对Y的因果效应为&lt;br&gt;$$&lt;br&gt;P(Y&amp;#x3D;y \mid do(X&amp;#x3D;x)) &amp;#x3D; \sum_z P(Y&amp;#x3D;y \mid X&amp;#x3D;x, PA&amp;#x3D;z) \cdot P(PA&amp;#x3D;z)&lt;br&gt;$$&lt;br&gt;后门调整：&lt;br&gt;不写了&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
